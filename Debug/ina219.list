
ina219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000862c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  08008740  08008740  00018740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090cc  080090cc  000209e4  2**0
                  CONTENTS
  4 .ARM          00000000  080090cc  080090cc  000209e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090cc  080090cc  000209e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e4  20000000  080090d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200009e4  08009ab8  000209e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  08009ab8  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ce  00000000  00000000  00020a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002239  00000000  00000000  0002f1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00031418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  00031d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001896e  00000000  00000000  000325b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfd2  00000000  00000000  0004af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084880  00000000  00000000  00056ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000db7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009e4 	.word	0x200009e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008724 	.word	0x08008724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009e8 	.word	0x200009e8
 800014c:	08008724 	.word	0x08008724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	460c      	mov	r4, r1
 8000c58:	4605      	mov	r5, r0
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	f7ff feab 	bl	80009bc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x20>
 8000c68:	4628      	mov	r0, r5
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4628      	mov	r0, r5
 8000c76:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fc21 	bl	80004d8 <__aeabi_dmul>
 8000c96:	f7ff fef7 	bl	8000a88 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fba2 	bl	80003e4 <__aeabi_ui2d>
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca4:	f7ff fc18 	bl	80004d8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fa5a 	bl	8000168 <__aeabi_dsub>
 8000cb4:	f7ff fee8 	bl	8000a88 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <Read16>:
#include "main.h"
#include "INA219.h"
#include "i2c.h"

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, Value, 2, 1000);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b299      	uxth	r1, r3
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2302      	movs	r3, #2
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f001 fd64 	bl	80027c0 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	b29b      	uxth	r3, r3
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000d20:	883b      	ldrh	r3, [r7, #0]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000d2a:	883b      	ldrh	r3, [r7, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	b299      	uxth	r1, r3
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	f001 fc3a 	bl	80025cc <HAL_I2C_Mem_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffaa 	bl	8000cc4 <Read16>
 8000d70:	4603      	mov	r3, r0
 8000d72:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	b29b      	uxth	r3, r3

}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000d8e:	2104      	movs	r1, #4
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff97 	bl	8000cc4 <Read16>
 8000d96:	4603      	mov	r3, r0
 8000d98:	81fb      	strh	r3, [r7, #14]

	return (result);
 8000d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffe8 	bl	8000d86 <INA219_ReadCurrent_raw>
 8000db6:	4603      	mov	r3, r0
 8000db8:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <INA219_ReadCurrent+0x2c>)
 8000dc0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000dc8:	b21b      	sxth	r3, r3
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000e10 	.word	0x20000e10

08000dd8 <INA219_Reset>:

	return (result * 0.001 );
}

void INA219_Reset(INA219_t *ina219)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff92 	bl	8000d10 <Write16>
	HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f000 ff07 	bl	8001c00 <HAL_Delay>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff7f 	bl	8000d10 <Write16>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff6f 	bl	8000d10 <Write16>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <INA219_setCalibration_32V_10A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_10A(INA219_t *ina219)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000e44:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000e48:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT_128S_69MS |
						INA219_CONFIG_SADCRES_12BIT_128S_69MS |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 1638;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <INA219_setCalibration_32V_10A+0x40>)
 8000e4c:	f240 6266 	movw	r2, #1638	; 0x666
 8000e50:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 1;    // Current LSB = 40uA per bit (1000/40 = 25)
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <INA219_setCalibration_32V_10A+0x44>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 20; // Power LSB = 800uW per bit
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <INA219_setCalibration_32V_10A+0x48>)
 8000e5a:	2214      	movs	r2, #20
 8000e5c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <INA219_setCalibration_32V_10A+0x40>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffc8 	bl	8000dfa <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffd3 	bl	8000e1a <INA219_setConfig>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000e12 	.word	0x20000e12
 8000e80:	20000e10 	.word	0x20000e10
 8000e84:	20000e14 	.word	0x20000e14

08000e88 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	4613      	mov	r3, r2
 8000e94:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <INA219_Init+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <INA219_Init+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	68b8      	ldr	r0, [r7, #8]
 8000ebc:	f001 fee8 	bl	8002c90 <HAL_I2C_IsDeviceReady>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d107      	bne.n	8000eda <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ff84 	bl	8000dd8 <INA219_Reset>
		INA219_setCalibration_32V_10A(ina219);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ffb3 	bl	8000e3c <INA219_setCalibration_32V_10A>

		return 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000eda:	2300      	movs	r3, #0
	}
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000e10 	.word	0x20000e10
 8000ee8:	20000e14 	.word	0x20000e14

08000eec <OLED_ClearBuffer>:
static uint8_t oled_buffer[1024];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e006      	b.n	8000f0a <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <OLED_ClearBuffer+0x34>)
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	3301      	adds	r3, #1
 8000f08:	81fb      	strh	r3, [r7, #14]
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f10:	d3f4      	bcc.n	8000efc <OLED_ClearBuffer+0x10>
	}
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000a00 	.word	0x20000a00

08000f24 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 8000f2e:	2300      	movs	r3, #0
 8000f30:	733b      	strb	r3, [r7, #12]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <OLED_SendCommand+0x30>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	230a      	movs	r3, #10
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	2178      	movs	r1, #120	; 0x78
 8000f46:	f001 fa43 	bl	80023d0 <HAL_I2C_Master_Transmit>
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000e00 	.word	0x20000e00

08000f58 <OLED_Init>:
}

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8000f60:	4a30      	ldr	r2, [pc, #192]	; (8001024 <OLED_Init+0xcc>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <OLED_Init+0xcc>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	2178      	movs	r1, #120	; 0x78
 8000f70:	f001 fe8e 	bl	8002c90 <HAL_I2C_IsDeviceReady>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <OLED_Init+0x26>
	{
		return 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e04e      	b.n	800101c <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8000f7e:	20ae      	movs	r0, #174	; 0xae
 8000f80:	f7ff ffd0 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 8000f84:	20d5      	movs	r0, #213	; 0xd5
 8000f86:	f7ff ffcd 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 8000f8a:	2080      	movs	r0, #128	; 0x80
 8000f8c:	f7ff ffca 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 8000f90:	20a8      	movs	r0, #168	; 0xa8
 8000f92:	f7ff ffc7 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 8000f96:	203f      	movs	r0, #63	; 0x3f
 8000f98:	f7ff ffc4 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 8000f9c:	20d3      	movs	r0, #211	; 0xd3
 8000f9e:	f7ff ffc1 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ffbe 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 8000fa8:	2040      	movs	r0, #64	; 0x40
 8000faa:	f7ff ffbb 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8000fae:	208d      	movs	r0, #141	; 0x8d
 8000fb0:	f7ff ffb8 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f7ff ffb5 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 8000fba:	2020      	movs	r0, #32
 8000fbc:	f7ff ffb2 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff ffaf 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 8000fc6:	20a1      	movs	r0, #161	; 0xa1
 8000fc8:	f7ff ffac 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 8000fcc:	20c8      	movs	r0, #200	; 0xc8
 8000fce:	f7ff ffa9 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 8000fd2:	20da      	movs	r0, #218	; 0xda
 8000fd4:	f7ff ffa6 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f7ff ffa3 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 8000fde:	2081      	movs	r0, #129	; 0x81
 8000fe0:	f7ff ffa0 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 8000fe4:	20ff      	movs	r0, #255	; 0xff
 8000fe6:	f7ff ff9d 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 8000fea:	20d9      	movs	r0, #217	; 0xd9
 8000fec:	f7ff ff9a 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8000ff0:	20f1      	movs	r0, #241	; 0xf1
 8000ff2:	f7ff ff97 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 8000ff6:	20db      	movs	r0, #219	; 0xdb
 8000ff8:	f7ff ff94 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 8000ffc:	2040      	movs	r0, #64	; 0x40
 8000ffe:	f7ff ff91 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 8001002:	20a4      	movs	r0, #164	; 0xa4
 8001004:	f7ff ff8e 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 8001008:	20a6      	movs	r0, #166	; 0xa6
 800100a:	f7ff ff8b 	bl	8000f24 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 800100e:	20af      	movs	r0, #175	; 0xaf
 8001010:	f7ff ff88 	bl	8000f24 <OLED_SendCommand>

	OLED_Clear(0);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f807 	bl	8001028 <OLED_Clear>
	
	return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000e00 	.word	0x20000e00

08001028 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <OLED_Clear+0x18>
 8001038:	20ff      	movs	r0, #255	; 0xff
 800103a:	f7ff ff57 	bl	8000eec <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 800103e:	e002      	b.n	8001046 <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff53 	bl	8000eec <OLED_ClearBuffer>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <OLED_Invert>:

void OLED_Invert(uint8_t inverted)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
	if (inverted)	OLED_SendCommand(OLED_INVERT_DISPLAY);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <OLED_Invert+0x18>
 800105e:	20a7      	movs	r0, #167	; 0xa7
 8001060:	f7ff ff60 	bl	8000f24 <OLED_SendCommand>
	else			OLED_SendCommand(OLED_NORMAL_DISPLAY);
}
 8001064:	e002      	b.n	800106c <OLED_Invert+0x1e>
	else			OLED_SendCommand(OLED_NORMAL_DISPLAY);
 8001066:	20a6      	movs	r0, #166	; 0xa6
 8001068:	f7ff ff5c 	bl	8000f24 <OLED_SendCommand>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <OLED_DrawBuffer>:
		}
	}
}

void OLED_DrawBuffer(const uint8_t *progmem_buffer)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint8_t current_byte;

	for (uint8_t y_pos = 0; y_pos < OLED_HEIGHT; y_pos++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e02e      	b.n	80010e0 <OLED_DrawBuffer+0x6c>
	{
		for (uint8_t x_pos = 0; x_pos < OLED_WIDTH; x_pos++)
 8001082:	2300      	movs	r3, #0
 8001084:	73bb      	strb	r3, [r7, #14]
 8001086:	e024      	b.n	80010d2 <OLED_DrawBuffer+0x5e>
		{
			current_byte = progmem_buffer[y_pos * 16 + x_pos / 8];
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	7bba      	ldrb	r2, [r7, #14]
 800108e:	08d2      	lsrs	r2, r2, #3
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	4413      	add	r3, r2
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	737b      	strb	r3, [r7, #13]

			if (current_byte & (OLED_WIDTH >> (x_pos & 7)))	OLED_DrawPixelStatus(x_pos, y_pos, 1);
 800109e:	7b7a      	ldrb	r2, [r7, #13]
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	fa41 f303 	asr.w	r3, r1, r3
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <OLED_DrawBuffer+0x4c>
 80010b2:	7bf9      	ldrb	r1, [r7, #15]
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f819 	bl	80010f0 <OLED_DrawPixelStatus>
 80010be:	e005      	b.n	80010cc <OLED_DrawBuffer+0x58>
			else											OLED_DrawPixelStatus(x_pos, y_pos, 0);
 80010c0:	7bf9      	ldrb	r1, [r7, #15]
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2200      	movs	r2, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f812 	bl	80010f0 <OLED_DrawPixelStatus>
		for (uint8_t x_pos = 0; x_pos < OLED_WIDTH; x_pos++)
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73bb      	strb	r3, [r7, #14]
 80010d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dad6      	bge.n	8001088 <OLED_DrawBuffer+0x14>
	for (uint8_t y_pos = 0; y_pos < OLED_HEIGHT; y_pos++)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	3301      	adds	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b3f      	cmp	r3, #63	; 0x3f
 80010e4:	d9cd      	bls.n	8001082 <OLED_DrawBuffer+0xe>
		}
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <OLED_DrawPixelStatus>:

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db3d      	blt.n	8001186 <OLED_DrawPixelStatus+0x96>
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b3f      	cmp	r3, #63	; 0x3f
 800110e:	d83a      	bhi.n	8001186 <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01a      	beq.n	800114c <OLED_DrawPixelStatus+0x5c>
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	4603      	mov	r3, r0
 8001120:	01db      	lsls	r3, r3, #7
 8001122:	4413      	add	r3, r2
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <OLED_DrawPixelStatus+0xa0>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	b25a      	sxtb	r2, r3
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b259      	sxtb	r1, r3
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	b2c9      	uxtb	r1, r1
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <OLED_DrawPixelStatus+0xa0>)
 8001148:	54d1      	strb	r1, [r2, r3]
 800114a:	e01d      	b.n	8001188 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	4603      	mov	r3, r0
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	4413      	add	r3, r2
 800115a:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <OLED_DrawPixelStatus+0xa0>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	b25a      	sxtb	r2, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4013      	ands	r3, r2
 8001174:	b259      	sxtb	r1, r3
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4603      	mov	r3, r0
 800117a:	01db      	lsls	r3, r3, #7
 800117c:	4413      	add	r3, r2
 800117e:	b2c9      	uxtb	r1, r1
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <OLED_DrawPixelStatus+0xa0>)
 8001182:	54d1      	strb	r1, [r2, r3]
 8001184:	e000      	b.n	8001188 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8001186:	bf00      	nop
}
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000a00 	.word	0x20000a00

08001194 <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7fe ffd7 	bl	8000150 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	73bb      	strb	r3, [r7, #14]
 80011ae:	e01a      	b.n	80011e6 <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <OLED_GetWidthStr+0x64>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <OLED_GetWidthStr+0x64>)
 80011b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011ba:	4619      	mov	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <OLED_GetWidthStr+0x64>)
 80011c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011c8:	1ac3      	subs	r3, r0, r3
 80011ca:	fb03 f301 	mul.w	r3, r3, r1
 80011ce:	3304      	adds	r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4413      	add	r3, r2
 80011d8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	3301      	adds	r3, #1
 80011de:	73bb      	strb	r3, [r7, #14]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3301      	adds	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	7bba      	ldrb	r2, [r7, #14]
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3e0      	bcc.n	80011b0 <OLED_GetWidthStr+0x1c>
	}

	return len;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000e18 	.word	0x20000e18

080011fc <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4604      	mov	r4, r0
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4623      	mov	r3, r4
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	4603      	mov	r3, r0
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	717b      	strb	r3, [r7, #5]
 8001216:	4613      	mov	r3, r2
 8001218:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <OLED_DrawChar+0xfc>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <OLED_DrawChar+0xfc>)
 8001220:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001224:	4618      	mov	r0, r3
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4933      	ldr	r1, [pc, #204]	; (80012f8 <OLED_DrawChar+0xfc>)
 800122a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800122e:	1a5b      	subs	r3, r3, r1
 8001230:	fb03 f300 	mul.w	r3, r3, r0
 8001234:	3304      	adds	r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e050      	b.n	80012e2 <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e044      	b.n	80012d0 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4929      	ldr	r1, [pc, #164]	; (80012f8 <OLED_DrawChar+0xfc>)
 8001252:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8001256:	3901      	subs	r1, #1
 8001258:	fb01 f303 	mul.w	r3, r1, r3
 800125c:	4926      	ldr	r1, [pc, #152]	; (80012f8 <OLED_DrawChar+0xfc>)
 800125e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001262:	fb93 f3f1 	sdiv	r3, r3, r1
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	fa42 f303 	asr.w	r3, r2, r3
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d011      	beq.n	80012a8 <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4413      	add	r3, r2
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	797a      	ldrb	r2, [r7, #5]
 800128e:	7bbb      	ldrb	r3, [r7, #14]
 8001290:	4413      	add	r3, r2
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	793b      	ldrb	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	f7ff ff25 	bl	80010f0 <OLED_DrawPixelStatus>
 80012a6:	e010      	b.n	80012ca <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2d8      	uxtb	r0, r3
 80012b0:	797a      	ldrb	r2, [r7, #5]
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2d9      	uxtb	r1, r3
 80012b8:	793b      	ldrb	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	f7ff ff13 	bl	80010f0 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73bb      	strb	r3, [r7, #14]
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <OLED_DrawChar+0xfc>)
 80012d4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80012d8:	4293      	cmp	r3, r2
 80012da:	dbb4      	blt.n	8001246 <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3a9      	bcc.n	8001240 <OLED_DrawChar+0x44>
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000e18 	.word	0x20000e18

080012fc <OLED_DrawNumf>:

	OLED_DrawStr(buf, x, y, mode);
}

void OLED_DrawNumf(float num, uint8_t x, uint8_t y, uint8_t mode)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	4608      	mov	r0, r1
 8001306:	4611      	mov	r1, r2
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	460b      	mov	r3, r1
 8001310:	70bb      	strb	r3, [r7, #2]
 8001312:	4613      	mov	r3, r2
 8001314:	707b      	strb	r3, [r7, #1]
	char buf[15];
	sprintf(buf, "%.03f", num);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff f886 	bl	8000428 <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	f107 0008 	add.w	r0, r7, #8
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <OLED_DrawNumf+0x44>)
 8001326:	f003 fc6b 	bl	8004c00 <siprintf>

	OLED_DrawStr(buf, x, y, mode);
 800132a:	787b      	ldrb	r3, [r7, #1]
 800132c:	78ba      	ldrb	r2, [r7, #2]
 800132e:	78f9      	ldrb	r1, [r7, #3]
 8001330:	f107 0008 	add.w	r0, r7, #8
 8001334:	f000 f806 	bl	8001344 <OLED_DrawStr>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	08008744 	.word	0x08008744

08001344 <OLED_DrawStr>:

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	460b      	mov	r3, r1
 8001358:	70bb      	strb	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
	int8_t stl = strlen(str);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7fe fef6 	bl	8000150 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2bfe      	cmp	r3, #254	; 0xfe
 8001370:	d106      	bne.n	8001380 <OLED_DrawStr+0x3c>
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff0e 	bl	8001194 <OLED_GetWidthStr>
 8001378:	4603      	mov	r3, r0
 800137a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800137e:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d109      	bne.n	800139a <OLED_DrawStr+0x56>
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff04 	bl	8001194 <OLED_GetWidthStr>
 800138c:	4603      	mov	r3, r0
 800138e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001392:	0fda      	lsrs	r2, r3, #31
 8001394:	4413      	add	r3, r2
 8001396:	105b      	asrs	r3, r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	2bff      	cmp	r3, #255	; 0xff
 800139e:	d108      	bne.n	80013b2 <OLED_DrawStr+0x6e>
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <OLED_DrawStr+0xcc>)
 80013a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013a6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80013aa:	0fda      	lsrs	r2, r3, #31
 80013ac:	4413      	add	r3, r2
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	73bb      	strb	r3, [r7, #14]
 80013b6:	e021      	b.n	80013fc <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7818      	ldrb	r0, [r3, #0]
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	7bf9      	ldrb	r1, [r7, #15]
 80013c2:	f7ff ff1b 	bl	80011fc <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <OLED_DrawStr+0xcc>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <OLED_DrawStr+0xcc>)
 80013cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013d0:	4619      	mov	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <OLED_DrawStr+0xcc>)
 80013da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013de:	1ac3      	subs	r3, r0, r3
 80013e0:	fb03 f301 	mul.w	r3, r3, r1
 80013e4:	3304      	adds	r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4413      	add	r3, r2
 80013ee:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3301      	adds	r3, #1
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbd8      	blt.n	80013b8 <OLED_DrawStr+0x74>
	}
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000e18 	.word	0x20000e18

08001414 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
	uint8_t i;

			for (i = 0; i < 8; i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e02a      	b.n	8001476 <OLED_UpdateScreen+0x62>
				OLED_SendCommand(0xB0 + i);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	3b50      	subs	r3, #80	; 0x50
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd7c 	bl	8000f24 <OLED_SendCommand>

				OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <OLED_UpdateScreen+0x74>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd74 	bl	8000f24 <OLED_SendCommand>
				OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <OLED_UpdateScreen+0x74>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd6a 	bl	8000f24 <OLED_SendCommand>

				HAL_I2C_Mem_Write(hi2c, OLED_ADDRESS, 0x40, 1, &oled_buffer[OLED_WIDTH * i], OLED_WIDTH, 100);
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <OLED_UpdateScreen+0x78>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	01db      	lsls	r3, r3, #7
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <OLED_UpdateScreen+0x7c>)
 800145a:	4413      	add	r3, r2
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	9202      	str	r2, [sp, #8]
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	2240      	movs	r2, #64	; 0x40
 800146a:	2178      	movs	r1, #120	; 0x78
 800146c:	f001 f8ae 	bl	80025cc <HAL_I2C_Mem_Write>
			for (i = 0; i < 8; i++) {
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3301      	adds	r3, #1
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b07      	cmp	r3, #7
 800147a:	d9d1      	bls.n	8001420 <OLED_UpdateScreen+0xc>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
		}
	}*/
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000000 	.word	0x20000000
 800148c:	20000e00 	.word	0x20000e00
 8001490:	20000a00 	.word	0x20000a00

08001494 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	 Font.font = new_font;
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <FontSet+0x54>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
	 Font.width = (int16_t)fontbyte(0);
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <FontSet+0x54>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <FontSet+0x54>)
 80014ac:	809a      	strh	r2, [r3, #4]
	 Font.height = (int16_t)fontbyte(1);
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <FontSet+0x54>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <FontSet+0x54>)
 80014ba:	80da      	strh	r2, [r3, #6]
	 Font.offset = (int16_t)fontbyte(2);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <FontSet+0x54>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3302      	adds	r3, #2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <FontSet+0x54>)
 80014c8:	811a      	strh	r2, [r3, #8]
	 Font.numchars = (int16_t)fontbyte(3);
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <FontSet+0x54>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3303      	adds	r3, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <FontSet+0x54>)
 80014d6:	815a      	strh	r2, [r3, #10]
	 Font.inverted = NORMAL;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <FontSet+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	731a      	strb	r2, [r3, #12]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000e18 	.word	0x20000e18

080014ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_GPIO_Init+0xa8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_GPIO_Init+0xa8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <MX_GPIO_Init+0xa8>)
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_GPIO_Init+0xa8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_GPIO_Init+0xa8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <MX_GPIO_Init+0xa8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_GPIO_Init+0xa8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <MX_GPIO_Init+0xac>)
 8001568:	f000 fdd6 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2302      	movs	r3, #2
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4619      	mov	r1, r3
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_GPIO_Init+0xac>)
 8001586:	f000 fc43 	bl	8001e10 <HAL_GPIO_Init>

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40011000 	.word	0x40011000

0800159c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C1_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_I2C1_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_I2C1_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_I2C1_Init+0x50>)
 80015da:	f000 fdb5 	bl	8002148 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 f95f 	bl	80018a6 <Error_Handler>
  }

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000e28 	.word	0x20000e28
 80015f0:	40005400 	.word	0x40005400
 80015f4:	00061a80 	.word	0x00061a80

080015f8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_I2C_MspInit+0xc8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d124      	bne.n	8001662 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a29      	ldr	r2, [pc, #164]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001630:	23c0      	movs	r3, #192	; 0xc0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001634:	2312      	movs	r3, #18
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	4619      	mov	r1, r3
 8001642:	4821      	ldr	r0, [pc, #132]	; (80016c8 <HAL_I2C_MspInit+0xd0>)
 8001644:	f000 fbe4 	bl	8001e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800164e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001652:	61d3      	str	r3, [r2, #28]
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001660:	e029      	b.n	80016b6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_I2C_MspInit+0xd4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d124      	bne.n	80016b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001684:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4619      	mov	r1, r3
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_I2C_MspInit+0xd0>)
 800169a:	f000 fbb9 	bl	8001e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_I2C_MspInit+0xcc>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	40005800 	.word	0x40005800

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fa32 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f8a0 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f7ff ff06 	bl	80014ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80016e0:	f7ff ff5c 	bl	800159c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  INA219_Init(&ina219,&hi2c1, (0x40));
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	4946      	ldr	r1, [pc, #280]	; (8001800 <main+0x130>)
 80016e8:	4846      	ldr	r0, [pc, #280]	; (8001804 <main+0x134>)
 80016ea:	f7ff fbcd 	bl	8000e88 <INA219_Init>

  OLED_Init(&hi2c1);
 80016ee:	4844      	ldr	r0, [pc, #272]	; (8001800 <main+0x130>)
 80016f0:	f7ff fc32 	bl	8000f58 <OLED_Init>
//    OLED_DrawCircle(26, 60, 3);
//    OLED_DrawTriangle(40, 63, 45, 53, 50, 63);
//    OLED_DrawTriangleFill(47, 53, 52, 63, 57, 53);

    /* Update screen */
    OLED_Invert(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fcaa 	bl	800104e <OLED_Invert>
    OLED_DrawBuffer(image);
 80016fa:	4843      	ldr	r0, [pc, #268]	; (8001808 <main+0x138>)
 80016fc:	f7ff fcba 	bl	8001074 <OLED_DrawBuffer>
    OLED_UpdateScreen();
 8001700:	f7ff fe88 	bl	8001414 <OLED_UpdateScreen>
    HAL_Delay(2000);
 8001704:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001708:	f000 fa7a 	bl	8001c00 <HAL_Delay>
    OLED_Invert(0);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fc9e 	bl	800104e <OLED_Invert>
    OLED_DrawBuffer(buff);
 8001712:	483e      	ldr	r0, [pc, #248]	; (800180c <main+0x13c>)
 8001714:	f7ff fcae 	bl	8001074 <OLED_DrawBuffer>
    OLED_UpdateScreen();
 8001718:	f7ff fe7c 	bl	8001414 <OLED_UpdateScreen>
    FontSet(BigNumbers);
 800171c:	483c      	ldr	r0, [pc, #240]	; (8001810 <main+0x140>)
 800171e:	f7ff feb9 	bl	8001494 <FontSet>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  measure.voltage = (INA219_ReadBusVoltage(&ina219))*0.001;
 8001722:	4838      	ldr	r0, [pc, #224]	; (8001804 <main+0x134>)
 8001724:	f7ff fb1c 	bl	8000d60 <INA219_ReadBusVoltage>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe6a 	bl	8000404 <__aeabi_i2d>
 8001730:	a331      	add	r3, pc, #196	; (adr r3, 80017f8 <main+0x128>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fecf 	bl	80004d8 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff f9c1 	bl	8000ac8 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	4a32      	ldr	r2, [pc, #200]	; (8001814 <main+0x144>)
 800174a:	6013      	str	r3, [r2, #0]
		  OLED_DrawStr("///////////", 8, 5, 1);
 800174c:	2301      	movs	r3, #1
 800174e:	2205      	movs	r2, #5
 8001750:	2108      	movs	r1, #8
 8001752:	4831      	ldr	r0, [pc, #196]	; (8001818 <main+0x148>)
 8001754:	f7ff fdf6 	bl	8001344 <OLED_DrawStr>
		  OLED_DrawNumf(measure.voltage, 8, 5, 1);
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <main+0x144>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	2205      	movs	r2, #5
 8001760:	2108      	movs	r1, #8
 8001762:	f7ff fdcb 	bl	80012fc <OLED_DrawNumf>
		  HAL_Delay(65);
 8001766:	2041      	movs	r0, #65	; 0x41
 8001768:	f000 fa4a 	bl	8001c00 <HAL_Delay>
		  OLED_DrawStr("///////////", 8, 37, 1);
 800176c:	2301      	movs	r3, #1
 800176e:	2225      	movs	r2, #37	; 0x25
 8001770:	2108      	movs	r1, #8
 8001772:	4829      	ldr	r0, [pc, #164]	; (8001818 <main+0x148>)
 8001774:	f7ff fde6 	bl	8001344 <OLED_DrawStr>
		  measure.current = (INA219_ReadCurrent(&ina219))*0.001;
 8001778:	4822      	ldr	r0, [pc, #136]	; (8001804 <main+0x134>)
 800177a:	f7ff fb15 	bl	8000da8 <INA219_ReadCurrent>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe3f 	bl	8000404 <__aeabi_i2d>
 8001786:	a31c      	add	r3, pc, #112	; (adr r3, 80017f8 <main+0x128>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe fea4 	bl	80004d8 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f996 	bl	8000ac8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <main+0x144>)
 80017a0:	6053      	str	r3, [r2, #4]
		  if (measure.current<0){	// Измерение тока в режиме разряда
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <main+0x144>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fa2a 	bl	8000c04 <__aeabi_fcmplt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d014      	beq.n	80017e0 <main+0x110>
			  //measure.current = -(measure.current + 0.001);}
		  	  measure.current = -(measure.current + 0.001);}
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <main+0x144>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe34 	bl	8000428 <__aeabi_f2d>
 80017c0:	a30d      	add	r3, pc, #52	; (adr r3, 80017f8 <main+0x128>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe fcd1 	bl	800016c <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f979 	bl	8000ac8 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <main+0x144>)
 80017de:	6053      	str	r3, [r2, #4]
		  OLED_DrawNumf(measure.current, 8, 37, 1);
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <main+0x144>)
 80017e2:	6858      	ldr	r0, [r3, #4]
 80017e4:	2301      	movs	r3, #1
 80017e6:	2225      	movs	r2, #37	; 0x25
 80017e8:	2108      	movs	r1, #8
 80017ea:	f7ff fd87 	bl	80012fc <OLED_DrawNumf>
		  OLED_UpdateScreen();
 80017ee:	f7ff fe11 	bl	8001414 <OLED_UpdateScreen>
		  measure.voltage = (INA219_ReadBusVoltage(&ina219))*0.001;
 80017f2:	e796      	b.n	8001722 <main+0x52>
 80017f4:	f3af 8000 	nop.w
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	20000e28 	.word	0x20000e28
 8001804:	20000ed8 	.word	0x20000ed8
 8001808:	20000404 	.word	0x20000404
 800180c:	20000004 	.word	0x20000004
 8001810:	08008768 	.word	0x08008768
 8001814:	20000ed0 	.word	0x20000ed0
 8001818:	0800874c 	.word	0x0800874c

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b090      	sub	sp, #64	; 0x40
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	2228      	movs	r2, #40	; 0x28
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fb6a 	bl	8003f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	2301      	movs	r3, #1
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800185a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f001 ff1d 	bl	80036a4 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001870:	f000 f819 	bl	80018a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2102      	movs	r1, #2
 800188e:	4618      	mov	r0, r3
 8001890:	f002 f988 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800189a:	f000 f804 	bl	80018a6 <Error_Handler>
  }
}
 800189e:	bf00      	nop
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018aa:	b672      	cpsid	i
}
 80018ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ae:	e7fe      	b.n	80018ae <Error_Handler+0x8>

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_MspInit+0x5c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6193      	str	r3, [r2, #24]
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x5c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_MspInit+0x60>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_MspInit+0x60>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <NMI_Handler+0x4>

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 f935 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <_kill>:

int _kill(int pid, int sig)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800197a:	f002 fa99 	bl	8003eb0 <__errno>
 800197e:	4603      	mov	r3, r0
 8001980:	2216      	movs	r2, #22
 8001982:	601a      	str	r2, [r3, #0]
	return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_exit>:

void _exit (int status)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe7 	bl	8001970 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019a2:	e7fe      	b.n	80019a2 <_exit+0x12>

080019a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00a      	b.n	80019cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	4601      	mov	r1, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf0      	blt.n	80019b6 <_read+0x12>
	}

return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e009      	b.n	8001a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf1      	blt.n	80019f0 <_write+0x12>
	}
	return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_close>:

int _close(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3c:	605a      	str	r2, [r3, #4]
	return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <_isatty>:

int _isatty(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	return 1;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
	return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f002 fa02 	bl	8003eb0 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20005000 	.word	0x20005000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	20000e04 	.word	0x20000e04
 8001ae0:	20000ef8 	.word	0x20000ef8

08001ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001af0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001af2:	e003      	b.n	8001afc <LoopCopyDataInit>

08001af4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001af6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001af8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001afa:	3104      	adds	r1, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b04:	d3f6      	bcc.n	8001af4 <CopyDataInit>
  ldr r2, =_sbss
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b08:	e002      	b.n	8001b10 <LoopFillZerobss>

08001b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b0c:	f842 3b04 	str.w	r3, [r2], #4

08001b10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b14:	d3f9      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b16:	f7ff ffe5 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f002 f9cf 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1e:	f7ff fdd7 	bl	80016d0 <main>
  bx lr
 8001b22:	4770      	bx	lr
  ldr r3, =_sidata
 8001b24:	080090d4 	.word	0x080090d4
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b2c:	200009e4 	.word	0x200009e4
  ldr r2, =_sbss
 8001b30:	200009e4 	.word	0x200009e4
  ldr r3, = _ebss
 8001b34:	20000ef4 	.word	0x20000ef4

08001b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC1_2_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_Init+0x28>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_Init+0x28>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f92b 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f808 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff feaa 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f935 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f90b 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000804 	.word	0x20000804
 8001bc0:	2000080c 	.word	0x2000080c
 8001bc4:	20000808 	.word	0x20000808

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x20>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_IncTick+0x20>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	2000080c 	.word	0x2000080c
 8001be8:	20000ee0 	.word	0x20000ee0

08001bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000ee0 	.word	0x20000ee0

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff fff0 	bl	8001bec <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffe0 	bl	8001bec <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000080c 	.word	0x2000080c

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff90 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff49 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff90 	bl	8001d00 <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5f 	bl	8001cac <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb0 	bl	8001d64 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e169      	b.n	80020f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e24:	2201      	movs	r2, #1
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8158 	bne.w	80020f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a9a      	ldr	r2, [pc, #616]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d05e      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e4c:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d875      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e52:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d058      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e58:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d86f      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e5e:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d052      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e64:	4a94      	ldr	r2, [pc, #592]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d869      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e6a:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04c      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e70:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d863      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e76:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d046      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e7c:	4a90      	ldr	r2, [pc, #576]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d85d      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d82a      	bhi.n	8001edc <HAL_GPIO_Init+0xcc>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d859      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <HAL_GPIO_Init+0x80>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	08001ef7 	.word	0x08001ef7
 8001e9c:	08001f39 	.word	0x08001f39
 8001ea0:	08001f3f 	.word	0x08001f3f
 8001ea4:	08001f3f 	.word	0x08001f3f
 8001ea8:	08001f3f 	.word	0x08001f3f
 8001eac:	08001f3f 	.word	0x08001f3f
 8001eb0:	08001f3f 	.word	0x08001f3f
 8001eb4:	08001f3f 	.word	0x08001f3f
 8001eb8:	08001f3f 	.word	0x08001f3f
 8001ebc:	08001f3f 	.word	0x08001f3f
 8001ec0:	08001f3f 	.word	0x08001f3f
 8001ec4:	08001f3f 	.word	0x08001f3f
 8001ec8:	08001f3f 	.word	0x08001f3f
 8001ecc:	08001f3f 	.word	0x08001f3f
 8001ed0:	08001f3f 	.word	0x08001f3f
 8001ed4:	08001eed 	.word	0x08001eed
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	4a79      	ldr	r2, [pc, #484]	; (80020c4 <HAL_GPIO_Init+0x2b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee2:	e02c      	b.n	8001f3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e029      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e024      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	3308      	adds	r3, #8
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e01f      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	330c      	adds	r3, #12
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e01a      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f12:	2304      	movs	r3, #4
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e013      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	611a      	str	r2, [r3, #16]
          break;
 8001f2a:	e009      	b.n	8001f40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	615a      	str	r2, [r3, #20]
          break;
 8001f36:	e003      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          break;
 8001f3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d801      	bhi.n	8001f4a <HAL_GPIO_Init+0x13a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_Init+0x13e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d802      	bhi.n	8001f5c <HAL_GPIO_Init+0x14c>
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x152>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	3b08      	subs	r3, #8
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	210f      	movs	r1, #15
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	6a39      	ldr	r1, [r7, #32]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80b1 	beq.w	80020f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_GPIO_Init+0x2c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1ec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_GPIO_Init+0x2c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <HAL_GPIO_Init+0x2cc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1e0>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200e:	492f      	ldr	r1, [pc, #188]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	492c      	ldr	r1, [pc, #176]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4928      	ldr	r1, [pc, #160]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	491e      	ldr	r1, [pc, #120]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4918      	ldr	r1, [pc, #96]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4914      	ldr	r1, [pc, #80]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d021      	beq.n	80020e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e021      	b.n	80020f2 <HAL_GPIO_Init+0x2e2>
 80020ae:	bf00      	nop
 80020b0:	10320000 	.word	0x10320000
 80020b4:	10310000 	.word	0x10310000
 80020b8:	10220000 	.word	0x10220000
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10120000 	.word	0x10120000
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010800 	.word	0x40010800
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40011400 	.word	0x40011400
 80020e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f ae8e 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	372c      	adds	r7, #44	; 0x2c
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e12b      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fa42 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ac:	f001 fe4e 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80021b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a81      	ldr	r2, [pc, #516]	; (80023bc <HAL_I2C_Init+0x274>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d807      	bhi.n	80021cc <HAL_I2C_Init+0x84>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a80      	ldr	r2, [pc, #512]	; (80023c0 <HAL_I2C_Init+0x278>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e006      	b.n	80021da <HAL_I2C_Init+0x92>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a7d      	ldr	r2, [pc, #500]	; (80023c4 <HAL_I2C_Init+0x27c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0e7      	b.n	80023b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a78      	ldr	r2, [pc, #480]	; (80023c8 <HAL_I2C_Init+0x280>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9b      	lsrs	r3, r3, #18
 80021ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_I2C_Init+0x274>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d802      	bhi.n	800221c <HAL_I2C_Init+0xd4>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3301      	adds	r3, #1
 800221a:	e009      	b.n	8002230 <HAL_I2C_Init+0xe8>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	4a69      	ldr	r2, [pc, #420]	; (80023cc <HAL_I2C_Init+0x284>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	3301      	adds	r3, #1
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	495c      	ldr	r1, [pc, #368]	; (80023bc <HAL_I2C_Init+0x274>)
 800224c:	428b      	cmp	r3, r1
 800224e:	d819      	bhi.n	8002284 <HAL_I2C_Init+0x13c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e59      	subs	r1, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fbb1 f3f3 	udiv	r3, r1, r3
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002264:	400b      	ands	r3, r1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_I2C_Init+0x138>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e59      	subs	r1, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fbb1 f3f3 	udiv	r3, r1, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	e051      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002280:	2304      	movs	r3, #4
 8002282:	e04f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d111      	bne.n	80022b0 <HAL_I2C_Init+0x168>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e012      	b.n	80022d6 <HAL_I2C_Init+0x18e>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	0099      	lsls	r1, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Init+0x196>
 80022da:	2301      	movs	r3, #1
 80022dc:	e022      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_I2C_Init+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e58      	subs	r0, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	440b      	add	r3, r1
 80022f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Init+0x1dc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e58      	subs	r0, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	0099      	lsls	r1, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6809      	ldr	r1, [r1, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6911      	ldr	r1, [r2, #16]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68d2      	ldr	r2, [r2, #12]
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	430b      	orrs	r3, r1
 8002366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	000186a0 	.word	0x000186a0
 80023c0:	001e847f 	.word	0x001e847f
 80023c4:	003d08ff 	.word	0x003d08ff
 80023c8:	431bde83 	.word	0x431bde83
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
 80023e0:	4613      	mov	r3, r2
 80023e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fc02 	bl	8001bec <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	f040 80e0 	bne.w	80025b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2319      	movs	r3, #25
 80023fe:	2201      	movs	r2, #1
 8002400:	4970      	ldr	r1, [pc, #448]	; (80025c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 ff72 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
 8002410:	e0d3      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x50>
 800241c:	2302      	movs	r3, #2
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d007      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	6a3a      	ldr	r2, [r7, #32]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fd2c 	bl	8002eec <I2C_MasterRequestWrite>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e08d      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b4:	e066      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6a39      	ldr	r1, [r7, #32]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 ffec 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_I2C_Master_Transmit+0x188>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6a39      	ldr	r1, [r7, #32]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 ffdc 	bl	800351a <I2C_WaitOnBTFFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b04      	cmp	r3, #4
 800256e:	d107      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01a      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d194      	bne.n	80024b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e6:	f7ff fb01 	bl	8001bec <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	f040 80d9 	bne.w	80027ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2319      	movs	r3, #25
 8002600:	2201      	movs	r2, #1
 8002602:	496d      	ldr	r1, [pc, #436]	; (80027b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fe71 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
 8002612:	e0cc      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Mem_Write+0x56>
 800261e:	2302      	movs	r3, #2
 8002620:	e0c5      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d007      	beq.n	8002648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2221      	movs	r2, #33	; 0x21
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <HAL_I2C_Mem_Write+0x1f0>)
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268a:	88f8      	ldrh	r0, [r7, #6]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4603      	mov	r3, r0
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fca8 	bl	8002ff0 <I2C_RequestMemoryWrite>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d052      	beq.n	800274c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fef2 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d11b      	bne.n	800274c <HAL_I2C_Mem_Write+0x180>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1aa      	bne.n	80026aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fede 	bl	800351a <I2C_WaitOnBTFFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b04      	cmp	r3, #4
 800276a:	d107      	bne.n	800277c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e016      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	00100002 	.word	0x00100002
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	460b      	mov	r3, r1
 80027d4:	813b      	strh	r3, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fa05 	bl	8001bec <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 8244 	bne.w	8002c7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	4982      	ldr	r1, [pc, #520]	; (8002a04 <HAL_I2C_Mem_Read+0x244>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fd75 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e237      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Read+0x5a>
 8002816:	2302      	movs	r3, #2
 8002818:	e230      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a62      	ldr	r2, [pc, #392]	; (8002a08 <HAL_I2C_Mem_Read+0x248>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fc42 	bl	800311c <I2C_RequestMemoryRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1ec      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e1c0      	b.n	8002c54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d11e      	bne.n	8002918 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ea:	b672      	cpsid	i
}
 80028ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002914:	b662      	cpsie	i
}
 8002916:	e035      	b.n	8002984 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b02      	cmp	r3, #2
 800291e:	d11e      	bne.n	800295e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800295a:	b662      	cpsie	i
}
 800295c:	e012      	b.n	8002984 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002984:	e166      	b.n	8002c54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b03      	cmp	r3, #3
 800298c:	f200 811f 	bhi.w	8002bce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b01      	cmp	r3, #1
 8002996:	d123      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fdfd 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e167      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029de:	e139      	b.n	8002c54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d152      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	2200      	movs	r2, #0
 80029f0:	4906      	ldr	r1, [pc, #24]	; (8002a0c <HAL_I2C_Mem_Read+0x24c>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fc7a 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e13c      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
 8002a02:	bf00      	nop
 8002a04:	00100002 	.word	0x00100002
 8002a08:	ffff0000 	.word	0xffff0000
 8002a0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
}
 8002a12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a56:	b662      	cpsie	i
}
 8002a58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a8c:	e0e2      	b.n	8002c54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	497b      	ldr	r1, [pc, #492]	; (8002c84 <HAL_I2C_Mem_Read+0x4c4>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fc27 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0e9      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab8:	b672      	cpsid	i
}
 8002aba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_I2C_Mem_Read+0x4c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_I2C_Mem_Read+0x4cc>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a1a      	lsrs	r2, r3, #8
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00da      	lsls	r2, r3, #3
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d118      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b36:	b662      	cpsie	i
}
 8002b38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e09a      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d1d9      	bne.n	8002b08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b96:	b662      	cpsie	i
}
 8002b98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bcc:	e042      	b.n	8002c54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fce2 	bl	800359c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e04c      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d118      	bne.n	8002c54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f ae94 	bne.w	8002986 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	00010004 	.word	0x00010004
 8002c88:	20000804 	.word	0x20000804
 8002c8c:	14f8b589 	.word	0x14f8b589

08002c90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7fe ffa4 	bl	8001bec <HAL_GetTick>
 8002ca4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	f040 8111 	bne.w	8002eda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2319      	movs	r3, #25
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4988      	ldr	r1, [pc, #544]	; (8002ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fb12 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e104      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2C_IsDeviceReady+0x50>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0fd      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d007      	beq.n	8002d06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2224      	movs	r2, #36	; 0x24
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <HAL_I2C_IsDeviceReady+0x258>)
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fad0 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d60:	d103      	bne.n	8002d6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0b6      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe ff35 	bl	8001bec <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002db2:	e025      	b.n	8002e00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe ff1a 	bl	8001bec <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <HAL_I2C_IsDeviceReady+0x13a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	22a0      	movs	r2, #160	; 0xa0
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2ba0      	cmp	r3, #160	; 0xa0
 8002e0a:	d005      	beq.n	8002e18 <HAL_I2C_IsDeviceReady+0x188>
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_I2C_IsDeviceReady+0x188>
 8002e12:	7dbb      	ldrb	r3, [r7, #22]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0cd      	beq.n	8002db4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d129      	bne.n	8002e82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2319      	movs	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4921      	ldr	r1, [pc, #132]	; (8002ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa44 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e036      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e02c      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2319      	movs	r3, #25
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	490f      	ldr	r1, [pc, #60]	; (8002ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fa20 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e012      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f4ff af32 	bcc.w	8002d2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	00100002 	.word	0x00100002
 8002ee8:	ffff0000 	.word	0xffff0000

08002eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d006      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d003      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f14:	d108      	bne.n	8002f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e00b      	b.n	8002f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d107      	bne.n	8002f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f9cd 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d103      	bne.n	8002f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e035      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7c:	d108      	bne.n	8002f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f8c:	611a      	str	r2, [r3, #16]
 8002f8e:	e01b      	b.n	8002fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	11db      	asrs	r3, r3, #7
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0306 	and.w	r3, r3, #6
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f063 030f 	orn	r3, r3, #15
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <I2C_MasterRequestWrite+0xfc>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f9f3 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e010      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <I2C_MasterRequestWrite+0x100>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f9e3 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010008 	.word	0x00010008
 8002fec:	00010002 	.word	0x00010002

08002ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	460b      	mov	r3, r1
 8003004:	813b      	strh	r3, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2200      	movs	r2, #0
 8003022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f960 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003040:	d103      	bne.n	800304a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e05f      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800305c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	492d      	ldr	r1, [pc, #180]	; (8003118 <I2C_RequestMemoryWrite+0x128>)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f998 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e04c      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa02 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02b      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	e021      	b.n	800310c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030c8:	893b      	ldrh	r3, [r7, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9dc 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d107      	bne.n	80030fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e005      	b.n	800310e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	2200      	movs	r2, #0
 800315e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f8c2 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317c:	d103      	bne.n	8003186 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0aa      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	4952      	ldr	r1, [pc, #328]	; (80032e8 <I2C_RequestMemoryRead+0x1cc>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8fa 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e097      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f964 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d107      	bne.n	80031ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e076      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031f8:	893b      	ldrh	r3, [r7, #8]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	e021      	b.n	8003248 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f93e 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e050      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f923 	bl	8003498 <I2C_WaitOnTXEFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	2b04      	cmp	r3, #4
 800325e:	d107      	bne.n	8003270 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e035      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003282:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	2200      	movs	r2, #0
 800328c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f82b 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	d103      	bne.n	80032b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e013      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	4906      	ldr	r1, [pc, #24]	; (80032e8 <I2C_RequestMemoryRead+0x1cc>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f863 	bl	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	00010002 	.word	0x00010002

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e025      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d021      	beq.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe fc71 	bl	8001bec <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d116      	bne.n	800334a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f043 0220 	orr.w	r2, r3, #32
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e023      	b.n	8003392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10d      	bne.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	e00c      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0b6      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a8:	e051      	b.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d123      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e046      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d021      	beq.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fbef 	bl	8001bec <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d116      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e020      	b.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10c      	bne.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e00b      	b.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d18d      	bne.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8ce 	bl	8003648 <I2C_IsAcknowledgeFailed>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02d      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d021      	beq.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe fb95 	bl	8001bec <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d116      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e007      	b.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d1ca      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f88d 	bl	8003648 <I2C_IsAcknowledgeFailed>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e02d      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d021      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe fb54 	bl	8001bec <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1ca      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a8:	e042      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d119      	bne.n	80035ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e029      	b.n	8003640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ec:	f7fe fafe 	bl	8001bec <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d1b5      	bne.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d11b      	bne.n	8003698 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003668:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e26c      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8087 	beq.w	80037d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c4:	4b92      	ldr	r3, [pc, #584]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d00c      	beq.n	80036ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d0:	4b8f      	ldr	r3, [pc, #572]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d112      	bne.n	8003702 <HAL_RCC_OscConfig+0x5e>
 80036dc:	4b8c      	ldr	r3, [pc, #560]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d10b      	bne.n	8003702 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ea:	4b89      	ldr	r3, [pc, #548]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d06c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x12c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d168      	bne.n	80037d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e246      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x76>
 800370c:	4b80      	ldr	r3, [pc, #512]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a7f      	ldr	r2, [pc, #508]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e02e      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a77      	ldr	r2, [pc, #476]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0xbc>
 8003746:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a71      	ldr	r2, [pc, #452]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6e      	ldr	r2, [pc, #440]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xd4>
 8003760:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6a      	ldr	r2, [pc, #424]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b68      	ldr	r3, [pc, #416]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a67      	ldr	r2, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fa34 	bl	8001bec <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fe fa30 	bl	8001bec <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e1fa      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xe4>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fa20 	bl	8001bec <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fa1c 	bl	8001bec <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1e6      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x10c>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d063      	beq.n	80038a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037de:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ea:	4b49      	ldr	r3, [pc, #292]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d11c      	bne.n	8003830 <HAL_RCC_OscConfig+0x18c>
 80037f6:	4b46      	ldr	r3, [pc, #280]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_RCC_OscConfig+0x176>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1ba      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4939      	ldr	r1, [pc, #228]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	e03a      	b.n	80038a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fe f9d5 	bl	8001bec <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003846:	f7fe f9d1 	bl	8001bec <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e19b      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4927      	ldr	r1, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	e015      	b.n	80038a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe f9b4 	bl	8001bec <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003888:	f7fe f9b0 	bl	8001bec <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e17a      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03a      	beq.n	8003928 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d019      	beq.n	80038ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7fe f994 	bl	8001bec <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe f990 	bl	8001bec <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e15a      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038e6:	2001      	movs	r0, #1
 80038e8:	f000 fac4 	bl	8003e74 <RCC_Delay>
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f4:	f7fe f97a 	bl	8001bec <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fa:	e00f      	b.n	800391c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fe f976 	bl	8001bec <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d908      	bls.n	800391c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e140      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	42420000 	.word	0x42420000
 8003918:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	4b9e      	ldr	r3, [pc, #632]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e9      	bne.n	80038fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80a6 	beq.w	8003a82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393a:	4b97      	ldr	r3, [pc, #604]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	4b94      	ldr	r3, [pc, #592]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4a93      	ldr	r2, [pc, #588]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003950:	61d3      	str	r3, [r2, #28]
 8003952:	4b91      	ldr	r3, [pc, #580]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003962:	4b8e      	ldr	r3, [pc, #568]	; (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396e:	4b8b      	ldr	r3, [pc, #556]	; (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a8a      	ldr	r2, [pc, #552]	; (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397a:	f7fe f937 	bl	8001bec <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fe f933 	bl	8001bec <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b64      	cmp	r3, #100	; 0x64
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0fd      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x312>
 80039a8:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6213      	str	r3, [r2, #32]
 80039b4:	e02d      	b.n	8003a12 <HAL_RCC_OscConfig+0x36e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039be:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a75      	ldr	r2, [pc, #468]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	6213      	str	r3, [r2, #32]
 80039ca:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a72      	ldr	r2, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039d0:	f023 0304 	bic.w	r3, r3, #4
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	e01c      	b.n	8003a12 <HAL_RCC_OscConfig+0x36e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d10c      	bne.n	80039fa <HAL_RCC_OscConfig+0x356>
 80039e0:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4a6c      	ldr	r2, [pc, #432]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6213      	str	r3, [r2, #32]
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	e00b      	b.n	8003a12 <HAL_RCC_OscConfig+0x36e>
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4a66      	ldr	r2, [pc, #408]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	6213      	str	r3, [r2, #32]
 8003a06:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f023 0304 	bic.w	r3, r3, #4
 8003a10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d015      	beq.n	8003a46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe f8e7 	bl	8001bec <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fe f8e3 	bl	8001bec <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e0ab      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	4b57      	ldr	r3, [pc, #348]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ee      	beq.n	8003a22 <HAL_RCC_OscConfig+0x37e>
 8003a44:	e014      	b.n	8003a70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fe f8d1 	bl	8001bec <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fe f8cd 	bl	8001bec <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e095      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ee      	bne.n	8003a4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a76:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	4a47      	ldr	r2, [pc, #284]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8081 	beq.w	8003b8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d061      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d146      	bne.n	8003b2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_OscConfig+0x4fc>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f8a1 	bl	8001bec <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fe f89d 	bl	8001bec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e067      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac0:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f0      	bne.n	8003aae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	492d      	ldr	r1, [pc, #180]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a19      	ldr	r1, [r3, #32]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	430b      	orrs	r3, r1
 8003afa:	4927      	ldr	r1, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <HAL_RCC_OscConfig+0x4fc>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fe f871 	bl	8001bec <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe f86d 	bl	8001bec <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e037      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x46a>
 8003b2c:	e02f      	b.n	8003b8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <HAL_RCC_OscConfig+0x4fc>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe f85a 	bl	8001bec <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe f856 	bl	8001bec <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e020      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x498>
 8003b5a:	e018      	b.n	8003b8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e013      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42420060 	.word	0x42420060

08003ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0d0      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4965      	ldr	r1, [pc, #404]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b8      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	494d      	ldr	r1, [pc, #308]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d040      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e073      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4936      	ldr	r1, [pc, #216]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c94:	f7fd ffaa 	bl	8001bec <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7fd ffa6 	bl	8001bec <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e053      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 020c 	and.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1eb      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d210      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	4922      	ldr	r1, [pc, #136]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4916      	ldr	r1, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490e      	ldr	r1, [pc, #56]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d32:	f000 f821 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490a      	ldr	r1, [pc, #40]	; (8003d6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_RCC_ClockConfig+0x1cc>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd ff08 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08008bfc 	.word	0x08008bfc
 8003d70:	20000804 	.word	0x20000804
 8003d74:	20000808 	.word	0x20000808

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b490      	push	{r4, r7}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d80:	1d3c      	adds	r4, r7, #4
 8003d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d88:	f240 2301 	movw	r3, #513	; 0x201
 8003d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x40>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x46>
 8003db6:	e02d      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dba:	623b      	str	r3, [r7, #32]
      break;
 8003dbc:	e02d      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dca:	4413      	add	r3, r2
 8003dcc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dd0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c5b      	lsrs	r3, r3, #17
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dea:	4413      	add	r3, r2
 8003dec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003df0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	fb02 f203 	mul.w	r2, r2, r3
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e004      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	623b      	str	r3, [r7, #32]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e16:	623b      	str	r3, [r7, #32]
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc90      	pop	{r4, r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	08008758 	.word	0x08008758
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	003d0900 	.word	0x003d0900

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000804 	.word	0x20000804

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff2 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08008c0c 	.word	0x08008c0c

08003e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCC_Delay+0x34>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <RCC_Delay+0x38>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0a5b      	lsrs	r3, r3, #9
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e90:	bf00      	nop
  }
  while (Delay --);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	60fa      	str	r2, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f9      	bne.n	8003e90 <RCC_Delay+0x1c>
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	20000804 	.word	0x20000804
 8003eac:	10624dd3 	.word	0x10624dd3

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000810 	.word	0x20000810

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	4d0c      	ldr	r5, [pc, #48]	; (8003ef4 <__libc_init_array+0x38>)
 8003ec2:	4c0d      	ldr	r4, [pc, #52]	; (8003ef8 <__libc_init_array+0x3c>)
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	f004 fc2a 	bl	8008724 <_init>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	4d0a      	ldr	r5, [pc, #40]	; (8003efc <__libc_init_array+0x40>)
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	; (8003f00 <__libc_init_array+0x44>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	080090cc 	.word	0x080090cc
 8003ef8:	080090cc 	.word	0x080090cc
 8003efc:	080090cc 	.word	0x080090cc
 8003f00:	080090d0 	.word	0x080090d0

08003f04 <memset>:
 8003f04:	4603      	mov	r3, r0
 8003f06:	4402      	add	r2, r0
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <memset+0xa>
 8003f0c:	4770      	bx	lr
 8003f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f12:	e7f9      	b.n	8003f08 <memset+0x4>

08003f14 <__cvt>:
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1a:	461f      	mov	r7, r3
 8003f1c:	bfbb      	ittet	lt
 8003f1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f22:	461f      	movlt	r7, r3
 8003f24:	2300      	movge	r3, #0
 8003f26:	232d      	movlt	r3, #45	; 0x2d
 8003f28:	b088      	sub	sp, #32
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f30:	7013      	strb	r3, [r2, #0]
 8003f32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f38:	f023 0820 	bic.w	r8, r3, #32
 8003f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f40:	d005      	beq.n	8003f4e <__cvt+0x3a>
 8003f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f46:	d100      	bne.n	8003f4a <__cvt+0x36>
 8003f48:	3501      	adds	r5, #1
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e000      	b.n	8003f50 <__cvt+0x3c>
 8003f4e:	2303      	movs	r3, #3
 8003f50:	aa07      	add	r2, sp, #28
 8003f52:	9204      	str	r2, [sp, #16]
 8003f54:	aa06      	add	r2, sp, #24
 8003f56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f5a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f5e:	4622      	mov	r2, r4
 8003f60:	463b      	mov	r3, r7
 8003f62:	f001 fda1 	bl	8005aa8 <_dtoa_r>
 8003f66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	d102      	bne.n	8003f74 <__cvt+0x60>
 8003f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f70:	07db      	lsls	r3, r3, #31
 8003f72:	d522      	bpl.n	8003fba <__cvt+0xa6>
 8003f74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f78:	eb06 0905 	add.w	r9, r6, r5
 8003f7c:	d110      	bne.n	8003fa0 <__cvt+0x8c>
 8003f7e:	7833      	ldrb	r3, [r6, #0]
 8003f80:	2b30      	cmp	r3, #48	; 0x30
 8003f82:	d10a      	bne.n	8003f9a <__cvt+0x86>
 8003f84:	2200      	movs	r2, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8003f90:	b918      	cbnz	r0, 8003f9a <__cvt+0x86>
 8003f92:	f1c5 0501 	rsb	r5, r5, #1
 8003f96:	f8ca 5000 	str.w	r5, [sl]
 8003f9a:	f8da 3000 	ldr.w	r3, [sl]
 8003f9e:	4499      	add	r9, r3
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f7fc fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8003fac:	b108      	cbz	r0, 8003fb2 <__cvt+0x9e>
 8003fae:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fb2:	2230      	movs	r2, #48	; 0x30
 8003fb4:	9b07      	ldr	r3, [sp, #28]
 8003fb6:	454b      	cmp	r3, r9
 8003fb8:	d307      	bcc.n	8003fca <__cvt+0xb6>
 8003fba:	4630      	mov	r0, r6
 8003fbc:	9b07      	ldr	r3, [sp, #28]
 8003fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fc0:	1b9b      	subs	r3, r3, r6
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	b008      	add	sp, #32
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	9107      	str	r1, [sp, #28]
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e7f0      	b.n	8003fb4 <__cvt+0xa0>

08003fd2 <__exponent>:
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fd6:	2900      	cmp	r1, #0
 8003fd8:	f803 2b02 	strb.w	r2, [r3], #2
 8003fdc:	bfb6      	itet	lt
 8003fde:	222d      	movlt	r2, #45	; 0x2d
 8003fe0:	222b      	movge	r2, #43	; 0x2b
 8003fe2:	4249      	neglt	r1, r1
 8003fe4:	2909      	cmp	r1, #9
 8003fe6:	7042      	strb	r2, [r0, #1]
 8003fe8:	dd2b      	ble.n	8004042 <__exponent+0x70>
 8003fea:	f10d 0407 	add.w	r4, sp, #7
 8003fee:	46a4      	mov	ip, r4
 8003ff0:	270a      	movs	r7, #10
 8003ff2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	46a6      	mov	lr, r4
 8003ffa:	fb07 1516 	mls	r5, r7, r6, r1
 8003ffe:	2a63      	cmp	r2, #99	; 0x63
 8004000:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004004:	4631      	mov	r1, r6
 8004006:	f104 34ff 	add.w	r4, r4, #4294967295
 800400a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800400e:	dcf0      	bgt.n	8003ff2 <__exponent+0x20>
 8004010:	3130      	adds	r1, #48	; 0x30
 8004012:	f1ae 0502 	sub.w	r5, lr, #2
 8004016:	f804 1c01 	strb.w	r1, [r4, #-1]
 800401a:	4629      	mov	r1, r5
 800401c:	1c44      	adds	r4, r0, #1
 800401e:	4561      	cmp	r1, ip
 8004020:	d30a      	bcc.n	8004038 <__exponent+0x66>
 8004022:	f10d 0209 	add.w	r2, sp, #9
 8004026:	eba2 020e 	sub.w	r2, r2, lr
 800402a:	4565      	cmp	r5, ip
 800402c:	bf88      	it	hi
 800402e:	2200      	movhi	r2, #0
 8004030:	4413      	add	r3, r2
 8004032:	1a18      	subs	r0, r3, r0
 8004034:	b003      	add	sp, #12
 8004036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800403c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004040:	e7ed      	b.n	800401e <__exponent+0x4c>
 8004042:	2330      	movs	r3, #48	; 0x30
 8004044:	3130      	adds	r1, #48	; 0x30
 8004046:	7083      	strb	r3, [r0, #2]
 8004048:	70c1      	strb	r1, [r0, #3]
 800404a:	1d03      	adds	r3, r0, #4
 800404c:	e7f1      	b.n	8004032 <__exponent+0x60>
	...

08004050 <_printf_float>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	b091      	sub	sp, #68	; 0x44
 8004056:	460c      	mov	r4, r1
 8004058:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800405c:	4616      	mov	r6, r2
 800405e:	461f      	mov	r7, r3
 8004060:	4605      	mov	r5, r0
 8004062:	f002 fe75 	bl	8006d50 <_localeconv_r>
 8004066:	6803      	ldr	r3, [r0, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	f7fc f870 	bl	8000150 <strlen>
 8004070:	2300      	movs	r3, #0
 8004072:	930e      	str	r3, [sp, #56]	; 0x38
 8004074:	f8d8 3000 	ldr.w	r3, [r8]
 8004078:	900a      	str	r0, [sp, #40]	; 0x28
 800407a:	3307      	adds	r3, #7
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	f103 0208 	add.w	r2, r3, #8
 8004084:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004088:	f8d4 b000 	ldr.w	fp, [r4]
 800408c:	f8c8 2000 	str.w	r2, [r8]
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004098:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800409c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	4640      	mov	r0, r8
 80040a8:	4b9c      	ldr	r3, [pc, #624]	; (800431c <_printf_float+0x2cc>)
 80040aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ac:	f7fc fcae 	bl	8000a0c <__aeabi_dcmpun>
 80040b0:	bb70      	cbnz	r0, 8004110 <_printf_float+0xc0>
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	4640      	mov	r0, r8
 80040b8:	4b98      	ldr	r3, [pc, #608]	; (800431c <_printf_float+0x2cc>)
 80040ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040bc:	f7fc fc88 	bl	80009d0 <__aeabi_dcmple>
 80040c0:	bb30      	cbnz	r0, 8004110 <_printf_float+0xc0>
 80040c2:	2200      	movs	r2, #0
 80040c4:	2300      	movs	r3, #0
 80040c6:	4640      	mov	r0, r8
 80040c8:	4651      	mov	r1, sl
 80040ca:	f7fc fc77 	bl	80009bc <__aeabi_dcmplt>
 80040ce:	b110      	cbz	r0, 80040d6 <_printf_float+0x86>
 80040d0:	232d      	movs	r3, #45	; 0x2d
 80040d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d6:	4b92      	ldr	r3, [pc, #584]	; (8004320 <_printf_float+0x2d0>)
 80040d8:	4892      	ldr	r0, [pc, #584]	; (8004324 <_printf_float+0x2d4>)
 80040da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040de:	bf94      	ite	ls
 80040e0:	4698      	movls	r8, r3
 80040e2:	4680      	movhi	r8, r0
 80040e4:	2303      	movs	r3, #3
 80040e6:	f04f 0a00 	mov.w	sl, #0
 80040ea:	6123      	str	r3, [r4, #16]
 80040ec:	f02b 0304 	bic.w	r3, fp, #4
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	4633      	mov	r3, r6
 80040f4:	4621      	mov	r1, r4
 80040f6:	4628      	mov	r0, r5
 80040f8:	9700      	str	r7, [sp, #0]
 80040fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80040fc:	f000 f9d4 	bl	80044a8 <_printf_common>
 8004100:	3001      	adds	r0, #1
 8004102:	f040 8090 	bne.w	8004226 <_printf_float+0x1d6>
 8004106:	f04f 30ff 	mov.w	r0, #4294967295
 800410a:	b011      	add	sp, #68	; 0x44
 800410c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004110:	4642      	mov	r2, r8
 8004112:	4653      	mov	r3, sl
 8004114:	4640      	mov	r0, r8
 8004116:	4651      	mov	r1, sl
 8004118:	f7fc fc78 	bl	8000a0c <__aeabi_dcmpun>
 800411c:	b148      	cbz	r0, 8004132 <_printf_float+0xe2>
 800411e:	f1ba 0f00 	cmp.w	sl, #0
 8004122:	bfb8      	it	lt
 8004124:	232d      	movlt	r3, #45	; 0x2d
 8004126:	4880      	ldr	r0, [pc, #512]	; (8004328 <_printf_float+0x2d8>)
 8004128:	bfb8      	it	lt
 800412a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800412e:	4b7f      	ldr	r3, [pc, #508]	; (800432c <_printf_float+0x2dc>)
 8004130:	e7d3      	b.n	80040da <_printf_float+0x8a>
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	d142      	bne.n	80041c2 <_printf_float+0x172>
 800413c:	2306      	movs	r3, #6
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	9206      	str	r2, [sp, #24]
 8004144:	aa0e      	add	r2, sp, #56	; 0x38
 8004146:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800414a:	aa0d      	add	r2, sp, #52	; 0x34
 800414c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004150:	9203      	str	r2, [sp, #12]
 8004152:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004156:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	4642      	mov	r2, r8
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	4628      	mov	r0, r5
 8004164:	4653      	mov	r3, sl
 8004166:	910b      	str	r1, [sp, #44]	; 0x2c
 8004168:	f7ff fed4 	bl	8003f14 <__cvt>
 800416c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800416e:	4680      	mov	r8, r0
 8004170:	2947      	cmp	r1, #71	; 0x47
 8004172:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004174:	d108      	bne.n	8004188 <_printf_float+0x138>
 8004176:	1cc8      	adds	r0, r1, #3
 8004178:	db02      	blt.n	8004180 <_printf_float+0x130>
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	4299      	cmp	r1, r3
 800417e:	dd40      	ble.n	8004202 <_printf_float+0x1b2>
 8004180:	f1a9 0902 	sub.w	r9, r9, #2
 8004184:	fa5f f989 	uxtb.w	r9, r9
 8004188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800418c:	d81f      	bhi.n	80041ce <_printf_float+0x17e>
 800418e:	464a      	mov	r2, r9
 8004190:	3901      	subs	r1, #1
 8004192:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004196:	910d      	str	r1, [sp, #52]	; 0x34
 8004198:	f7ff ff1b 	bl	8003fd2 <__exponent>
 800419c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800419e:	4682      	mov	sl, r0
 80041a0:	1813      	adds	r3, r2, r0
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	dc02      	bgt.n	80041ae <_printf_float+0x15e>
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	07d2      	lsls	r2, r2, #31
 80041ac:	d501      	bpl.n	80041b2 <_printf_float+0x162>
 80041ae:	3301      	adds	r3, #1
 80041b0:	6123      	str	r3, [r4, #16]
 80041b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d09b      	beq.n	80040f2 <_printf_float+0xa2>
 80041ba:	232d      	movs	r3, #45	; 0x2d
 80041bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c0:	e797      	b.n	80040f2 <_printf_float+0xa2>
 80041c2:	2947      	cmp	r1, #71	; 0x47
 80041c4:	d1bc      	bne.n	8004140 <_printf_float+0xf0>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1ba      	bne.n	8004140 <_printf_float+0xf0>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e7b7      	b.n	800413e <_printf_float+0xee>
 80041ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041d2:	d118      	bne.n	8004206 <_printf_float+0x1b6>
 80041d4:	2900      	cmp	r1, #0
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	dd0b      	ble.n	80041f2 <_printf_float+0x1a2>
 80041da:	6121      	str	r1, [r4, #16]
 80041dc:	b913      	cbnz	r3, 80041e4 <_printf_float+0x194>
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	07d0      	lsls	r0, r2, #31
 80041e2:	d502      	bpl.n	80041ea <_printf_float+0x19a>
 80041e4:	3301      	adds	r3, #1
 80041e6:	440b      	add	r3, r1
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	f04f 0a00 	mov.w	sl, #0
 80041ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80041f0:	e7df      	b.n	80041b2 <_printf_float+0x162>
 80041f2:	b913      	cbnz	r3, 80041fa <_printf_float+0x1aa>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	07d2      	lsls	r2, r2, #31
 80041f8:	d501      	bpl.n	80041fe <_printf_float+0x1ae>
 80041fa:	3302      	adds	r3, #2
 80041fc:	e7f4      	b.n	80041e8 <_printf_float+0x198>
 80041fe:	2301      	movs	r3, #1
 8004200:	e7f2      	b.n	80041e8 <_printf_float+0x198>
 8004202:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004208:	4299      	cmp	r1, r3
 800420a:	db05      	blt.n	8004218 <_printf_float+0x1c8>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	6121      	str	r1, [r4, #16]
 8004210:	07d8      	lsls	r0, r3, #31
 8004212:	d5ea      	bpl.n	80041ea <_printf_float+0x19a>
 8004214:	1c4b      	adds	r3, r1, #1
 8004216:	e7e7      	b.n	80041e8 <_printf_float+0x198>
 8004218:	2900      	cmp	r1, #0
 800421a:	bfcc      	ite	gt
 800421c:	2201      	movgt	r2, #1
 800421e:	f1c1 0202 	rsble	r2, r1, #2
 8004222:	4413      	add	r3, r2
 8004224:	e7e0      	b.n	80041e8 <_printf_float+0x198>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	055a      	lsls	r2, r3, #21
 800422a:	d407      	bmi.n	800423c <_printf_float+0x1ec>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	4642      	mov	r2, r8
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	d12b      	bne.n	8004292 <_printf_float+0x242>
 800423a:	e764      	b.n	8004106 <_printf_float+0xb6>
 800423c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004240:	f240 80dd 	bls.w	80043fe <_printf_float+0x3ae>
 8004244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004248:	2200      	movs	r2, #0
 800424a:	2300      	movs	r3, #0
 800424c:	f7fc fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8004250:	2800      	cmp	r0, #0
 8004252:	d033      	beq.n	80042bc <_printf_float+0x26c>
 8004254:	2301      	movs	r3, #1
 8004256:	4631      	mov	r1, r6
 8004258:	4628      	mov	r0, r5
 800425a:	4a35      	ldr	r2, [pc, #212]	; (8004330 <_printf_float+0x2e0>)
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	f43f af51 	beq.w	8004106 <_printf_float+0xb6>
 8004264:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004268:	429a      	cmp	r2, r3
 800426a:	db02      	blt.n	8004272 <_printf_float+0x222>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	07d8      	lsls	r0, r3, #31
 8004270:	d50f      	bpl.n	8004292 <_printf_float+0x242>
 8004272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	f43f af42 	beq.w	8004106 <_printf_float+0xb6>
 8004282:	f04f 0800 	mov.w	r8, #0
 8004286:	f104 091a 	add.w	r9, r4, #26
 800428a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800428c:	3b01      	subs	r3, #1
 800428e:	4543      	cmp	r3, r8
 8004290:	dc09      	bgt.n	80042a6 <_printf_float+0x256>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	079b      	lsls	r3, r3, #30
 8004296:	f100 8102 	bmi.w	800449e <_printf_float+0x44e>
 800429a:	68e0      	ldr	r0, [r4, #12]
 800429c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800429e:	4298      	cmp	r0, r3
 80042a0:	bfb8      	it	lt
 80042a2:	4618      	movlt	r0, r3
 80042a4:	e731      	b.n	800410a <_printf_float+0xba>
 80042a6:	2301      	movs	r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f af28 	beq.w	8004106 <_printf_float+0xb6>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	e7e6      	b.n	800428a <_printf_float+0x23a>
 80042bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dc38      	bgt.n	8004334 <_printf_float+0x2e4>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <_printf_float+0x2e0>)
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f af1a 	beq.w	8004106 <_printf_float+0xb6>
 80042d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d102      	bne.n	80042e0 <_printf_float+0x290>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	07d9      	lsls	r1, r3, #31
 80042de:	d5d8      	bpl.n	8004292 <_printf_float+0x242>
 80042e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f af0b 	beq.w	8004106 <_printf_float+0xb6>
 80042f0:	f04f 0900 	mov.w	r9, #0
 80042f4:	f104 0a1a 	add.w	sl, r4, #26
 80042f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042fa:	425b      	negs	r3, r3
 80042fc:	454b      	cmp	r3, r9
 80042fe:	dc01      	bgt.n	8004304 <_printf_float+0x2b4>
 8004300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004302:	e794      	b.n	800422e <_printf_float+0x1de>
 8004304:	2301      	movs	r3, #1
 8004306:	4652      	mov	r2, sl
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	f43f aef9 	beq.w	8004106 <_printf_float+0xb6>
 8004314:	f109 0901 	add.w	r9, r9, #1
 8004318:	e7ee      	b.n	80042f8 <_printf_float+0x2a8>
 800431a:	bf00      	nop
 800431c:	7fefffff 	.word	0x7fefffff
 8004320:	08008c18 	.word	0x08008c18
 8004324:	08008c1c 	.word	0x08008c1c
 8004328:	08008c24 	.word	0x08008c24
 800432c:	08008c20 	.word	0x08008c20
 8004330:	08008c28 	.word	0x08008c28
 8004334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004338:	429a      	cmp	r2, r3
 800433a:	bfa8      	it	ge
 800433c:	461a      	movge	r2, r3
 800433e:	2a00      	cmp	r2, #0
 8004340:	4691      	mov	r9, r2
 8004342:	dc37      	bgt.n	80043b4 <_printf_float+0x364>
 8004344:	f04f 0b00 	mov.w	fp, #0
 8004348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800434c:	f104 021a 	add.w	r2, r4, #26
 8004350:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004354:	ebaa 0309 	sub.w	r3, sl, r9
 8004358:	455b      	cmp	r3, fp
 800435a:	dc33      	bgt.n	80043c4 <_printf_float+0x374>
 800435c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004360:	429a      	cmp	r2, r3
 8004362:	db3b      	blt.n	80043dc <_printf_float+0x38c>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	07da      	lsls	r2, r3, #31
 8004368:	d438      	bmi.n	80043dc <_printf_float+0x38c>
 800436a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800436c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800436e:	eba2 030a 	sub.w	r3, r2, sl
 8004372:	eba2 0901 	sub.w	r9, r2, r1
 8004376:	4599      	cmp	r9, r3
 8004378:	bfa8      	it	ge
 800437a:	4699      	movge	r9, r3
 800437c:	f1b9 0f00 	cmp.w	r9, #0
 8004380:	dc34      	bgt.n	80043ec <_printf_float+0x39c>
 8004382:	f04f 0800 	mov.w	r8, #0
 8004386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438a:	f104 0a1a 	add.w	sl, r4, #26
 800438e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	eba3 0309 	sub.w	r3, r3, r9
 8004398:	4543      	cmp	r3, r8
 800439a:	f77f af7a 	ble.w	8004292 <_printf_float+0x242>
 800439e:	2301      	movs	r3, #1
 80043a0:	4652      	mov	r2, sl
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	f43f aeac 	beq.w	8004106 <_printf_float+0xb6>
 80043ae:	f108 0801 	add.w	r8, r8, #1
 80043b2:	e7ec      	b.n	800438e <_printf_float+0x33e>
 80043b4:	4613      	mov	r3, r2
 80043b6:	4631      	mov	r1, r6
 80043b8:	4642      	mov	r2, r8
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	d1c0      	bne.n	8004344 <_printf_float+0x2f4>
 80043c2:	e6a0      	b.n	8004106 <_printf_float+0xb6>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4631      	mov	r1, r6
 80043c8:	4628      	mov	r0, r5
 80043ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80043cc:	47b8      	blx	r7
 80043ce:	3001      	adds	r0, #1
 80043d0:	f43f ae99 	beq.w	8004106 <_printf_float+0xb6>
 80043d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043d6:	f10b 0b01 	add.w	fp, fp, #1
 80043da:	e7b9      	b.n	8004350 <_printf_float+0x300>
 80043dc:	4631      	mov	r1, r6
 80043de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	d1bf      	bne.n	800436a <_printf_float+0x31a>
 80043ea:	e68c      	b.n	8004106 <_printf_float+0xb6>
 80043ec:	464b      	mov	r3, r9
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	eb08 020a 	add.w	r2, r8, sl
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	d1c2      	bne.n	8004382 <_printf_float+0x332>
 80043fc:	e683      	b.n	8004106 <_printf_float+0xb6>
 80043fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004400:	2a01      	cmp	r2, #1
 8004402:	dc01      	bgt.n	8004408 <_printf_float+0x3b8>
 8004404:	07db      	lsls	r3, r3, #31
 8004406:	d537      	bpl.n	8004478 <_printf_float+0x428>
 8004408:	2301      	movs	r3, #1
 800440a:	4642      	mov	r2, r8
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f ae77 	beq.w	8004106 <_printf_float+0xb6>
 8004418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f ae6f 	beq.w	8004106 <_printf_float+0xb6>
 8004428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	f7fc faba 	bl	80009a8 <__aeabi_dcmpeq>
 8004434:	b9d8      	cbnz	r0, 800446e <_printf_float+0x41e>
 8004436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004438:	f108 0201 	add.w	r2, r8, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	4631      	mov	r1, r6
 8004440:	4628      	mov	r0, r5
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	d10e      	bne.n	8004466 <_printf_float+0x416>
 8004448:	e65d      	b.n	8004106 <_printf_float+0xb6>
 800444a:	2301      	movs	r3, #1
 800444c:	464a      	mov	r2, r9
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	f43f ae56 	beq.w	8004106 <_printf_float+0xb6>
 800445a:	f108 0801 	add.w	r8, r8, #1
 800445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004460:	3b01      	subs	r3, #1
 8004462:	4543      	cmp	r3, r8
 8004464:	dcf1      	bgt.n	800444a <_printf_float+0x3fa>
 8004466:	4653      	mov	r3, sl
 8004468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800446c:	e6e0      	b.n	8004230 <_printf_float+0x1e0>
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	f104 091a 	add.w	r9, r4, #26
 8004476:	e7f2      	b.n	800445e <_printf_float+0x40e>
 8004478:	2301      	movs	r3, #1
 800447a:	4642      	mov	r2, r8
 800447c:	e7df      	b.n	800443e <_printf_float+0x3ee>
 800447e:	2301      	movs	r3, #1
 8004480:	464a      	mov	r2, r9
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f ae3c 	beq.w	8004106 <_printf_float+0xb6>
 800448e:	f108 0801 	add.w	r8, r8, #1
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004496:	1a5b      	subs	r3, r3, r1
 8004498:	4543      	cmp	r3, r8
 800449a:	dcf0      	bgt.n	800447e <_printf_float+0x42e>
 800449c:	e6fd      	b.n	800429a <_printf_float+0x24a>
 800449e:	f04f 0800 	mov.w	r8, #0
 80044a2:	f104 0919 	add.w	r9, r4, #25
 80044a6:	e7f4      	b.n	8004492 <_printf_float+0x442>

080044a8 <_printf_common>:
 80044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	4616      	mov	r6, r2
 80044ae:	4699      	mov	r9, r3
 80044b0:	688a      	ldr	r2, [r1, #8]
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	4607      	mov	r7, r0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bfb8      	it	lt
 80044ba:	4613      	movlt	r3, r2
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c2:	460c      	mov	r4, r1
 80044c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c8:	b10a      	cbz	r2, 80044ce <_printf_common+0x26>
 80044ca:	3301      	adds	r3, #1
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0699      	lsls	r1, r3, #26
 80044d2:	bf42      	ittt	mi
 80044d4:	6833      	ldrmi	r3, [r6, #0]
 80044d6:	3302      	addmi	r3, #2
 80044d8:	6033      	strmi	r3, [r6, #0]
 80044da:	6825      	ldr	r5, [r4, #0]
 80044dc:	f015 0506 	ands.w	r5, r5, #6
 80044e0:	d106      	bne.n	80044f0 <_printf_common+0x48>
 80044e2:	f104 0a19 	add.w	sl, r4, #25
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	6832      	ldr	r2, [r6, #0]
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dc28      	bgt.n	8004542 <_printf_common+0x9a>
 80044f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f4:	1e13      	subs	r3, r2, #0
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	bf18      	it	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	0692      	lsls	r2, r2, #26
 80044fe:	d42d      	bmi.n	800455c <_printf_common+0xb4>
 8004500:	4649      	mov	r1, r9
 8004502:	4638      	mov	r0, r7
 8004504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d020      	beq.n	8004550 <_printf_common+0xa8>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	68e5      	ldr	r5, [r4, #12]
 8004512:	f003 0306 	and.w	r3, r3, #6
 8004516:	2b04      	cmp	r3, #4
 8004518:	bf18      	it	ne
 800451a:	2500      	movne	r5, #0
 800451c:	6832      	ldr	r2, [r6, #0]
 800451e:	f04f 0600 	mov.w	r6, #0
 8004522:	68a3      	ldr	r3, [r4, #8]
 8004524:	bf08      	it	eq
 8004526:	1aad      	subeq	r5, r5, r2
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	bf08      	it	eq
 800452c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004530:	4293      	cmp	r3, r2
 8004532:	bfc4      	itt	gt
 8004534:	1a9b      	subgt	r3, r3, r2
 8004536:	18ed      	addgt	r5, r5, r3
 8004538:	341a      	adds	r4, #26
 800453a:	42b5      	cmp	r5, r6
 800453c:	d11a      	bne.n	8004574 <_printf_common+0xcc>
 800453e:	2000      	movs	r0, #0
 8004540:	e008      	b.n	8004554 <_printf_common+0xac>
 8004542:	2301      	movs	r3, #1
 8004544:	4652      	mov	r2, sl
 8004546:	4649      	mov	r1, r9
 8004548:	4638      	mov	r0, r7
 800454a:	47c0      	blx	r8
 800454c:	3001      	adds	r0, #1
 800454e:	d103      	bne.n	8004558 <_printf_common+0xb0>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	3501      	adds	r5, #1
 800455a:	e7c4      	b.n	80044e6 <_printf_common+0x3e>
 800455c:	2030      	movs	r0, #48	; 0x30
 800455e:	18e1      	adds	r1, r4, r3
 8004560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800456a:	4422      	add	r2, r4
 800456c:	3302      	adds	r3, #2
 800456e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004572:	e7c5      	b.n	8004500 <_printf_common+0x58>
 8004574:	2301      	movs	r3, #1
 8004576:	4622      	mov	r2, r4
 8004578:	4649      	mov	r1, r9
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d0e6      	beq.n	8004550 <_printf_common+0xa8>
 8004582:	3601      	adds	r6, #1
 8004584:	e7d9      	b.n	800453a <_printf_common+0x92>
	...

08004588 <_printf_i>:
 8004588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	460c      	mov	r4, r1
 800458e:	7e27      	ldrb	r7, [r4, #24]
 8004590:	4691      	mov	r9, r2
 8004592:	2f78      	cmp	r7, #120	; 0x78
 8004594:	4680      	mov	r8, r0
 8004596:	469a      	mov	sl, r3
 8004598:	990c      	ldr	r1, [sp, #48]	; 0x30
 800459a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800459e:	d807      	bhi.n	80045b0 <_printf_i+0x28>
 80045a0:	2f62      	cmp	r7, #98	; 0x62
 80045a2:	d80a      	bhi.n	80045ba <_printf_i+0x32>
 80045a4:	2f00      	cmp	r7, #0
 80045a6:	f000 80d9 	beq.w	800475c <_printf_i+0x1d4>
 80045aa:	2f58      	cmp	r7, #88	; 0x58
 80045ac:	f000 80a4 	beq.w	80046f8 <_printf_i+0x170>
 80045b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b8:	e03a      	b.n	8004630 <_printf_i+0xa8>
 80045ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045be:	2b15      	cmp	r3, #21
 80045c0:	d8f6      	bhi.n	80045b0 <_printf_i+0x28>
 80045c2:	a001      	add	r0, pc, #4	; (adr r0, 80045c8 <_printf_i+0x40>)
 80045c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080045b1 	.word	0x080045b1
 80045d4:	080045b1 	.word	0x080045b1
 80045d8:	080045b1 	.word	0x080045b1
 80045dc:	080045b1 	.word	0x080045b1
 80045e0:	08004635 	.word	0x08004635
 80045e4:	080045b1 	.word	0x080045b1
 80045e8:	080045b1 	.word	0x080045b1
 80045ec:	080045b1 	.word	0x080045b1
 80045f0:	080045b1 	.word	0x080045b1
 80045f4:	08004743 	.word	0x08004743
 80045f8:	08004665 	.word	0x08004665
 80045fc:	08004725 	.word	0x08004725
 8004600:	080045b1 	.word	0x080045b1
 8004604:	080045b1 	.word	0x080045b1
 8004608:	08004765 	.word	0x08004765
 800460c:	080045b1 	.word	0x080045b1
 8004610:	08004665 	.word	0x08004665
 8004614:	080045b1 	.word	0x080045b1
 8004618:	080045b1 	.word	0x080045b1
 800461c:	0800472d 	.word	0x0800472d
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	600a      	str	r2, [r1, #0]
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e0a4      	b.n	800477e <_printf_i+0x1f6>
 8004634:	6825      	ldr	r5, [r4, #0]
 8004636:	6808      	ldr	r0, [r1, #0]
 8004638:	062e      	lsls	r6, r5, #24
 800463a:	f100 0304 	add.w	r3, r0, #4
 800463e:	d50a      	bpl.n	8004656 <_printf_i+0xce>
 8004640:	6805      	ldr	r5, [r0, #0]
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	2d00      	cmp	r5, #0
 8004646:	da03      	bge.n	8004650 <_printf_i+0xc8>
 8004648:	232d      	movs	r3, #45	; 0x2d
 800464a:	426d      	negs	r5, r5
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004650:	230a      	movs	r3, #10
 8004652:	485e      	ldr	r0, [pc, #376]	; (80047cc <_printf_i+0x244>)
 8004654:	e019      	b.n	800468a <_printf_i+0x102>
 8004656:	f015 0f40 	tst.w	r5, #64	; 0x40
 800465a:	6805      	ldr	r5, [r0, #0]
 800465c:	600b      	str	r3, [r1, #0]
 800465e:	bf18      	it	ne
 8004660:	b22d      	sxthne	r5, r5
 8004662:	e7ef      	b.n	8004644 <_printf_i+0xbc>
 8004664:	680b      	ldr	r3, [r1, #0]
 8004666:	6825      	ldr	r5, [r4, #0]
 8004668:	1d18      	adds	r0, r3, #4
 800466a:	6008      	str	r0, [r1, #0]
 800466c:	0628      	lsls	r0, r5, #24
 800466e:	d501      	bpl.n	8004674 <_printf_i+0xec>
 8004670:	681d      	ldr	r5, [r3, #0]
 8004672:	e002      	b.n	800467a <_printf_i+0xf2>
 8004674:	0669      	lsls	r1, r5, #25
 8004676:	d5fb      	bpl.n	8004670 <_printf_i+0xe8>
 8004678:	881d      	ldrh	r5, [r3, #0]
 800467a:	2f6f      	cmp	r7, #111	; 0x6f
 800467c:	bf0c      	ite	eq
 800467e:	2308      	moveq	r3, #8
 8004680:	230a      	movne	r3, #10
 8004682:	4852      	ldr	r0, [pc, #328]	; (80047cc <_printf_i+0x244>)
 8004684:	2100      	movs	r1, #0
 8004686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800468a:	6866      	ldr	r6, [r4, #4]
 800468c:	2e00      	cmp	r6, #0
 800468e:	bfa8      	it	ge
 8004690:	6821      	ldrge	r1, [r4, #0]
 8004692:	60a6      	str	r6, [r4, #8]
 8004694:	bfa4      	itt	ge
 8004696:	f021 0104 	bicge.w	r1, r1, #4
 800469a:	6021      	strge	r1, [r4, #0]
 800469c:	b90d      	cbnz	r5, 80046a2 <_printf_i+0x11a>
 800469e:	2e00      	cmp	r6, #0
 80046a0:	d04d      	beq.n	800473e <_printf_i+0x1b6>
 80046a2:	4616      	mov	r6, r2
 80046a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046a8:	fb03 5711 	mls	r7, r3, r1, r5
 80046ac:	5dc7      	ldrb	r7, [r0, r7]
 80046ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b2:	462f      	mov	r7, r5
 80046b4:	42bb      	cmp	r3, r7
 80046b6:	460d      	mov	r5, r1
 80046b8:	d9f4      	bls.n	80046a4 <_printf_i+0x11c>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d10b      	bne.n	80046d6 <_printf_i+0x14e>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	d508      	bpl.n	80046d6 <_printf_i+0x14e>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	6861      	ldr	r1, [r4, #4]
 80046c8:	4299      	cmp	r1, r3
 80046ca:	bfde      	ittt	le
 80046cc:	2330      	movle	r3, #48	; 0x30
 80046ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d6:	1b92      	subs	r2, r2, r6
 80046d8:	6122      	str	r2, [r4, #16]
 80046da:	464b      	mov	r3, r9
 80046dc:	4621      	mov	r1, r4
 80046de:	4640      	mov	r0, r8
 80046e0:	f8cd a000 	str.w	sl, [sp]
 80046e4:	aa03      	add	r2, sp, #12
 80046e6:	f7ff fedf 	bl	80044a8 <_printf_common>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d14c      	bne.n	8004788 <_printf_i+0x200>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	b004      	add	sp, #16
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	4834      	ldr	r0, [pc, #208]	; (80047cc <_printf_i+0x244>)
 80046fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046fe:	680e      	ldr	r6, [r1, #0]
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f856 5b04 	ldr.w	r5, [r6], #4
 8004706:	061f      	lsls	r7, r3, #24
 8004708:	600e      	str	r6, [r1, #0]
 800470a:	d514      	bpl.n	8004736 <_printf_i+0x1ae>
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	bf44      	itt	mi
 8004710:	f043 0320 	orrmi.w	r3, r3, #32
 8004714:	6023      	strmi	r3, [r4, #0]
 8004716:	b91d      	cbnz	r5, 8004720 <_printf_i+0x198>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	2310      	movs	r3, #16
 8004722:	e7af      	b.n	8004684 <_printf_i+0xfc>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	2378      	movs	r3, #120	; 0x78
 800472e:	4828      	ldr	r0, [pc, #160]	; (80047d0 <_printf_i+0x248>)
 8004730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004734:	e7e3      	b.n	80046fe <_printf_i+0x176>
 8004736:	065e      	lsls	r6, r3, #25
 8004738:	bf48      	it	mi
 800473a:	b2ad      	uxthmi	r5, r5
 800473c:	e7e6      	b.n	800470c <_printf_i+0x184>
 800473e:	4616      	mov	r6, r2
 8004740:	e7bb      	b.n	80046ba <_printf_i+0x132>
 8004742:	680b      	ldr	r3, [r1, #0]
 8004744:	6826      	ldr	r6, [r4, #0]
 8004746:	1d1d      	adds	r5, r3, #4
 8004748:	6960      	ldr	r0, [r4, #20]
 800474a:	600d      	str	r5, [r1, #0]
 800474c:	0635      	lsls	r5, r6, #24
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	d501      	bpl.n	8004756 <_printf_i+0x1ce>
 8004752:	6018      	str	r0, [r3, #0]
 8004754:	e002      	b.n	800475c <_printf_i+0x1d4>
 8004756:	0671      	lsls	r1, r6, #25
 8004758:	d5fb      	bpl.n	8004752 <_printf_i+0x1ca>
 800475a:	8018      	strh	r0, [r3, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	4616      	mov	r6, r2
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	e7ba      	b.n	80046da <_printf_i+0x152>
 8004764:	680b      	ldr	r3, [r1, #0]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	600a      	str	r2, [r1, #0]
 800476a:	681e      	ldr	r6, [r3, #0]
 800476c:	2100      	movs	r1, #0
 800476e:	4630      	mov	r0, r6
 8004770:	6862      	ldr	r2, [r4, #4]
 8004772:	f002 fb0b 	bl	8006d8c <memchr>
 8004776:	b108      	cbz	r0, 800477c <_printf_i+0x1f4>
 8004778:	1b80      	subs	r0, r0, r6
 800477a:	6060      	str	r0, [r4, #4]
 800477c:	6863      	ldr	r3, [r4, #4]
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	2300      	movs	r3, #0
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004786:	e7a8      	b.n	80046da <_printf_i+0x152>
 8004788:	4632      	mov	r2, r6
 800478a:	4649      	mov	r1, r9
 800478c:	4640      	mov	r0, r8
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	47d0      	blx	sl
 8004792:	3001      	adds	r0, #1
 8004794:	d0ab      	beq.n	80046ee <_printf_i+0x166>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	079b      	lsls	r3, r3, #30
 800479a:	d413      	bmi.n	80047c4 <_printf_i+0x23c>
 800479c:	68e0      	ldr	r0, [r4, #12]
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	4298      	cmp	r0, r3
 80047a2:	bfb8      	it	lt
 80047a4:	4618      	movlt	r0, r3
 80047a6:	e7a4      	b.n	80046f2 <_printf_i+0x16a>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4632      	mov	r2, r6
 80047ac:	4649      	mov	r1, r9
 80047ae:	4640      	mov	r0, r8
 80047b0:	47d0      	blx	sl
 80047b2:	3001      	adds	r0, #1
 80047b4:	d09b      	beq.n	80046ee <_printf_i+0x166>
 80047b6:	3501      	adds	r5, #1
 80047b8:	68e3      	ldr	r3, [r4, #12]
 80047ba:	9903      	ldr	r1, [sp, #12]
 80047bc:	1a5b      	subs	r3, r3, r1
 80047be:	42ab      	cmp	r3, r5
 80047c0:	dcf2      	bgt.n	80047a8 <_printf_i+0x220>
 80047c2:	e7eb      	b.n	800479c <_printf_i+0x214>
 80047c4:	2500      	movs	r5, #0
 80047c6:	f104 0619 	add.w	r6, r4, #25
 80047ca:	e7f5      	b.n	80047b8 <_printf_i+0x230>
 80047cc:	08008c2a 	.word	0x08008c2a
 80047d0:	08008c3b 	.word	0x08008c3b

080047d4 <_scanf_float>:
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	b087      	sub	sp, #28
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	688b      	ldr	r3, [r1, #8]
 80047de:	4617      	mov	r7, r2
 80047e0:	1e5a      	subs	r2, r3, #1
 80047e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047e6:	bf85      	ittet	hi
 80047e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047ec:	195b      	addhi	r3, r3, r5
 80047ee:	2300      	movls	r3, #0
 80047f0:	9302      	strhi	r3, [sp, #8]
 80047f2:	bf88      	it	hi
 80047f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047f8:	468b      	mov	fp, r1
 80047fa:	f04f 0500 	mov.w	r5, #0
 80047fe:	bf8c      	ite	hi
 8004800:	608b      	strhi	r3, [r1, #8]
 8004802:	9302      	strls	r3, [sp, #8]
 8004804:	680b      	ldr	r3, [r1, #0]
 8004806:	4680      	mov	r8, r0
 8004808:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800480c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004810:	460c      	mov	r4, r1
 8004812:	465e      	mov	r6, fp
 8004814:	46aa      	mov	sl, r5
 8004816:	46a9      	mov	r9, r5
 8004818:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800481c:	9501      	str	r5, [sp, #4]
 800481e:	68a2      	ldr	r2, [r4, #8]
 8004820:	b152      	cbz	r2, 8004838 <_scanf_float+0x64>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b4e      	cmp	r3, #78	; 0x4e
 8004828:	d864      	bhi.n	80048f4 <_scanf_float+0x120>
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d83c      	bhi.n	80048a8 <_scanf_float+0xd4>
 800482e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004832:	b2c8      	uxtb	r0, r1
 8004834:	280e      	cmp	r0, #14
 8004836:	d93a      	bls.n	80048ae <_scanf_float+0xda>
 8004838:	f1b9 0f00 	cmp.w	r9, #0
 800483c:	d003      	beq.n	8004846 <_scanf_float+0x72>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800484a:	f1ba 0f01 	cmp.w	sl, #1
 800484e:	f200 8113 	bhi.w	8004a78 <_scanf_float+0x2a4>
 8004852:	455e      	cmp	r6, fp
 8004854:	f200 8105 	bhi.w	8004a62 <_scanf_float+0x28e>
 8004858:	2501      	movs	r5, #1
 800485a:	4628      	mov	r0, r5
 800485c:	b007      	add	sp, #28
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004866:	2a0d      	cmp	r2, #13
 8004868:	d8e6      	bhi.n	8004838 <_scanf_float+0x64>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_scanf_float+0x9c>)
 800486c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004870:	080049af 	.word	0x080049af
 8004874:	08004839 	.word	0x08004839
 8004878:	08004839 	.word	0x08004839
 800487c:	08004839 	.word	0x08004839
 8004880:	08004a0f 	.word	0x08004a0f
 8004884:	080049e7 	.word	0x080049e7
 8004888:	08004839 	.word	0x08004839
 800488c:	08004839 	.word	0x08004839
 8004890:	080049bd 	.word	0x080049bd
 8004894:	08004839 	.word	0x08004839
 8004898:	08004839 	.word	0x08004839
 800489c:	08004839 	.word	0x08004839
 80048a0:	08004839 	.word	0x08004839
 80048a4:	08004975 	.word	0x08004975
 80048a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80048ac:	e7db      	b.n	8004866 <_scanf_float+0x92>
 80048ae:	290e      	cmp	r1, #14
 80048b0:	d8c2      	bhi.n	8004838 <_scanf_float+0x64>
 80048b2:	a001      	add	r0, pc, #4	; (adr r0, 80048b8 <_scanf_float+0xe4>)
 80048b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048b8:	08004967 	.word	0x08004967
 80048bc:	08004839 	.word	0x08004839
 80048c0:	08004967 	.word	0x08004967
 80048c4:	080049fb 	.word	0x080049fb
 80048c8:	08004839 	.word	0x08004839
 80048cc:	08004915 	.word	0x08004915
 80048d0:	08004951 	.word	0x08004951
 80048d4:	08004951 	.word	0x08004951
 80048d8:	08004951 	.word	0x08004951
 80048dc:	08004951 	.word	0x08004951
 80048e0:	08004951 	.word	0x08004951
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004951 	.word	0x08004951
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004951 	.word	0x08004951
 80048f4:	2b6e      	cmp	r3, #110	; 0x6e
 80048f6:	d809      	bhi.n	800490c <_scanf_float+0x138>
 80048f8:	2b60      	cmp	r3, #96	; 0x60
 80048fa:	d8b2      	bhi.n	8004862 <_scanf_float+0x8e>
 80048fc:	2b54      	cmp	r3, #84	; 0x54
 80048fe:	d077      	beq.n	80049f0 <_scanf_float+0x21c>
 8004900:	2b59      	cmp	r3, #89	; 0x59
 8004902:	d199      	bne.n	8004838 <_scanf_float+0x64>
 8004904:	2d07      	cmp	r5, #7
 8004906:	d197      	bne.n	8004838 <_scanf_float+0x64>
 8004908:	2508      	movs	r5, #8
 800490a:	e029      	b.n	8004960 <_scanf_float+0x18c>
 800490c:	2b74      	cmp	r3, #116	; 0x74
 800490e:	d06f      	beq.n	80049f0 <_scanf_float+0x21c>
 8004910:	2b79      	cmp	r3, #121	; 0x79
 8004912:	e7f6      	b.n	8004902 <_scanf_float+0x12e>
 8004914:	6821      	ldr	r1, [r4, #0]
 8004916:	05c8      	lsls	r0, r1, #23
 8004918:	d51a      	bpl.n	8004950 <_scanf_float+0x17c>
 800491a:	9b02      	ldr	r3, [sp, #8]
 800491c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004920:	6021      	str	r1, [r4, #0]
 8004922:	f109 0901 	add.w	r9, r9, #1
 8004926:	b11b      	cbz	r3, 8004930 <_scanf_float+0x15c>
 8004928:	3b01      	subs	r3, #1
 800492a:	3201      	adds	r2, #1
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	60a2      	str	r2, [r4, #8]
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	3b01      	subs	r3, #1
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	f340 8084 	ble.w	8004a50 <_scanf_float+0x27c>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	3301      	adds	r3, #1
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	e766      	b.n	800481e <_scanf_float+0x4a>
 8004950:	eb1a 0f05 	cmn.w	sl, r5
 8004954:	f47f af70 	bne.w	8004838 <_scanf_float+0x64>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	f806 3b01 	strb.w	r3, [r6], #1
 8004964:	e7e4      	b.n	8004930 <_scanf_float+0x15c>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	0610      	lsls	r0, r2, #24
 800496a:	f57f af65 	bpl.w	8004838 <_scanf_float+0x64>
 800496e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004972:	e7f4      	b.n	800495e <_scanf_float+0x18a>
 8004974:	f1ba 0f00 	cmp.w	sl, #0
 8004978:	d10e      	bne.n	8004998 <_scanf_float+0x1c4>
 800497a:	f1b9 0f00 	cmp.w	r9, #0
 800497e:	d10e      	bne.n	800499e <_scanf_float+0x1ca>
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800498a:	d108      	bne.n	800499e <_scanf_float+0x1ca>
 800498c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004990:	f04f 0a01 	mov.w	sl, #1
 8004994:	6022      	str	r2, [r4, #0]
 8004996:	e7e3      	b.n	8004960 <_scanf_float+0x18c>
 8004998:	f1ba 0f02 	cmp.w	sl, #2
 800499c:	d055      	beq.n	8004a4a <_scanf_float+0x276>
 800499e:	2d01      	cmp	r5, #1
 80049a0:	d002      	beq.n	80049a8 <_scanf_float+0x1d4>
 80049a2:	2d04      	cmp	r5, #4
 80049a4:	f47f af48 	bne.w	8004838 <_scanf_float+0x64>
 80049a8:	3501      	adds	r5, #1
 80049aa:	b2ed      	uxtb	r5, r5
 80049ac:	e7d8      	b.n	8004960 <_scanf_float+0x18c>
 80049ae:	f1ba 0f01 	cmp.w	sl, #1
 80049b2:	f47f af41 	bne.w	8004838 <_scanf_float+0x64>
 80049b6:	f04f 0a02 	mov.w	sl, #2
 80049ba:	e7d1      	b.n	8004960 <_scanf_float+0x18c>
 80049bc:	b97d      	cbnz	r5, 80049de <_scanf_float+0x20a>
 80049be:	f1b9 0f00 	cmp.w	r9, #0
 80049c2:	f47f af3c 	bne.w	800483e <_scanf_float+0x6a>
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049d0:	f47f af39 	bne.w	8004846 <_scanf_float+0x72>
 80049d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049d8:	2501      	movs	r5, #1
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	e7c0      	b.n	8004960 <_scanf_float+0x18c>
 80049de:	2d03      	cmp	r5, #3
 80049e0:	d0e2      	beq.n	80049a8 <_scanf_float+0x1d4>
 80049e2:	2d05      	cmp	r5, #5
 80049e4:	e7de      	b.n	80049a4 <_scanf_float+0x1d0>
 80049e6:	2d02      	cmp	r5, #2
 80049e8:	f47f af26 	bne.w	8004838 <_scanf_float+0x64>
 80049ec:	2503      	movs	r5, #3
 80049ee:	e7b7      	b.n	8004960 <_scanf_float+0x18c>
 80049f0:	2d06      	cmp	r5, #6
 80049f2:	f47f af21 	bne.w	8004838 <_scanf_float+0x64>
 80049f6:	2507      	movs	r5, #7
 80049f8:	e7b2      	b.n	8004960 <_scanf_float+0x18c>
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	0591      	lsls	r1, r2, #22
 80049fe:	f57f af1b 	bpl.w	8004838 <_scanf_float+0x64>
 8004a02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a0c:	e7a8      	b.n	8004960 <_scanf_float+0x18c>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a18:	d006      	beq.n	8004a28 <_scanf_float+0x254>
 8004a1a:	0550      	lsls	r0, r2, #21
 8004a1c:	f57f af0c 	bpl.w	8004838 <_scanf_float+0x64>
 8004a20:	f1b9 0f00 	cmp.w	r9, #0
 8004a24:	f43f af0f 	beq.w	8004846 <_scanf_float+0x72>
 8004a28:	0591      	lsls	r1, r2, #22
 8004a2a:	bf58      	it	pl
 8004a2c:	9901      	ldrpl	r1, [sp, #4]
 8004a2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a32:	bf58      	it	pl
 8004a34:	eba9 0101 	subpl.w	r1, r9, r1
 8004a38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a3c:	f04f 0900 	mov.w	r9, #0
 8004a40:	bf58      	it	pl
 8004a42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	e78a      	b.n	8004960 <_scanf_float+0x18c>
 8004a4a:	f04f 0a03 	mov.w	sl, #3
 8004a4e:	e787      	b.n	8004960 <_scanf_float+0x18c>
 8004a50:	4639      	mov	r1, r7
 8004a52:	4640      	mov	r0, r8
 8004a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a58:	4798      	blx	r3
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f43f aedf 	beq.w	800481e <_scanf_float+0x4a>
 8004a60:	e6ea      	b.n	8004838 <_scanf_float+0x64>
 8004a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a66:	463a      	mov	r2, r7
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a6e:	4798      	blx	r3
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	e6ec      	b.n	8004852 <_scanf_float+0x7e>
 8004a78:	1e6b      	subs	r3, r5, #1
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d825      	bhi.n	8004aca <_scanf_float+0x2f6>
 8004a7e:	2d02      	cmp	r5, #2
 8004a80:	d836      	bhi.n	8004af0 <_scanf_float+0x31c>
 8004a82:	455e      	cmp	r6, fp
 8004a84:	f67f aee8 	bls.w	8004858 <_scanf_float+0x84>
 8004a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a94:	4798      	blx	r3
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	e7f1      	b.n	8004a82 <_scanf_float+0x2ae>
 8004a9e:	9802      	ldr	r0, [sp, #8]
 8004aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	9002      	str	r0, [sp, #8]
 8004aac:	4640      	mov	r0, r8
 8004aae:	4798      	blx	r3
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aba:	fa5f fa8a 	uxtb.w	sl, sl
 8004abe:	f1ba 0f02 	cmp.w	sl, #2
 8004ac2:	d1ec      	bne.n	8004a9e <_scanf_float+0x2ca>
 8004ac4:	3d03      	subs	r5, #3
 8004ac6:	b2ed      	uxtb	r5, r5
 8004ac8:	1b76      	subs	r6, r6, r5
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	05da      	lsls	r2, r3, #23
 8004ace:	d52f      	bpl.n	8004b30 <_scanf_float+0x35c>
 8004ad0:	055b      	lsls	r3, r3, #21
 8004ad2:	d510      	bpl.n	8004af6 <_scanf_float+0x322>
 8004ad4:	455e      	cmp	r6, fp
 8004ad6:	f67f aebf 	bls.w	8004858 <_scanf_float+0x84>
 8004ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ade:	463a      	mov	r2, r7
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ae6:	4798      	blx	r3
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6123      	str	r3, [r4, #16]
 8004aee:	e7f1      	b.n	8004ad4 <_scanf_float+0x300>
 8004af0:	46aa      	mov	sl, r5
 8004af2:	9602      	str	r6, [sp, #8]
 8004af4:	e7df      	b.n	8004ab6 <_scanf_float+0x2e2>
 8004af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004afa:	6923      	ldr	r3, [r4, #16]
 8004afc:	2965      	cmp	r1, #101	; 0x65
 8004afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b02:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	d00c      	beq.n	8004b24 <_scanf_float+0x350>
 8004b0a:	2945      	cmp	r1, #69	; 0x45
 8004b0c:	d00a      	beq.n	8004b24 <_scanf_float+0x350>
 8004b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b12:	463a      	mov	r2, r7
 8004b14:	4640      	mov	r0, r8
 8004b16:	4798      	blx	r3
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	1eb5      	subs	r5, r6, #2
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	463a      	mov	r2, r7
 8004b26:	4640      	mov	r0, r8
 8004b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b2c:	4798      	blx	r3
 8004b2e:	462e      	mov	r6, r5
 8004b30:	6825      	ldr	r5, [r4, #0]
 8004b32:	f015 0510 	ands.w	r5, r5, #16
 8004b36:	d159      	bne.n	8004bec <_scanf_float+0x418>
 8004b38:	7035      	strb	r5, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d11c      	bne.n	8004b80 <_scanf_float+0x3ac>
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	454b      	cmp	r3, r9
 8004b4a:	eba3 0209 	sub.w	r2, r3, r9
 8004b4e:	d124      	bne.n	8004b9a <_scanf_float+0x3c6>
 8004b50:	2200      	movs	r2, #0
 8004b52:	4659      	mov	r1, fp
 8004b54:	4640      	mov	r0, r8
 8004b56:	f000 fe8b 	bl	8005870 <_strtod_r>
 8004b5a:	f8d4 c000 	ldr.w	ip, [r4]
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	f01c 0f02 	tst.w	ip, #2
 8004b64:	4606      	mov	r6, r0
 8004b66:	460f      	mov	r7, r1
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	d021      	beq.n	8004bb0 <_scanf_float+0x3dc>
 8004b6c:	9903      	ldr	r1, [sp, #12]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	600a      	str	r2, [r1, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	e9c3 6700 	strd	r6, r7, [r3]
 8004b78:	68e3      	ldr	r3, [r4, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60e3      	str	r3, [r4, #12]
 8004b7e:	e66c      	b.n	800485a <_scanf_float+0x86>
 8004b80:	9b04      	ldr	r3, [sp, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0e4      	beq.n	8004b50 <_scanf_float+0x37c>
 8004b86:	9905      	ldr	r1, [sp, #20]
 8004b88:	230a      	movs	r3, #10
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	3101      	adds	r1, #1
 8004b90:	f000 fefa 	bl	8005988 <_strtol_r>
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	9e05      	ldr	r6, [sp, #20]
 8004b98:	1ac2      	subs	r2, r0, r3
 8004b9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b9e:	429e      	cmp	r6, r3
 8004ba0:	bf28      	it	cs
 8004ba2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4911      	ldr	r1, [pc, #68]	; (8004bf0 <_scanf_float+0x41c>)
 8004baa:	f000 f829 	bl	8004c00 <siprintf>
 8004bae:	e7cf      	b.n	8004b50 <_scanf_float+0x37c>
 8004bb0:	f01c 0f04 	tst.w	ip, #4
 8004bb4:	f103 0e04 	add.w	lr, r3, #4
 8004bb8:	d003      	beq.n	8004bc2 <_scanf_float+0x3ee>
 8004bba:	9903      	ldr	r1, [sp, #12]
 8004bbc:	f8c1 e000 	str.w	lr, [r1]
 8004bc0:	e7d7      	b.n	8004b72 <_scanf_float+0x39e>
 8004bc2:	9a03      	ldr	r2, [sp, #12]
 8004bc4:	f8c2 e000 	str.w	lr, [r2]
 8004bc8:	f8d3 8000 	ldr.w	r8, [r3]
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	f7fb ff1c 	bl	8000a0c <__aeabi_dcmpun>
 8004bd4:	b128      	cbz	r0, 8004be2 <_scanf_float+0x40e>
 8004bd6:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <_scanf_float+0x420>)
 8004bd8:	f000 f80e 	bl	8004bf8 <nanf>
 8004bdc:	f8c8 0000 	str.w	r0, [r8]
 8004be0:	e7ca      	b.n	8004b78 <_scanf_float+0x3a4>
 8004be2:	4630      	mov	r0, r6
 8004be4:	4639      	mov	r1, r7
 8004be6:	f7fb ff6f 	bl	8000ac8 <__aeabi_d2f>
 8004bea:	e7f7      	b.n	8004bdc <_scanf_float+0x408>
 8004bec:	2500      	movs	r5, #0
 8004bee:	e634      	b.n	800485a <_scanf_float+0x86>
 8004bf0:	08008c4c 	.word	0x08008c4c
 8004bf4:	08009068 	.word	0x08009068

08004bf8 <nanf>:
 8004bf8:	4800      	ldr	r0, [pc, #0]	; (8004bfc <nanf+0x4>)
 8004bfa:	4770      	bx	lr
 8004bfc:	7fc00000 	.word	0x7fc00000

08004c00 <siprintf>:
 8004c00:	b40e      	push	{r1, r2, r3}
 8004c02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c06:	b500      	push	{lr}
 8004c08:	b09c      	sub	sp, #112	; 0x70
 8004c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9006      	str	r0, [sp, #24]
 8004c10:	9107      	str	r1, [sp, #28]
 8004c12:	9104      	str	r1, [sp, #16]
 8004c14:	4808      	ldr	r0, [pc, #32]	; (8004c38 <siprintf+0x38>)
 8004c16:	4909      	ldr	r1, [pc, #36]	; (8004c3c <siprintf+0x3c>)
 8004c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	6800      	ldr	r0, [r0, #0]
 8004c20:	a902      	add	r1, sp, #8
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	f002 fe96 	bl	8007954 <_svfiprintf_r>
 8004c28:	2200      	movs	r2, #0
 8004c2a:	9b02      	ldr	r3, [sp, #8]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	b01c      	add	sp, #112	; 0x70
 8004c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c34:	b003      	add	sp, #12
 8004c36:	4770      	bx	lr
 8004c38:	20000810 	.word	0x20000810
 8004c3c:	ffff0208 	.word	0xffff0208

08004c40 <sulp>:
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c44:	460f      	mov	r7, r1
 8004c46:	4690      	mov	r8, r2
 8004c48:	f002 fc2c 	bl	80074a4 <__ulp>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	f1b8 0f00 	cmp.w	r8, #0
 8004c54:	d011      	beq.n	8004c7a <sulp+0x3a>
 8004c56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	dd0b      	ble.n	8004c7a <sulp+0x3a>
 8004c62:	2400      	movs	r4, #0
 8004c64:	051b      	lsls	r3, r3, #20
 8004c66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c6e:	4622      	mov	r2, r4
 8004c70:	462b      	mov	r3, r5
 8004c72:	f7fb fc31 	bl	80004d8 <__aeabi_dmul>
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c82:	0000      	movs	r0, r0
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <_strtod_l>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	469b      	mov	fp, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	b0a1      	sub	sp, #132	; 0x84
 8004c92:	931c      	str	r3, [sp, #112]	; 0x70
 8004c94:	4ba1      	ldr	r3, [pc, #644]	; (8004f1c <_strtod_l+0x294>)
 8004c96:	4682      	mov	sl, r0
 8004c98:	681f      	ldr	r7, [r3, #0]
 8004c9a:	460e      	mov	r6, r1
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ca0:	f7fb fa56 	bl	8000150 <strlen>
 8004ca4:	f04f 0800 	mov.w	r8, #0
 8004ca8:	4604      	mov	r4, r0
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	961b      	str	r6, [sp, #108]	; 0x6c
 8004cb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	2a2b      	cmp	r2, #43	; 0x2b
 8004cb6:	d04c      	beq.n	8004d52 <_strtod_l+0xca>
 8004cb8:	d83a      	bhi.n	8004d30 <_strtod_l+0xa8>
 8004cba:	2a0d      	cmp	r2, #13
 8004cbc:	d833      	bhi.n	8004d26 <_strtod_l+0x9e>
 8004cbe:	2a08      	cmp	r2, #8
 8004cc0:	d833      	bhi.n	8004d2a <_strtod_l+0xa2>
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d03d      	beq.n	8004d42 <_strtod_l+0xba>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8004cca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004ccc:	782b      	ldrb	r3, [r5, #0]
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	f040 80af 	bne.w	8004e32 <_strtod_l+0x1aa>
 8004cd4:	786b      	ldrb	r3, [r5, #1]
 8004cd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004cda:	2b58      	cmp	r3, #88	; 0x58
 8004cdc:	d16c      	bne.n	8004db8 <_strtod_l+0x130>
 8004cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	ab1c      	add	r3, sp, #112	; 0x70
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4a8d      	ldr	r2, [pc, #564]	; (8004f20 <_strtod_l+0x298>)
 8004cea:	f8cd b008 	str.w	fp, [sp, #8]
 8004cee:	ab1d      	add	r3, sp, #116	; 0x74
 8004cf0:	a91b      	add	r1, sp, #108	; 0x6c
 8004cf2:	f001 fd2f 	bl	8006754 <__gethex>
 8004cf6:	f010 0607 	ands.w	r6, r0, #7
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	d005      	beq.n	8004d0a <_strtod_l+0x82>
 8004cfe:	2e06      	cmp	r6, #6
 8004d00:	d129      	bne.n	8004d56 <_strtod_l+0xce>
 8004d02:	2300      	movs	r3, #0
 8004d04:	3501      	adds	r5, #1
 8004d06:	951b      	str	r5, [sp, #108]	; 0x6c
 8004d08:	930c      	str	r3, [sp, #48]	; 0x30
 8004d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 8596 	bne.w	800583e <_strtod_l+0xbb6>
 8004d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d14:	b1d3      	cbz	r3, 8004d4c <_strtod_l+0xc4>
 8004d16:	4642      	mov	r2, r8
 8004d18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	b021      	add	sp, #132	; 0x84
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	2a20      	cmp	r2, #32
 8004d28:	d1cd      	bne.n	8004cc6 <_strtod_l+0x3e>
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d2e:	e7bf      	b.n	8004cb0 <_strtod_l+0x28>
 8004d30:	2a2d      	cmp	r2, #45	; 0x2d
 8004d32:	d1c8      	bne.n	8004cc6 <_strtod_l+0x3e>
 8004d34:	2201      	movs	r2, #1
 8004d36:	920c      	str	r2, [sp, #48]	; 0x30
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1c3      	bne.n	8004cca <_strtod_l+0x42>
 8004d42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d44:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 8577 	bne.w	800583a <_strtod_l+0xbb2>
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	e7e4      	b.n	8004d1c <_strtod_l+0x94>
 8004d52:	2200      	movs	r2, #0
 8004d54:	e7ef      	b.n	8004d36 <_strtod_l+0xae>
 8004d56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004d58:	b13a      	cbz	r2, 8004d6a <_strtod_l+0xe2>
 8004d5a:	2135      	movs	r1, #53	; 0x35
 8004d5c:	a81e      	add	r0, sp, #120	; 0x78
 8004d5e:	f002 fca5 	bl	80076ac <__copybits>
 8004d62:	4650      	mov	r0, sl
 8004d64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d66:	f002 f86d 	bl	8006e44 <_Bfree>
 8004d6a:	3e01      	subs	r6, #1
 8004d6c:	2e05      	cmp	r6, #5
 8004d6e:	d807      	bhi.n	8004d80 <_strtod_l+0xf8>
 8004d70:	e8df f006 	tbb	[pc, r6]
 8004d74:	1d180b0e 	.word	0x1d180b0e
 8004d78:	030e      	.short	0x030e
 8004d7a:	f04f 0900 	mov.w	r9, #0
 8004d7e:	46c8      	mov	r8, r9
 8004d80:	0721      	lsls	r1, r4, #28
 8004d82:	d5c2      	bpl.n	8004d0a <_strtod_l+0x82>
 8004d84:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004d88:	e7bf      	b.n	8004d0a <_strtod_l+0x82>
 8004d8a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004d8e:	e7f7      	b.n	8004d80 <_strtod_l+0xf8>
 8004d90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d92:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004d96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004da2:	e7ed      	b.n	8004d80 <_strtod_l+0xf8>
 8004da4:	f04f 0800 	mov.w	r8, #0
 8004da8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004f24 <_strtod_l+0x29c>
 8004dac:	e7e8      	b.n	8004d80 <_strtod_l+0xf8>
 8004dae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004db2:	f04f 38ff 	mov.w	r8, #4294967295
 8004db6:	e7e3      	b.n	8004d80 <_strtod_l+0xf8>
 8004db8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d0f9      	beq.n	8004db8 <_strtod_l+0x130>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0a0      	beq.n	8004d0a <_strtod_l+0x82>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	9307      	str	r3, [sp, #28]
 8004dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dce:	220a      	movs	r2, #10
 8004dd0:	9308      	str	r3, [sp, #32]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	469b      	mov	fp, r3
 8004dd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004dda:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004ddc:	7805      	ldrb	r5, [r0, #0]
 8004dde:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004de2:	b2d9      	uxtb	r1, r3
 8004de4:	2909      	cmp	r1, #9
 8004de6:	d926      	bls.n	8004e36 <_strtod_l+0x1ae>
 8004de8:	4622      	mov	r2, r4
 8004dea:	4639      	mov	r1, r7
 8004dec:	f002 fec8 	bl	8007b80 <strncmp>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d032      	beq.n	8004e5a <_strtod_l+0x1d2>
 8004df4:	2000      	movs	r0, #0
 8004df6:	462b      	mov	r3, r5
 8004df8:	465c      	mov	r4, fp
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	9004      	str	r0, [sp, #16]
 8004dfe:	2b65      	cmp	r3, #101	; 0x65
 8004e00:	d001      	beq.n	8004e06 <_strtod_l+0x17e>
 8004e02:	2b45      	cmp	r3, #69	; 0x45
 8004e04:	d113      	bne.n	8004e2e <_strtod_l+0x1a6>
 8004e06:	b91c      	cbnz	r4, 8004e10 <_strtod_l+0x188>
 8004e08:	9b07      	ldr	r3, [sp, #28]
 8004e0a:	4303      	orrs	r3, r0
 8004e0c:	d099      	beq.n	8004d42 <_strtod_l+0xba>
 8004e0e:	2400      	movs	r4, #0
 8004e10:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004e12:	1c73      	adds	r3, r6, #1
 8004e14:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e16:	7873      	ldrb	r3, [r6, #1]
 8004e18:	2b2b      	cmp	r3, #43	; 0x2b
 8004e1a:	d078      	beq.n	8004f0e <_strtod_l+0x286>
 8004e1c:	2b2d      	cmp	r3, #45	; 0x2d
 8004e1e:	d07b      	beq.n	8004f18 <_strtod_l+0x290>
 8004e20:	2700      	movs	r7, #0
 8004e22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e26:	2909      	cmp	r1, #9
 8004e28:	f240 8082 	bls.w	8004f30 <_strtod_l+0x2a8>
 8004e2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e2e:	2500      	movs	r5, #0
 8004e30:	e09e      	b.n	8004f70 <_strtod_l+0x2e8>
 8004e32:	2300      	movs	r3, #0
 8004e34:	e7c9      	b.n	8004dca <_strtod_l+0x142>
 8004e36:	f1bb 0f08 	cmp.w	fp, #8
 8004e3a:	bfd5      	itete	le
 8004e3c:	9906      	ldrle	r1, [sp, #24]
 8004e3e:	9905      	ldrgt	r1, [sp, #20]
 8004e40:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e48:	f100 0001 	add.w	r0, r0, #1
 8004e4c:	bfd4      	ite	le
 8004e4e:	9306      	strle	r3, [sp, #24]
 8004e50:	9305      	strgt	r3, [sp, #20]
 8004e52:	f10b 0b01 	add.w	fp, fp, #1
 8004e56:	901b      	str	r0, [sp, #108]	; 0x6c
 8004e58:	e7bf      	b.n	8004dda <_strtod_l+0x152>
 8004e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e5c:	191a      	adds	r2, r3, r4
 8004e5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e60:	5d1b      	ldrb	r3, [r3, r4]
 8004e62:	f1bb 0f00 	cmp.w	fp, #0
 8004e66:	d036      	beq.n	8004ed6 <_strtod_l+0x24e>
 8004e68:	465c      	mov	r4, fp
 8004e6a:	9004      	str	r0, [sp, #16]
 8004e6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004e70:	2a09      	cmp	r2, #9
 8004e72:	d912      	bls.n	8004e9a <_strtod_l+0x212>
 8004e74:	2201      	movs	r2, #1
 8004e76:	e7c2      	b.n	8004dfe <_strtod_l+0x176>
 8004e78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	2b30      	cmp	r3, #48	; 0x30
 8004e84:	d0f8      	beq.n	8004e78 <_strtod_l+0x1f0>
 8004e86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e8a:	2a08      	cmp	r2, #8
 8004e8c:	f200 84dc 	bhi.w	8005848 <_strtod_l+0xbc0>
 8004e90:	9004      	str	r0, [sp, #16]
 8004e92:	2000      	movs	r0, #0
 8004e94:	4604      	mov	r4, r0
 8004e96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e98:	9208      	str	r2, [sp, #32]
 8004e9a:	3b30      	subs	r3, #48	; 0x30
 8004e9c:	f100 0201 	add.w	r2, r0, #1
 8004ea0:	d013      	beq.n	8004eca <_strtod_l+0x242>
 8004ea2:	9904      	ldr	r1, [sp, #16]
 8004ea4:	1905      	adds	r5, r0, r4
 8004ea6:	4411      	add	r1, r2
 8004ea8:	9104      	str	r1, [sp, #16]
 8004eaa:	4622      	mov	r2, r4
 8004eac:	210a      	movs	r1, #10
 8004eae:	42aa      	cmp	r2, r5
 8004eb0:	d113      	bne.n	8004eda <_strtod_l+0x252>
 8004eb2:	1822      	adds	r2, r4, r0
 8004eb4:	2a08      	cmp	r2, #8
 8004eb6:	f104 0401 	add.w	r4, r4, #1
 8004eba:	4404      	add	r4, r0
 8004ebc:	dc1b      	bgt.n	8004ef6 <_strtod_l+0x26e>
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	9906      	ldr	r1, [sp, #24]
 8004ec2:	fb02 3301 	mla	r3, r2, r1, r3
 8004ec6:	9306      	str	r3, [sp, #24]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ecc:	4610      	mov	r0, r2
 8004ece:	1c59      	adds	r1, r3, #1
 8004ed0:	911b      	str	r1, [sp, #108]	; 0x6c
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	e7ca      	b.n	8004e6c <_strtod_l+0x1e4>
 8004ed6:	4658      	mov	r0, fp
 8004ed8:	e7d3      	b.n	8004e82 <_strtod_l+0x1fa>
 8004eda:	2a08      	cmp	r2, #8
 8004edc:	dc04      	bgt.n	8004ee8 <_strtod_l+0x260>
 8004ede:	9f06      	ldr	r7, [sp, #24]
 8004ee0:	434f      	muls	r7, r1
 8004ee2:	9706      	str	r7, [sp, #24]
 8004ee4:	3201      	adds	r2, #1
 8004ee6:	e7e2      	b.n	8004eae <_strtod_l+0x226>
 8004ee8:	1c57      	adds	r7, r2, #1
 8004eea:	2f10      	cmp	r7, #16
 8004eec:	bfde      	ittt	le
 8004eee:	9f05      	ldrle	r7, [sp, #20]
 8004ef0:	434f      	mulle	r7, r1
 8004ef2:	9705      	strle	r7, [sp, #20]
 8004ef4:	e7f6      	b.n	8004ee4 <_strtod_l+0x25c>
 8004ef6:	2c10      	cmp	r4, #16
 8004ef8:	bfdf      	itttt	le
 8004efa:	220a      	movle	r2, #10
 8004efc:	9905      	ldrle	r1, [sp, #20]
 8004efe:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f02:	9305      	strle	r3, [sp, #20]
 8004f04:	e7e0      	b.n	8004ec8 <_strtod_l+0x240>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2201      	movs	r2, #1
 8004f0a:	9304      	str	r3, [sp, #16]
 8004f0c:	e77c      	b.n	8004e08 <_strtod_l+0x180>
 8004f0e:	2700      	movs	r7, #0
 8004f10:	1cb3      	adds	r3, r6, #2
 8004f12:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f14:	78b3      	ldrb	r3, [r6, #2]
 8004f16:	e784      	b.n	8004e22 <_strtod_l+0x19a>
 8004f18:	2701      	movs	r7, #1
 8004f1a:	e7f9      	b.n	8004f10 <_strtod_l+0x288>
 8004f1c:	08008ea8 	.word	0x08008ea8
 8004f20:	08008c54 	.word	0x08008c54
 8004f24:	7ff00000 	.word	0x7ff00000
 8004f28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	911b      	str	r1, [sp, #108]	; 0x6c
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b30      	cmp	r3, #48	; 0x30
 8004f32:	d0f9      	beq.n	8004f28 <_strtod_l+0x2a0>
 8004f34:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004f38:	2908      	cmp	r1, #8
 8004f3a:	f63f af78 	bhi.w	8004e2e <_strtod_l+0x1a6>
 8004f3e:	f04f 0e0a 	mov.w	lr, #10
 8004f42:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004f46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f48:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f4c:	1c59      	adds	r1, r3, #1
 8004f4e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004f56:	2d09      	cmp	r5, #9
 8004f58:	d935      	bls.n	8004fc6 <_strtod_l+0x33e>
 8004f5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f5c:	1b49      	subs	r1, r1, r5
 8004f5e:	2908      	cmp	r1, #8
 8004f60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004f64:	dc02      	bgt.n	8004f6c <_strtod_l+0x2e4>
 8004f66:	4565      	cmp	r5, ip
 8004f68:	bfa8      	it	ge
 8004f6a:	4665      	movge	r5, ip
 8004f6c:	b107      	cbz	r7, 8004f70 <_strtod_l+0x2e8>
 8004f6e:	426d      	negs	r5, r5
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	d14c      	bne.n	800500e <_strtod_l+0x386>
 8004f74:	9907      	ldr	r1, [sp, #28]
 8004f76:	4301      	orrs	r1, r0
 8004f78:	f47f aec7 	bne.w	8004d0a <_strtod_l+0x82>
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	f47f aee0 	bne.w	8004d42 <_strtod_l+0xba>
 8004f82:	2b69      	cmp	r3, #105	; 0x69
 8004f84:	d026      	beq.n	8004fd4 <_strtod_l+0x34c>
 8004f86:	dc23      	bgt.n	8004fd0 <_strtod_l+0x348>
 8004f88:	2b49      	cmp	r3, #73	; 0x49
 8004f8a:	d023      	beq.n	8004fd4 <_strtod_l+0x34c>
 8004f8c:	2b4e      	cmp	r3, #78	; 0x4e
 8004f8e:	f47f aed8 	bne.w	8004d42 <_strtod_l+0xba>
 8004f92:	499c      	ldr	r1, [pc, #624]	; (8005204 <_strtod_l+0x57c>)
 8004f94:	a81b      	add	r0, sp, #108	; 0x6c
 8004f96:	f001 fe2b 	bl	8006bf0 <__match>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f43f aed1 	beq.w	8004d42 <_strtod_l+0xba>
 8004fa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b28      	cmp	r3, #40	; 0x28
 8004fa6:	d12c      	bne.n	8005002 <_strtod_l+0x37a>
 8004fa8:	4997      	ldr	r1, [pc, #604]	; (8005208 <_strtod_l+0x580>)
 8004faa:	aa1e      	add	r2, sp, #120	; 0x78
 8004fac:	a81b      	add	r0, sp, #108	; 0x6c
 8004fae:	f001 fe33 	bl	8006c18 <__hexnan>
 8004fb2:	2805      	cmp	r0, #5
 8004fb4:	d125      	bne.n	8005002 <_strtod_l+0x37a>
 8004fb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fb8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004fbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004fc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004fc4:	e6a1      	b.n	8004d0a <_strtod_l+0x82>
 8004fc6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004fca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004fce:	e7bc      	b.n	8004f4a <_strtod_l+0x2c2>
 8004fd0:	2b6e      	cmp	r3, #110	; 0x6e
 8004fd2:	e7dc      	b.n	8004f8e <_strtod_l+0x306>
 8004fd4:	498d      	ldr	r1, [pc, #564]	; (800520c <_strtod_l+0x584>)
 8004fd6:	a81b      	add	r0, sp, #108	; 0x6c
 8004fd8:	f001 fe0a 	bl	8006bf0 <__match>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f43f aeb0 	beq.w	8004d42 <_strtod_l+0xba>
 8004fe2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fe4:	498a      	ldr	r1, [pc, #552]	; (8005210 <_strtod_l+0x588>)
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	a81b      	add	r0, sp, #108	; 0x6c
 8004fea:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fec:	f001 fe00 	bl	8006bf0 <__match>
 8004ff0:	b910      	cbnz	r0, 8004ff8 <_strtod_l+0x370>
 8004ff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ff8:	f04f 0800 	mov.w	r8, #0
 8004ffc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005220 <_strtod_l+0x598>
 8005000:	e683      	b.n	8004d0a <_strtod_l+0x82>
 8005002:	4884      	ldr	r0, [pc, #528]	; (8005214 <_strtod_l+0x58c>)
 8005004:	f002 fda6 	bl	8007b54 <nan>
 8005008:	4680      	mov	r8, r0
 800500a:	4689      	mov	r9, r1
 800500c:	e67d      	b.n	8004d0a <_strtod_l+0x82>
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	f1bb 0f00 	cmp.w	fp, #0
 8005014:	bf08      	it	eq
 8005016:	46a3      	moveq	fp, r4
 8005018:	1aeb      	subs	r3, r5, r3
 800501a:	2c10      	cmp	r4, #16
 800501c:	9806      	ldr	r0, [sp, #24]
 800501e:	4626      	mov	r6, r4
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	bfa8      	it	ge
 8005024:	2610      	movge	r6, #16
 8005026:	f7fb f9dd 	bl	80003e4 <__aeabi_ui2d>
 800502a:	2c09      	cmp	r4, #9
 800502c:	4680      	mov	r8, r0
 800502e:	4689      	mov	r9, r1
 8005030:	dd13      	ble.n	800505a <_strtod_l+0x3d2>
 8005032:	4b79      	ldr	r3, [pc, #484]	; (8005218 <_strtod_l+0x590>)
 8005034:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005038:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800503c:	f7fb fa4c 	bl	80004d8 <__aeabi_dmul>
 8005040:	4680      	mov	r8, r0
 8005042:	9805      	ldr	r0, [sp, #20]
 8005044:	4689      	mov	r9, r1
 8005046:	f7fb f9cd 	bl	80003e4 <__aeabi_ui2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb f88b 	bl	800016c <__adddf3>
 8005056:	4680      	mov	r8, r0
 8005058:	4689      	mov	r9, r1
 800505a:	2c0f      	cmp	r4, #15
 800505c:	dc36      	bgt.n	80050cc <_strtod_l+0x444>
 800505e:	9b07      	ldr	r3, [sp, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f43f ae52 	beq.w	8004d0a <_strtod_l+0x82>
 8005066:	dd22      	ble.n	80050ae <_strtod_l+0x426>
 8005068:	2b16      	cmp	r3, #22
 800506a:	dc09      	bgt.n	8005080 <_strtod_l+0x3f8>
 800506c:	4c6a      	ldr	r4, [pc, #424]	; (8005218 <_strtod_l+0x590>)
 800506e:	4642      	mov	r2, r8
 8005070:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005074:	464b      	mov	r3, r9
 8005076:	e9d4 0100 	ldrd	r0, r1, [r4]
 800507a:	f7fb fa2d 	bl	80004d8 <__aeabi_dmul>
 800507e:	e7c3      	b.n	8005008 <_strtod_l+0x380>
 8005080:	9a07      	ldr	r2, [sp, #28]
 8005082:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005086:	4293      	cmp	r3, r2
 8005088:	db20      	blt.n	80050cc <_strtod_l+0x444>
 800508a:	4d63      	ldr	r5, [pc, #396]	; (8005218 <_strtod_l+0x590>)
 800508c:	f1c4 040f 	rsb	r4, r4, #15
 8005090:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005094:	4642      	mov	r2, r8
 8005096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509a:	464b      	mov	r3, r9
 800509c:	f7fb fa1c 	bl	80004d8 <__aeabi_dmul>
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	1b1c      	subs	r4, r3, r4
 80050a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80050a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050ac:	e7e5      	b.n	800507a <_strtod_l+0x3f2>
 80050ae:	9b07      	ldr	r3, [sp, #28]
 80050b0:	3316      	adds	r3, #22
 80050b2:	db0b      	blt.n	80050cc <_strtod_l+0x444>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	4a58      	ldr	r2, [pc, #352]	; (8005218 <_strtod_l+0x590>)
 80050b8:	1b5d      	subs	r5, r3, r5
 80050ba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80050be:	4640      	mov	r0, r8
 80050c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050c4:	4649      	mov	r1, r9
 80050c6:	f7fb fb31 	bl	800072c <__aeabi_ddiv>
 80050ca:	e79d      	b.n	8005008 <_strtod_l+0x380>
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	1ba6      	subs	r6, r4, r6
 80050d0:	441e      	add	r6, r3
 80050d2:	2e00      	cmp	r6, #0
 80050d4:	dd71      	ble.n	80051ba <_strtod_l+0x532>
 80050d6:	f016 030f 	ands.w	r3, r6, #15
 80050da:	d00a      	beq.n	80050f2 <_strtod_l+0x46a>
 80050dc:	494e      	ldr	r1, [pc, #312]	; (8005218 <_strtod_l+0x590>)
 80050de:	4642      	mov	r2, r8
 80050e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e8:	464b      	mov	r3, r9
 80050ea:	f7fb f9f5 	bl	80004d8 <__aeabi_dmul>
 80050ee:	4680      	mov	r8, r0
 80050f0:	4689      	mov	r9, r1
 80050f2:	f036 060f 	bics.w	r6, r6, #15
 80050f6:	d050      	beq.n	800519a <_strtod_l+0x512>
 80050f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80050fc:	dd27      	ble.n	800514e <_strtod_l+0x4c6>
 80050fe:	f04f 0b00 	mov.w	fp, #0
 8005102:	f8cd b010 	str.w	fp, [sp, #16]
 8005106:	f8cd b020 	str.w	fp, [sp, #32]
 800510a:	f8cd b018 	str.w	fp, [sp, #24]
 800510e:	2322      	movs	r3, #34	; 0x22
 8005110:	f04f 0800 	mov.w	r8, #0
 8005114:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005220 <_strtod_l+0x598>
 8005118:	f8ca 3000 	str.w	r3, [sl]
 800511c:	9b08      	ldr	r3, [sp, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f43f adf3 	beq.w	8004d0a <_strtod_l+0x82>
 8005124:	4650      	mov	r0, sl
 8005126:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005128:	f001 fe8c 	bl	8006e44 <_Bfree>
 800512c:	4650      	mov	r0, sl
 800512e:	9906      	ldr	r1, [sp, #24]
 8005130:	f001 fe88 	bl	8006e44 <_Bfree>
 8005134:	4650      	mov	r0, sl
 8005136:	9904      	ldr	r1, [sp, #16]
 8005138:	f001 fe84 	bl	8006e44 <_Bfree>
 800513c:	4650      	mov	r0, sl
 800513e:	9908      	ldr	r1, [sp, #32]
 8005140:	f001 fe80 	bl	8006e44 <_Bfree>
 8005144:	4659      	mov	r1, fp
 8005146:	4650      	mov	r0, sl
 8005148:	f001 fe7c 	bl	8006e44 <_Bfree>
 800514c:	e5dd      	b.n	8004d0a <_strtod_l+0x82>
 800514e:	2300      	movs	r3, #0
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	461f      	mov	r7, r3
 8005156:	1136      	asrs	r6, r6, #4
 8005158:	2e01      	cmp	r6, #1
 800515a:	dc21      	bgt.n	80051a0 <_strtod_l+0x518>
 800515c:	b10b      	cbz	r3, 8005162 <_strtod_l+0x4da>
 800515e:	4680      	mov	r8, r0
 8005160:	4689      	mov	r9, r1
 8005162:	4b2e      	ldr	r3, [pc, #184]	; (800521c <_strtod_l+0x594>)
 8005164:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005168:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800516c:	4642      	mov	r2, r8
 800516e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005172:	464b      	mov	r3, r9
 8005174:	f7fb f9b0 	bl	80004d8 <__aeabi_dmul>
 8005178:	4b29      	ldr	r3, [pc, #164]	; (8005220 <_strtod_l+0x598>)
 800517a:	460a      	mov	r2, r1
 800517c:	400b      	ands	r3, r1
 800517e:	4929      	ldr	r1, [pc, #164]	; (8005224 <_strtod_l+0x59c>)
 8005180:	4680      	mov	r8, r0
 8005182:	428b      	cmp	r3, r1
 8005184:	d8bb      	bhi.n	80050fe <_strtod_l+0x476>
 8005186:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800518a:	428b      	cmp	r3, r1
 800518c:	bf86      	itte	hi
 800518e:	f04f 38ff 	movhi.w	r8, #4294967295
 8005192:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005228 <_strtod_l+0x5a0>
 8005196:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800519a:	2300      	movs	r3, #0
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	e07e      	b.n	800529e <_strtod_l+0x616>
 80051a0:	07f2      	lsls	r2, r6, #31
 80051a2:	d507      	bpl.n	80051b4 <_strtod_l+0x52c>
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <_strtod_l+0x594>)
 80051a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb f993 	bl	80004d8 <__aeabi_dmul>
 80051b2:	2301      	movs	r3, #1
 80051b4:	3701      	adds	r7, #1
 80051b6:	1076      	asrs	r6, r6, #1
 80051b8:	e7ce      	b.n	8005158 <_strtod_l+0x4d0>
 80051ba:	d0ee      	beq.n	800519a <_strtod_l+0x512>
 80051bc:	4276      	negs	r6, r6
 80051be:	f016 020f 	ands.w	r2, r6, #15
 80051c2:	d00a      	beq.n	80051da <_strtod_l+0x552>
 80051c4:	4b14      	ldr	r3, [pc, #80]	; (8005218 <_strtod_l+0x590>)
 80051c6:	4640      	mov	r0, r8
 80051c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051cc:	4649      	mov	r1, r9
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f7fb faab 	bl	800072c <__aeabi_ddiv>
 80051d6:	4680      	mov	r8, r0
 80051d8:	4689      	mov	r9, r1
 80051da:	1136      	asrs	r6, r6, #4
 80051dc:	d0dd      	beq.n	800519a <_strtod_l+0x512>
 80051de:	2e1f      	cmp	r6, #31
 80051e0:	dd24      	ble.n	800522c <_strtod_l+0x5a4>
 80051e2:	f04f 0b00 	mov.w	fp, #0
 80051e6:	f8cd b010 	str.w	fp, [sp, #16]
 80051ea:	f8cd b020 	str.w	fp, [sp, #32]
 80051ee:	f8cd b018 	str.w	fp, [sp, #24]
 80051f2:	2322      	movs	r3, #34	; 0x22
 80051f4:	f04f 0800 	mov.w	r8, #0
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	f8ca 3000 	str.w	r3, [sl]
 8005200:	e78c      	b.n	800511c <_strtod_l+0x494>
 8005202:	bf00      	nop
 8005204:	08008c25 	.word	0x08008c25
 8005208:	08008c68 	.word	0x08008c68
 800520c:	08008c1d 	.word	0x08008c1d
 8005210:	08008dac 	.word	0x08008dac
 8005214:	08009068 	.word	0x08009068
 8005218:	08008f48 	.word	0x08008f48
 800521c:	08008f20 	.word	0x08008f20
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	7ca00000 	.word	0x7ca00000
 8005228:	7fefffff 	.word	0x7fefffff
 800522c:	f016 0310 	ands.w	r3, r6, #16
 8005230:	bf18      	it	ne
 8005232:	236a      	movne	r3, #106	; 0x6a
 8005234:	4640      	mov	r0, r8
 8005236:	9305      	str	r3, [sp, #20]
 8005238:	4649      	mov	r1, r9
 800523a:	2300      	movs	r3, #0
 800523c:	4fb2      	ldr	r7, [pc, #712]	; (8005508 <_strtod_l+0x880>)
 800523e:	07f2      	lsls	r2, r6, #31
 8005240:	d504      	bpl.n	800524c <_strtod_l+0x5c4>
 8005242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005246:	f7fb f947 	bl	80004d8 <__aeabi_dmul>
 800524a:	2301      	movs	r3, #1
 800524c:	1076      	asrs	r6, r6, #1
 800524e:	f107 0708 	add.w	r7, r7, #8
 8005252:	d1f4      	bne.n	800523e <_strtod_l+0x5b6>
 8005254:	b10b      	cbz	r3, 800525a <_strtod_l+0x5d2>
 8005256:	4680      	mov	r8, r0
 8005258:	4689      	mov	r9, r1
 800525a:	9b05      	ldr	r3, [sp, #20]
 800525c:	b1bb      	cbz	r3, 800528e <_strtod_l+0x606>
 800525e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005262:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005266:	2b00      	cmp	r3, #0
 8005268:	4649      	mov	r1, r9
 800526a:	dd10      	ble.n	800528e <_strtod_l+0x606>
 800526c:	2b1f      	cmp	r3, #31
 800526e:	f340 812b 	ble.w	80054c8 <_strtod_l+0x840>
 8005272:	2b34      	cmp	r3, #52	; 0x34
 8005274:	bfd8      	it	le
 8005276:	f04f 32ff 	movle.w	r2, #4294967295
 800527a:	f04f 0800 	mov.w	r8, #0
 800527e:	bfcf      	iteee	gt
 8005280:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005284:	3b20      	suble	r3, #32
 8005286:	fa02 f303 	lslle.w	r3, r2, r3
 800528a:	ea03 0901 	andle.w	r9, r3, r1
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb fb87 	bl	80009a8 <__aeabi_dcmpeq>
 800529a:	2800      	cmp	r0, #0
 800529c:	d1a1      	bne.n	80051e2 <_strtod_l+0x55a>
 800529e:	9b06      	ldr	r3, [sp, #24]
 80052a0:	465a      	mov	r2, fp
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4650      	mov	r0, sl
 80052a6:	4623      	mov	r3, r4
 80052a8:	9908      	ldr	r1, [sp, #32]
 80052aa:	f001 fe37 	bl	8006f1c <__s2b>
 80052ae:	9008      	str	r0, [sp, #32]
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f43f af24 	beq.w	80050fe <_strtod_l+0x476>
 80052b6:	9b04      	ldr	r3, [sp, #16]
 80052b8:	f04f 0b00 	mov.w	fp, #0
 80052bc:	1b5d      	subs	r5, r3, r5
 80052be:	9b07      	ldr	r3, [sp, #28]
 80052c0:	f8cd b010 	str.w	fp, [sp, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bfb4      	ite	lt
 80052c8:	462b      	movlt	r3, r5
 80052ca:	2300      	movge	r3, #0
 80052cc:	930e      	str	r3, [sp, #56]	; 0x38
 80052ce:	9b07      	ldr	r3, [sp, #28]
 80052d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052d4:	9316      	str	r3, [sp, #88]	; 0x58
 80052d6:	9b08      	ldr	r3, [sp, #32]
 80052d8:	4650      	mov	r0, sl
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	f001 fd72 	bl	8006dc4 <_Balloc>
 80052e0:	9006      	str	r0, [sp, #24]
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f43f af13 	beq.w	800510e <_strtod_l+0x486>
 80052e8:	9b08      	ldr	r3, [sp, #32]
 80052ea:	300c      	adds	r0, #12
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	f103 010c 	add.w	r1, r3, #12
 80052f2:	3202      	adds	r2, #2
 80052f4:	0092      	lsls	r2, r2, #2
 80052f6:	f001 fd57 	bl	8006da8 <memcpy>
 80052fa:	ab1e      	add	r3, sp, #120	; 0x78
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4642      	mov	r2, r8
 8005304:	464b      	mov	r3, r9
 8005306:	4650      	mov	r0, sl
 8005308:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800530c:	f002 f944 	bl	8007598 <__d2b>
 8005310:	901c      	str	r0, [sp, #112]	; 0x70
 8005312:	2800      	cmp	r0, #0
 8005314:	f43f aefb 	beq.w	800510e <_strtod_l+0x486>
 8005318:	2101      	movs	r1, #1
 800531a:	4650      	mov	r0, sl
 800531c:	f001 fe96 	bl	800704c <__i2b>
 8005320:	4603      	mov	r3, r0
 8005322:	9004      	str	r0, [sp, #16]
 8005324:	2800      	cmp	r0, #0
 8005326:	f43f aef2 	beq.w	800510e <_strtod_l+0x486>
 800532a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800532c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800532e:	2d00      	cmp	r5, #0
 8005330:	bfab      	itete	ge
 8005332:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005334:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005336:	18ee      	addge	r6, r5, r3
 8005338:	1b5c      	sublt	r4, r3, r5
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	bfa8      	it	ge
 800533e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005340:	eba5 0503 	sub.w	r5, r5, r3
 8005344:	4415      	add	r5, r2
 8005346:	4b71      	ldr	r3, [pc, #452]	; (800550c <_strtod_l+0x884>)
 8005348:	f105 35ff 	add.w	r5, r5, #4294967295
 800534c:	bfb8      	it	lt
 800534e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005350:	429d      	cmp	r5, r3
 8005352:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005356:	f280 80c9 	bge.w	80054ec <_strtod_l+0x864>
 800535a:	1b5b      	subs	r3, r3, r5
 800535c:	2b1f      	cmp	r3, #31
 800535e:	f04f 0701 	mov.w	r7, #1
 8005362:	eba2 0203 	sub.w	r2, r2, r3
 8005366:	f300 80b6 	bgt.w	80054d6 <_strtod_l+0x84e>
 800536a:	2500      	movs	r5, #0
 800536c:	fa07 f303 	lsl.w	r3, r7, r3
 8005370:	930f      	str	r3, [sp, #60]	; 0x3c
 8005372:	18b7      	adds	r7, r6, r2
 8005374:	9b05      	ldr	r3, [sp, #20]
 8005376:	42be      	cmp	r6, r7
 8005378:	4414      	add	r4, r2
 800537a:	441c      	add	r4, r3
 800537c:	4633      	mov	r3, r6
 800537e:	bfa8      	it	ge
 8005380:	463b      	movge	r3, r7
 8005382:	42a3      	cmp	r3, r4
 8005384:	bfa8      	it	ge
 8005386:	4623      	movge	r3, r4
 8005388:	2b00      	cmp	r3, #0
 800538a:	bfc2      	ittt	gt
 800538c:	1aff      	subgt	r7, r7, r3
 800538e:	1ae4      	subgt	r4, r4, r3
 8005390:	1af6      	subgt	r6, r6, r3
 8005392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd17      	ble.n	80053c8 <_strtod_l+0x740>
 8005398:	461a      	mov	r2, r3
 800539a:	4650      	mov	r0, sl
 800539c:	9904      	ldr	r1, [sp, #16]
 800539e:	f001 ff0f 	bl	80071c0 <__pow5mult>
 80053a2:	9004      	str	r0, [sp, #16]
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f43f aeb2 	beq.w	800510e <_strtod_l+0x486>
 80053aa:	4601      	mov	r1, r0
 80053ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80053ae:	4650      	mov	r0, sl
 80053b0:	f001 fe62 	bl	8007078 <__multiply>
 80053b4:	9009      	str	r0, [sp, #36]	; 0x24
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f aea9 	beq.w	800510e <_strtod_l+0x486>
 80053bc:	4650      	mov	r0, sl
 80053be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053c0:	f001 fd40 	bl	8006e44 <_Bfree>
 80053c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c6:	931c      	str	r3, [sp, #112]	; 0x70
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	f300 8093 	bgt.w	80054f4 <_strtod_l+0x86c>
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dd08      	ble.n	80053e6 <_strtod_l+0x75e>
 80053d4:	4650      	mov	r0, sl
 80053d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053d8:	9906      	ldr	r1, [sp, #24]
 80053da:	f001 fef1 	bl	80071c0 <__pow5mult>
 80053de:	9006      	str	r0, [sp, #24]
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f43f ae94 	beq.w	800510e <_strtod_l+0x486>
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	dd08      	ble.n	80053fc <_strtod_l+0x774>
 80053ea:	4622      	mov	r2, r4
 80053ec:	4650      	mov	r0, sl
 80053ee:	9906      	ldr	r1, [sp, #24]
 80053f0:	f001 ff40 	bl	8007274 <__lshift>
 80053f4:	9006      	str	r0, [sp, #24]
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f43f ae89 	beq.w	800510e <_strtod_l+0x486>
 80053fc:	2e00      	cmp	r6, #0
 80053fe:	dd08      	ble.n	8005412 <_strtod_l+0x78a>
 8005400:	4632      	mov	r2, r6
 8005402:	4650      	mov	r0, sl
 8005404:	9904      	ldr	r1, [sp, #16]
 8005406:	f001 ff35 	bl	8007274 <__lshift>
 800540a:	9004      	str	r0, [sp, #16]
 800540c:	2800      	cmp	r0, #0
 800540e:	f43f ae7e 	beq.w	800510e <_strtod_l+0x486>
 8005412:	4650      	mov	r0, sl
 8005414:	9a06      	ldr	r2, [sp, #24]
 8005416:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005418:	f001 ffb4 	bl	8007384 <__mdiff>
 800541c:	4683      	mov	fp, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f ae75 	beq.w	800510e <_strtod_l+0x486>
 8005424:	2400      	movs	r4, #0
 8005426:	68c3      	ldr	r3, [r0, #12]
 8005428:	9904      	ldr	r1, [sp, #16]
 800542a:	60c4      	str	r4, [r0, #12]
 800542c:	930d      	str	r3, [sp, #52]	; 0x34
 800542e:	f001 ff8d 	bl	800734c <__mcmp>
 8005432:	42a0      	cmp	r0, r4
 8005434:	da70      	bge.n	8005518 <_strtod_l+0x890>
 8005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005438:	ea53 0308 	orrs.w	r3, r3, r8
 800543c:	f040 8096 	bne.w	800556c <_strtod_l+0x8e4>
 8005440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 8091 	bne.w	800556c <_strtod_l+0x8e4>
 800544a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800544e:	0d1b      	lsrs	r3, r3, #20
 8005450:	051b      	lsls	r3, r3, #20
 8005452:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005456:	f240 8089 	bls.w	800556c <_strtod_l+0x8e4>
 800545a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800545e:	b923      	cbnz	r3, 800546a <_strtod_l+0x7e2>
 8005460:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005464:	2b01      	cmp	r3, #1
 8005466:	f340 8081 	ble.w	800556c <_strtod_l+0x8e4>
 800546a:	4659      	mov	r1, fp
 800546c:	2201      	movs	r2, #1
 800546e:	4650      	mov	r0, sl
 8005470:	f001 ff00 	bl	8007274 <__lshift>
 8005474:	9904      	ldr	r1, [sp, #16]
 8005476:	4683      	mov	fp, r0
 8005478:	f001 ff68 	bl	800734c <__mcmp>
 800547c:	2800      	cmp	r0, #0
 800547e:	dd75      	ble.n	800556c <_strtod_l+0x8e4>
 8005480:	9905      	ldr	r1, [sp, #20]
 8005482:	464b      	mov	r3, r9
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <_strtod_l+0x888>)
 8005486:	2900      	cmp	r1, #0
 8005488:	f000 8091 	beq.w	80055ae <_strtod_l+0x926>
 800548c:	ea02 0109 	and.w	r1, r2, r9
 8005490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005494:	f300 808b 	bgt.w	80055ae <_strtod_l+0x926>
 8005498:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800549c:	f77f aea9 	ble.w	80051f2 <_strtod_l+0x56a>
 80054a0:	2300      	movs	r3, #0
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <_strtod_l+0x88c>)
 80054a4:	4640      	mov	r0, r8
 80054a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80054aa:	4649      	mov	r1, r9
 80054ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80054b0:	f7fb f812 	bl	80004d8 <__aeabi_dmul>
 80054b4:	460b      	mov	r3, r1
 80054b6:	4303      	orrs	r3, r0
 80054b8:	bf08      	it	eq
 80054ba:	2322      	moveq	r3, #34	; 0x22
 80054bc:	4680      	mov	r8, r0
 80054be:	4689      	mov	r9, r1
 80054c0:	bf08      	it	eq
 80054c2:	f8ca 3000 	streq.w	r3, [sl]
 80054c6:	e62d      	b.n	8005124 <_strtod_l+0x49c>
 80054c8:	f04f 32ff 	mov.w	r2, #4294967295
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	ea03 0808 	and.w	r8, r3, r8
 80054d4:	e6db      	b.n	800528e <_strtod_l+0x606>
 80054d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80054da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80054de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80054e2:	35e2      	adds	r5, #226	; 0xe2
 80054e4:	fa07 f505 	lsl.w	r5, r7, r5
 80054e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80054ea:	e742      	b.n	8005372 <_strtod_l+0x6ea>
 80054ec:	2301      	movs	r3, #1
 80054ee:	2500      	movs	r5, #0
 80054f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f2:	e73e      	b.n	8005372 <_strtod_l+0x6ea>
 80054f4:	463a      	mov	r2, r7
 80054f6:	4650      	mov	r0, sl
 80054f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054fa:	f001 febb 	bl	8007274 <__lshift>
 80054fe:	901c      	str	r0, [sp, #112]	; 0x70
 8005500:	2800      	cmp	r0, #0
 8005502:	f47f af64 	bne.w	80053ce <_strtod_l+0x746>
 8005506:	e602      	b.n	800510e <_strtod_l+0x486>
 8005508:	08008c80 	.word	0x08008c80
 800550c:	fffffc02 	.word	0xfffffc02
 8005510:	7ff00000 	.word	0x7ff00000
 8005514:	39500000 	.word	0x39500000
 8005518:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800551c:	d166      	bne.n	80055ec <_strtod_l+0x964>
 800551e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005524:	b35a      	cbz	r2, 800557e <_strtod_l+0x8f6>
 8005526:	4a9c      	ldr	r2, [pc, #624]	; (8005798 <_strtod_l+0xb10>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d12c      	bne.n	8005586 <_strtod_l+0x8fe>
 800552c:	9b05      	ldr	r3, [sp, #20]
 800552e:	4640      	mov	r0, r8
 8005530:	b303      	cbz	r3, 8005574 <_strtod_l+0x8ec>
 8005532:	464b      	mov	r3, r9
 8005534:	4a99      	ldr	r2, [pc, #612]	; (800579c <_strtod_l+0xb14>)
 8005536:	f04f 31ff 	mov.w	r1, #4294967295
 800553a:	401a      	ands	r2, r3
 800553c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005540:	d81b      	bhi.n	800557a <_strtod_l+0x8f2>
 8005542:	0d12      	lsrs	r2, r2, #20
 8005544:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	4298      	cmp	r0, r3
 800554e:	d11a      	bne.n	8005586 <_strtod_l+0x8fe>
 8005550:	4b93      	ldr	r3, [pc, #588]	; (80057a0 <_strtod_l+0xb18>)
 8005552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005554:	429a      	cmp	r2, r3
 8005556:	d102      	bne.n	800555e <_strtod_l+0x8d6>
 8005558:	3001      	adds	r0, #1
 800555a:	f43f add8 	beq.w	800510e <_strtod_l+0x486>
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	4b8e      	ldr	r3, [pc, #568]	; (800579c <_strtod_l+0xb14>)
 8005564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005566:	401a      	ands	r2, r3
 8005568:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800556c:	9b05      	ldr	r3, [sp, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d196      	bne.n	80054a0 <_strtod_l+0x818>
 8005572:	e5d7      	b.n	8005124 <_strtod_l+0x49c>
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	e7e8      	b.n	800554c <_strtod_l+0x8c4>
 800557a:	460b      	mov	r3, r1
 800557c:	e7e6      	b.n	800554c <_strtod_l+0x8c4>
 800557e:	ea53 0308 	orrs.w	r3, r3, r8
 8005582:	f43f af7d 	beq.w	8005480 <_strtod_l+0x7f8>
 8005586:	b1e5      	cbz	r5, 80055c2 <_strtod_l+0x93a>
 8005588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558a:	421d      	tst	r5, r3
 800558c:	d0ee      	beq.n	800556c <_strtod_l+0x8e4>
 800558e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	9a05      	ldr	r2, [sp, #20]
 8005596:	b1c3      	cbz	r3, 80055ca <_strtod_l+0x942>
 8005598:	f7ff fb52 	bl	8004c40 <sulp>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055a4:	f7fa fde2 	bl	800016c <__adddf3>
 80055a8:	4680      	mov	r8, r0
 80055aa:	4689      	mov	r9, r1
 80055ac:	e7de      	b.n	800556c <_strtod_l+0x8e4>
 80055ae:	4013      	ands	r3, r2
 80055b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055b4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055b8:	f04f 38ff 	mov.w	r8, #4294967295
 80055bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80055c0:	e7d4      	b.n	800556c <_strtod_l+0x8e4>
 80055c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055c4:	ea13 0f08 	tst.w	r3, r8
 80055c8:	e7e0      	b.n	800558c <_strtod_l+0x904>
 80055ca:	f7ff fb39 	bl	8004c40 <sulp>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055d6:	f7fa fdc7 	bl	8000168 <__aeabi_dsub>
 80055da:	2200      	movs	r2, #0
 80055dc:	2300      	movs	r3, #0
 80055de:	4680      	mov	r8, r0
 80055e0:	4689      	mov	r9, r1
 80055e2:	f7fb f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0c0      	beq.n	800556c <_strtod_l+0x8e4>
 80055ea:	e602      	b.n	80051f2 <_strtod_l+0x56a>
 80055ec:	4658      	mov	r0, fp
 80055ee:	9904      	ldr	r1, [sp, #16]
 80055f0:	f002 f82e 	bl	8007650 <__ratio>
 80055f4:	2200      	movs	r2, #0
 80055f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	f7fb f9e7 	bl	80009d0 <__aeabi_dcmple>
 8005602:	2800      	cmp	r0, #0
 8005604:	d075      	beq.n	80056f2 <_strtod_l+0xa6a>
 8005606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d047      	beq.n	800569c <_strtod_l+0xa14>
 800560c:	2600      	movs	r6, #0
 800560e:	4f65      	ldr	r7, [pc, #404]	; (80057a4 <_strtod_l+0xb1c>)
 8005610:	4d64      	ldr	r5, [pc, #400]	; (80057a4 <_strtod_l+0xb1c>)
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005618:	0d1b      	lsrs	r3, r3, #20
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	930f      	str	r3, [sp, #60]	; 0x3c
 800561e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <_strtod_l+0xb20>)
 8005622:	429a      	cmp	r2, r3
 8005624:	f040 80c8 	bne.w	80057b8 <_strtod_l+0xb30>
 8005628:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800562c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005632:	4640      	mov	r0, r8
 8005634:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005638:	4649      	mov	r1, r9
 800563a:	f001 ff33 	bl	80074a4 <__ulp>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	f7fa ff47 	bl	80004d8 <__aeabi_dmul>
 800564a:	4642      	mov	r2, r8
 800564c:	464b      	mov	r3, r9
 800564e:	f7fa fd8d 	bl	800016c <__adddf3>
 8005652:	460b      	mov	r3, r1
 8005654:	4951      	ldr	r1, [pc, #324]	; (800579c <_strtod_l+0xb14>)
 8005656:	4a55      	ldr	r2, [pc, #340]	; (80057ac <_strtod_l+0xb24>)
 8005658:	4019      	ands	r1, r3
 800565a:	4291      	cmp	r1, r2
 800565c:	4680      	mov	r8, r0
 800565e:	d95e      	bls.n	800571e <_strtod_l+0xa96>
 8005660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005662:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005666:	4293      	cmp	r3, r2
 8005668:	d103      	bne.n	8005672 <_strtod_l+0x9ea>
 800566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566c:	3301      	adds	r3, #1
 800566e:	f43f ad4e 	beq.w	800510e <_strtod_l+0x486>
 8005672:	f04f 38ff 	mov.w	r8, #4294967295
 8005676:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80057a0 <_strtod_l+0xb18>
 800567a:	4650      	mov	r0, sl
 800567c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800567e:	f001 fbe1 	bl	8006e44 <_Bfree>
 8005682:	4650      	mov	r0, sl
 8005684:	9906      	ldr	r1, [sp, #24]
 8005686:	f001 fbdd 	bl	8006e44 <_Bfree>
 800568a:	4650      	mov	r0, sl
 800568c:	9904      	ldr	r1, [sp, #16]
 800568e:	f001 fbd9 	bl	8006e44 <_Bfree>
 8005692:	4659      	mov	r1, fp
 8005694:	4650      	mov	r0, sl
 8005696:	f001 fbd5 	bl	8006e44 <_Bfree>
 800569a:	e61c      	b.n	80052d6 <_strtod_l+0x64e>
 800569c:	f1b8 0f00 	cmp.w	r8, #0
 80056a0:	d119      	bne.n	80056d6 <_strtod_l+0xa4e>
 80056a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a8:	b9e3      	cbnz	r3, 80056e4 <_strtod_l+0xa5c>
 80056aa:	2200      	movs	r2, #0
 80056ac:	4630      	mov	r0, r6
 80056ae:	4639      	mov	r1, r7
 80056b0:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <_strtod_l+0xb1c>)
 80056b2:	f7fb f983 	bl	80009bc <__aeabi_dcmplt>
 80056b6:	b9c8      	cbnz	r0, 80056ec <_strtod_l+0xa64>
 80056b8:	2200      	movs	r2, #0
 80056ba:	4630      	mov	r0, r6
 80056bc:	4639      	mov	r1, r7
 80056be:	4b3c      	ldr	r3, [pc, #240]	; (80057b0 <_strtod_l+0xb28>)
 80056c0:	f7fa ff0a 	bl	80004d8 <__aeabi_dmul>
 80056c4:	4604      	mov	r4, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80056cc:	9418      	str	r4, [sp, #96]	; 0x60
 80056ce:	9319      	str	r3, [sp, #100]	; 0x64
 80056d0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80056d4:	e79d      	b.n	8005612 <_strtod_l+0x98a>
 80056d6:	f1b8 0f01 	cmp.w	r8, #1
 80056da:	d103      	bne.n	80056e4 <_strtod_l+0xa5c>
 80056dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f43f ad87 	beq.w	80051f2 <_strtod_l+0x56a>
 80056e4:	2600      	movs	r6, #0
 80056e6:	2400      	movs	r4, #0
 80056e8:	4f32      	ldr	r7, [pc, #200]	; (80057b4 <_strtod_l+0xb2c>)
 80056ea:	e791      	b.n	8005610 <_strtod_l+0x988>
 80056ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80056ee:	4d30      	ldr	r5, [pc, #192]	; (80057b0 <_strtod_l+0xb28>)
 80056f0:	e7ea      	b.n	80056c8 <_strtod_l+0xa40>
 80056f2:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <_strtod_l+0xb28>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	4630      	mov	r0, r6
 80056f8:	4639      	mov	r1, r7
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005700:	4604      	mov	r4, r0
 8005702:	460d      	mov	r5, r1
 8005704:	b933      	cbnz	r3, 8005714 <_strtod_l+0xa8c>
 8005706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800570a:	9010      	str	r0, [sp, #64]	; 0x40
 800570c:	9311      	str	r3, [sp, #68]	; 0x44
 800570e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005712:	e77e      	b.n	8005612 <_strtod_l+0x98a>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800571c:	e7f7      	b.n	800570e <_strtod_l+0xa86>
 800571e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1a8      	bne.n	800567a <_strtod_l+0x9f2>
 8005728:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800572c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800572e:	0d1b      	lsrs	r3, r3, #20
 8005730:	051b      	lsls	r3, r3, #20
 8005732:	429a      	cmp	r2, r3
 8005734:	d1a1      	bne.n	800567a <_strtod_l+0x9f2>
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fb fa8b 	bl	8000c54 <__aeabi_d2lz>
 800573e:	f7fa fe9d 	bl	800047c <__aeabi_l2d>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fa fd0d 	bl	8000168 <__aeabi_dsub>
 800574e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005754:	ea43 0308 	orr.w	r3, r3, r8
 8005758:	4313      	orrs	r3, r2
 800575a:	4604      	mov	r4, r0
 800575c:	460d      	mov	r5, r1
 800575e:	d066      	beq.n	800582e <_strtod_l+0xba6>
 8005760:	a309      	add	r3, pc, #36	; (adr r3, 8005788 <_strtod_l+0xb00>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fb f929 	bl	80009bc <__aeabi_dcmplt>
 800576a:	2800      	cmp	r0, #0
 800576c:	f47f acda 	bne.w	8005124 <_strtod_l+0x49c>
 8005770:	a307      	add	r3, pc, #28	; (adr r3, 8005790 <_strtod_l+0xb08>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fb f93d 	bl	80009f8 <__aeabi_dcmpgt>
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f af7b 	beq.w	800567a <_strtod_l+0x9f2>
 8005784:	e4ce      	b.n	8005124 <_strtod_l+0x49c>
 8005786:	bf00      	nop
 8005788:	94a03595 	.word	0x94a03595
 800578c:	3fdfffff 	.word	0x3fdfffff
 8005790:	35afe535 	.word	0x35afe535
 8005794:	3fe00000 	.word	0x3fe00000
 8005798:	000fffff 	.word	0x000fffff
 800579c:	7ff00000 	.word	0x7ff00000
 80057a0:	7fefffff 	.word	0x7fefffff
 80057a4:	3ff00000 	.word	0x3ff00000
 80057a8:	7fe00000 	.word	0x7fe00000
 80057ac:	7c9fffff 	.word	0x7c9fffff
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	bff00000 	.word	0xbff00000
 80057b8:	9b05      	ldr	r3, [sp, #20]
 80057ba:	b313      	cbz	r3, 8005802 <_strtod_l+0xb7a>
 80057bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057c2:	d81e      	bhi.n	8005802 <_strtod_l+0xb7a>
 80057c4:	a326      	add	r3, pc, #152	; (adr r3, 8005860 <_strtod_l+0xbd8>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fb f8ff 	bl	80009d0 <__aeabi_dcmple>
 80057d2:	b190      	cbz	r0, 80057fa <_strtod_l+0xb72>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7fb f956 	bl	8000a88 <__aeabi_d2uiz>
 80057dc:	2801      	cmp	r0, #1
 80057de:	bf38      	it	cc
 80057e0:	2001      	movcc	r0, #1
 80057e2:	f7fa fdff 	bl	80003e4 <__aeabi_ui2d>
 80057e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e8:	4604      	mov	r4, r0
 80057ea:	460d      	mov	r5, r1
 80057ec:	b9d3      	cbnz	r3, 8005824 <_strtod_l+0xb9c>
 80057ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057f2:	9012      	str	r0, [sp, #72]	; 0x48
 80057f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80057f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80057fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005800:	1a9f      	subs	r7, r3, r2
 8005802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005806:	f001 fe4d 	bl	80074a4 <__ulp>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fe61 	bl	80004d8 <__aeabi_dmul>
 8005816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800581a:	f7fa fca7 	bl	800016c <__adddf3>
 800581e:	4680      	mov	r8, r0
 8005820:	4689      	mov	r9, r1
 8005822:	e77e      	b.n	8005722 <_strtod_l+0xa9a>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800582c:	e7e3      	b.n	80057f6 <_strtod_l+0xb6e>
 800582e:	a30e      	add	r3, pc, #56	; (adr r3, 8005868 <_strtod_l+0xbe0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fb f8c2 	bl	80009bc <__aeabi_dcmplt>
 8005838:	e7a1      	b.n	800577e <_strtod_l+0xaf6>
 800583a:	2300      	movs	r3, #0
 800583c:	930c      	str	r3, [sp, #48]	; 0x30
 800583e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005840:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	f7ff ba65 	b.w	8004d12 <_strtod_l+0x8a>
 8005848:	2b65      	cmp	r3, #101	; 0x65
 800584a:	f43f ab5c 	beq.w	8004f06 <_strtod_l+0x27e>
 800584e:	2b45      	cmp	r3, #69	; 0x45
 8005850:	f43f ab59 	beq.w	8004f06 <_strtod_l+0x27e>
 8005854:	2201      	movs	r2, #1
 8005856:	f7ff bb8d 	b.w	8004f74 <_strtod_l+0x2ec>
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
 8005860:	ffc00000 	.word	0xffc00000
 8005864:	41dfffff 	.word	0x41dfffff
 8005868:	94a03595 	.word	0x94a03595
 800586c:	3fcfffff 	.word	0x3fcfffff

08005870 <_strtod_r>:
 8005870:	4b01      	ldr	r3, [pc, #4]	; (8005878 <_strtod_r+0x8>)
 8005872:	f7ff ba09 	b.w	8004c88 <_strtod_l>
 8005876:	bf00      	nop
 8005878:	20000878 	.word	0x20000878

0800587c <_strtol_l.isra.0>:
 800587c:	2b01      	cmp	r3, #1
 800587e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005882:	4686      	mov	lr, r0
 8005884:	d001      	beq.n	800588a <_strtol_l.isra.0+0xe>
 8005886:	2b24      	cmp	r3, #36	; 0x24
 8005888:	d906      	bls.n	8005898 <_strtol_l.isra.0+0x1c>
 800588a:	f7fe fb11 	bl	8003eb0 <__errno>
 800588e:	2316      	movs	r3, #22
 8005890:	6003      	str	r3, [r0, #0]
 8005892:	2000      	movs	r0, #0
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	468c      	mov	ip, r1
 800589a:	4e3a      	ldr	r6, [pc, #232]	; (8005984 <_strtol_l.isra.0+0x108>)
 800589c:	4660      	mov	r0, ip
 800589e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80058a2:	5da5      	ldrb	r5, [r4, r6]
 80058a4:	f015 0508 	ands.w	r5, r5, #8
 80058a8:	d1f8      	bne.n	800589c <_strtol_l.isra.0+0x20>
 80058aa:	2c2d      	cmp	r4, #45	; 0x2d
 80058ac:	d133      	bne.n	8005916 <_strtol_l.isra.0+0x9a>
 80058ae:	f04f 0801 	mov.w	r8, #1
 80058b2:	f89c 4000 	ldrb.w	r4, [ip]
 80058b6:	f100 0c02 	add.w	ip, r0, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d05d      	beq.n	800597a <_strtol_l.isra.0+0xfe>
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d10c      	bne.n	80058dc <_strtol_l.isra.0+0x60>
 80058c2:	2c30      	cmp	r4, #48	; 0x30
 80058c4:	d10a      	bne.n	80058dc <_strtol_l.isra.0+0x60>
 80058c6:	f89c 0000 	ldrb.w	r0, [ip]
 80058ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80058ce:	2858      	cmp	r0, #88	; 0x58
 80058d0:	d14e      	bne.n	8005970 <_strtol_l.isra.0+0xf4>
 80058d2:	2310      	movs	r3, #16
 80058d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80058d8:	f10c 0c02 	add.w	ip, ip, #2
 80058dc:	2500      	movs	r5, #0
 80058de:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80058e2:	3f01      	subs	r7, #1
 80058e4:	fbb7 f9f3 	udiv	r9, r7, r3
 80058e8:	4628      	mov	r0, r5
 80058ea:	fb03 7a19 	mls	sl, r3, r9, r7
 80058ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80058f2:	2e09      	cmp	r6, #9
 80058f4:	d818      	bhi.n	8005928 <_strtol_l.isra.0+0xac>
 80058f6:	4634      	mov	r4, r6
 80058f8:	42a3      	cmp	r3, r4
 80058fa:	dd24      	ble.n	8005946 <_strtol_l.isra.0+0xca>
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	db1f      	blt.n	8005940 <_strtol_l.isra.0+0xc4>
 8005900:	4581      	cmp	r9, r0
 8005902:	d31d      	bcc.n	8005940 <_strtol_l.isra.0+0xc4>
 8005904:	d101      	bne.n	800590a <_strtol_l.isra.0+0x8e>
 8005906:	45a2      	cmp	sl, r4
 8005908:	db1a      	blt.n	8005940 <_strtol_l.isra.0+0xc4>
 800590a:	2501      	movs	r5, #1
 800590c:	fb00 4003 	mla	r0, r0, r3, r4
 8005910:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005914:	e7eb      	b.n	80058ee <_strtol_l.isra.0+0x72>
 8005916:	2c2b      	cmp	r4, #43	; 0x2b
 8005918:	bf08      	it	eq
 800591a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800591e:	46a8      	mov	r8, r5
 8005920:	bf08      	it	eq
 8005922:	f100 0c02 	addeq.w	ip, r0, #2
 8005926:	e7c8      	b.n	80058ba <_strtol_l.isra.0+0x3e>
 8005928:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800592c:	2e19      	cmp	r6, #25
 800592e:	d801      	bhi.n	8005934 <_strtol_l.isra.0+0xb8>
 8005930:	3c37      	subs	r4, #55	; 0x37
 8005932:	e7e1      	b.n	80058f8 <_strtol_l.isra.0+0x7c>
 8005934:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005938:	2e19      	cmp	r6, #25
 800593a:	d804      	bhi.n	8005946 <_strtol_l.isra.0+0xca>
 800593c:	3c57      	subs	r4, #87	; 0x57
 800593e:	e7db      	b.n	80058f8 <_strtol_l.isra.0+0x7c>
 8005940:	f04f 35ff 	mov.w	r5, #4294967295
 8005944:	e7e4      	b.n	8005910 <_strtol_l.isra.0+0x94>
 8005946:	2d00      	cmp	r5, #0
 8005948:	da08      	bge.n	800595c <_strtol_l.isra.0+0xe0>
 800594a:	2322      	movs	r3, #34	; 0x22
 800594c:	4638      	mov	r0, r7
 800594e:	f8ce 3000 	str.w	r3, [lr]
 8005952:	2a00      	cmp	r2, #0
 8005954:	d09e      	beq.n	8005894 <_strtol_l.isra.0+0x18>
 8005956:	f10c 31ff 	add.w	r1, ip, #4294967295
 800595a:	e007      	b.n	800596c <_strtol_l.isra.0+0xf0>
 800595c:	f1b8 0f00 	cmp.w	r8, #0
 8005960:	d000      	beq.n	8005964 <_strtol_l.isra.0+0xe8>
 8005962:	4240      	negs	r0, r0
 8005964:	2a00      	cmp	r2, #0
 8005966:	d095      	beq.n	8005894 <_strtol_l.isra.0+0x18>
 8005968:	2d00      	cmp	r5, #0
 800596a:	d1f4      	bne.n	8005956 <_strtol_l.isra.0+0xda>
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	e791      	b.n	8005894 <_strtol_l.isra.0+0x18>
 8005970:	2430      	movs	r4, #48	; 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1b2      	bne.n	80058dc <_strtol_l.isra.0+0x60>
 8005976:	2308      	movs	r3, #8
 8005978:	e7b0      	b.n	80058dc <_strtol_l.isra.0+0x60>
 800597a:	2c30      	cmp	r4, #48	; 0x30
 800597c:	d0a3      	beq.n	80058c6 <_strtol_l.isra.0+0x4a>
 800597e:	230a      	movs	r3, #10
 8005980:	e7ac      	b.n	80058dc <_strtol_l.isra.0+0x60>
 8005982:	bf00      	nop
 8005984:	08008ca9 	.word	0x08008ca9

08005988 <_strtol_r>:
 8005988:	f7ff bf78 	b.w	800587c <_strtol_l.isra.0>

0800598c <quorem>:
 800598c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	6903      	ldr	r3, [r0, #16]
 8005992:	690c      	ldr	r4, [r1, #16]
 8005994:	4607      	mov	r7, r0
 8005996:	42a3      	cmp	r3, r4
 8005998:	f2c0 8083 	blt.w	8005aa2 <quorem+0x116>
 800599c:	3c01      	subs	r4, #1
 800599e:	f100 0514 	add.w	r5, r0, #20
 80059a2:	f101 0814 	add.w	r8, r1, #20
 80059a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b4:	3301      	adds	r3, #1
 80059b6:	429a      	cmp	r2, r3
 80059b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059c4:	d332      	bcc.n	8005a2c <quorem+0xa0>
 80059c6:	f04f 0e00 	mov.w	lr, #0
 80059ca:	4640      	mov	r0, r8
 80059cc:	46ac      	mov	ip, r5
 80059ce:	46f2      	mov	sl, lr
 80059d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d4:	b293      	uxth	r3, r2
 80059d6:	fb06 e303 	mla	r3, r6, r3, lr
 80059da:	0c12      	lsrs	r2, r2, #16
 80059dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059e0:	fb06 e202 	mla	r2, r6, r2, lr
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ebaa 0303 	sub.w	r3, sl, r3
 80059ea:	f8dc a000 	ldr.w	sl, [ip]
 80059ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f2:	fa1f fa8a 	uxth.w	sl, sl
 80059f6:	4453      	add	r3, sl
 80059f8:	fa1f fa82 	uxth.w	sl, r2
 80059fc:	f8dc 2000 	ldr.w	r2, [ip]
 8005a00:	4581      	cmp	r9, r0
 8005a02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a14:	f84c 3b04 	str.w	r3, [ip], #4
 8005a18:	d2da      	bcs.n	80059d0 <quorem+0x44>
 8005a1a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a1e:	b92b      	cbnz	r3, 8005a2c <quorem+0xa0>
 8005a20:	9b01      	ldr	r3, [sp, #4]
 8005a22:	3b04      	subs	r3, #4
 8005a24:	429d      	cmp	r5, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	d32f      	bcc.n	8005a8a <quorem+0xfe>
 8005a2a:	613c      	str	r4, [r7, #16]
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	f001 fc8d 	bl	800734c <__mcmp>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	db25      	blt.n	8005a82 <quorem+0xf6>
 8005a36:	4628      	mov	r0, r5
 8005a38:	f04f 0c00 	mov.w	ip, #0
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	f858 1b04 	ldr.w	r1, [r8], #4
 8005a42:	f8d0 e000 	ldr.w	lr, [r0]
 8005a46:	b28b      	uxth	r3, r1
 8005a48:	ebac 0303 	sub.w	r3, ip, r3
 8005a4c:	fa1f f28e 	uxth.w	r2, lr
 8005a50:	4413      	add	r3, r2
 8005a52:	0c0a      	lsrs	r2, r1, #16
 8005a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a62:	45c1      	cmp	r9, r8
 8005a64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a68:	f840 3b04 	str.w	r3, [r0], #4
 8005a6c:	d2e7      	bcs.n	8005a3e <quorem+0xb2>
 8005a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a76:	b922      	cbnz	r2, 8005a82 <quorem+0xf6>
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	429d      	cmp	r5, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	d30a      	bcc.n	8005a96 <quorem+0x10a>
 8005a80:	613c      	str	r4, [r7, #16]
 8005a82:	4630      	mov	r0, r6
 8005a84:	b003      	add	sp, #12
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	3b04      	subs	r3, #4
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d1cb      	bne.n	8005a2a <quorem+0x9e>
 8005a92:	3c01      	subs	r4, #1
 8005a94:	e7c6      	b.n	8005a24 <quorem+0x98>
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	d1f0      	bne.n	8005a80 <quorem+0xf4>
 8005a9e:	3c01      	subs	r4, #1
 8005aa0:	e7eb      	b.n	8005a7a <quorem+0xee>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e7ee      	b.n	8005a84 <quorem+0xf8>
	...

08005aa8 <_dtoa_r>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4616      	mov	r6, r2
 8005aae:	461f      	mov	r7, r3
 8005ab0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ab2:	b099      	sub	sp, #100	; 0x64
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005abe:	b974      	cbnz	r4, 8005ade <_dtoa_r+0x36>
 8005ac0:	2010      	movs	r0, #16
 8005ac2:	f001 f949 	bl	8006d58 <malloc>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6268      	str	r0, [r5, #36]	; 0x24
 8005aca:	b920      	cbnz	r0, 8005ad6 <_dtoa_r+0x2e>
 8005acc:	21ea      	movs	r1, #234	; 0xea
 8005ace:	4bae      	ldr	r3, [pc, #696]	; (8005d88 <_dtoa_r+0x2e0>)
 8005ad0:	48ae      	ldr	r0, [pc, #696]	; (8005d8c <_dtoa_r+0x2e4>)
 8005ad2:	f002 f875 	bl	8007bc0 <__assert_func>
 8005ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ada:	6004      	str	r4, [r0, #0]
 8005adc:	60c4      	str	r4, [r0, #12]
 8005ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	b151      	cbz	r1, 8005afa <_dtoa_r+0x52>
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4093      	lsls	r3, r2
 8005aea:	604a      	str	r2, [r1, #4]
 8005aec:	608b      	str	r3, [r1, #8]
 8005aee:	4628      	mov	r0, r5
 8005af0:	f001 f9a8 	bl	8006e44 <_Bfree>
 8005af4:	2200      	movs	r2, #0
 8005af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	1e3b      	subs	r3, r7, #0
 8005afc:	bfaf      	iteee	ge
 8005afe:	2300      	movge	r3, #0
 8005b00:	2201      	movlt	r2, #1
 8005b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	9305      	strlt	r3, [sp, #20]
 8005b08:	bfa8      	it	ge
 8005b0a:	f8c8 3000 	strge.w	r3, [r8]
 8005b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b12:	4b9f      	ldr	r3, [pc, #636]	; (8005d90 <_dtoa_r+0x2e8>)
 8005b14:	bfb8      	it	lt
 8005b16:	f8c8 2000 	strlt.w	r2, [r8]
 8005b1a:	ea33 0309 	bics.w	r3, r3, r9
 8005b1e:	d119      	bne.n	8005b54 <_dtoa_r+0xac>
 8005b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b2c:	4333      	orrs	r3, r6
 8005b2e:	f000 8580 	beq.w	8006632 <_dtoa_r+0xb8a>
 8005b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b34:	b953      	cbnz	r3, 8005b4c <_dtoa_r+0xa4>
 8005b36:	4b97      	ldr	r3, [pc, #604]	; (8005d94 <_dtoa_r+0x2ec>)
 8005b38:	e022      	b.n	8005b80 <_dtoa_r+0xd8>
 8005b3a:	4b97      	ldr	r3, [pc, #604]	; (8005d98 <_dtoa_r+0x2f0>)
 8005b3c:	9308      	str	r3, [sp, #32]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	9808      	ldr	r0, [sp, #32]
 8005b46:	b019      	add	sp, #100	; 0x64
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	4b91      	ldr	r3, [pc, #580]	; (8005d94 <_dtoa_r+0x2ec>)
 8005b4e:	9308      	str	r3, [sp, #32]
 8005b50:	3303      	adds	r3, #3
 8005b52:	e7f5      	b.n	8005b40 <_dtoa_r+0x98>
 8005b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8005b68:	4680      	mov	r8, r0
 8005b6a:	b158      	cbz	r0, 8005b84 <_dtoa_r+0xdc>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8559 	beq.w	800662c <_dtoa_r+0xb84>
 8005b7a:	4888      	ldr	r0, [pc, #544]	; (8005d9c <_dtoa_r+0x2f4>)
 8005b7c:	6018      	str	r0, [r3, #0]
 8005b7e:	1e43      	subs	r3, r0, #1
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	e7df      	b.n	8005b44 <_dtoa_r+0x9c>
 8005b84:	ab16      	add	r3, sp, #88	; 0x58
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	ab17      	add	r3, sp, #92	; 0x5c
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b92:	f001 fd01 	bl	8007598 <__d2b>
 8005b96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b9a:	4682      	mov	sl, r0
 8005b9c:	2c00      	cmp	r4, #0
 8005b9e:	d07e      	beq.n	8005c9e <_dtoa_r+0x1f6>
 8005ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005bb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005bb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4b78      	ldr	r3, [pc, #480]	; (8005da0 <_dtoa_r+0x2f8>)
 8005bbe:	f7fa fad3 	bl	8000168 <__aeabi_dsub>
 8005bc2:	a36b      	add	r3, pc, #428	; (adr r3, 8005d70 <_dtoa_r+0x2c8>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fc86 	bl	80004d8 <__aeabi_dmul>
 8005bcc:	a36a      	add	r3, pc, #424	; (adr r3, 8005d78 <_dtoa_r+0x2d0>)
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f7fa facb 	bl	800016c <__adddf3>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4620      	mov	r0, r4
 8005bda:	460f      	mov	r7, r1
 8005bdc:	f7fa fc12 	bl	8000404 <__aeabi_i2d>
 8005be0:	a367      	add	r3, pc, #412	; (adr r3, 8005d80 <_dtoa_r+0x2d8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fc77 	bl	80004d8 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa fabb 	bl	800016c <__adddf3>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	f7fa ff1d 	bl	8000a38 <__aeabi_d2iz>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	4681      	mov	r9, r0
 8005c02:	2300      	movs	r3, #0
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa fed8 	bl	80009bc <__aeabi_dcmplt>
 8005c0c:	b148      	cbz	r0, 8005c22 <_dtoa_r+0x17a>
 8005c0e:	4648      	mov	r0, r9
 8005c10:	f7fa fbf8 	bl	8000404 <__aeabi_i2d>
 8005c14:	4632      	mov	r2, r6
 8005c16:	463b      	mov	r3, r7
 8005c18:	f7fa fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8005c1c:	b908      	cbnz	r0, 8005c22 <_dtoa_r+0x17a>
 8005c1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c22:	f1b9 0f16 	cmp.w	r9, #22
 8005c26:	d857      	bhi.n	8005cd8 <_dtoa_r+0x230>
 8005c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c2c:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <_dtoa_r+0x2fc>)
 8005c2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f7fa fec1 	bl	80009bc <__aeabi_dcmplt>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d04e      	beq.n	8005cdc <_dtoa_r+0x234>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c48:	1b1c      	subs	r4, r3, r4
 8005c4a:	1e63      	subs	r3, r4, #1
 8005c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4e:	bf49      	itett	mi
 8005c50:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c54:	2300      	movpl	r3, #0
 8005c56:	9306      	strmi	r3, [sp, #24]
 8005c58:	2300      	movmi	r3, #0
 8005c5a:	bf54      	ite	pl
 8005c5c:	9306      	strpl	r3, [sp, #24]
 8005c5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c60:	f1b9 0f00 	cmp.w	r9, #0
 8005c64:	db3c      	blt.n	8005ce0 <_dtoa_r+0x238>
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c6c:	444b      	add	r3, r9
 8005c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c70:	2300      	movs	r3, #0
 8005c72:	930a      	str	r3, [sp, #40]	; 0x28
 8005c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d86c      	bhi.n	8005d54 <_dtoa_r+0x2ac>
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	bfc4      	itt	gt
 8005c7e:	3b04      	subgt	r3, #4
 8005c80:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c84:	bfc8      	it	gt
 8005c86:	2400      	movgt	r4, #0
 8005c88:	f1a3 0302 	sub.w	r3, r3, #2
 8005c8c:	bfd8      	it	le
 8005c8e:	2401      	movle	r4, #1
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	f200 808b 	bhi.w	8005dac <_dtoa_r+0x304>
 8005c96:	e8df f003 	tbb	[pc, r3]
 8005c9a:	4f2d      	.short	0x4f2d
 8005c9c:	5b4d      	.short	0x5b4d
 8005c9e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005ca2:	441c      	add	r4, r3
 8005ca4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	bfc3      	ittte	gt
 8005cac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cb0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005cb4:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cb8:	f1c3 0320 	rsble	r3, r3, #32
 8005cbc:	bfc6      	itte	gt
 8005cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cc2:	4318      	orrgt	r0, r3
 8005cc4:	fa06 f003 	lslle.w	r0, r6, r3
 8005cc8:	f7fa fb8c 	bl	80003e4 <__aeabi_ui2d>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005cd2:	3c01      	subs	r4, #1
 8005cd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cd6:	e770      	b.n	8005bba <_dtoa_r+0x112>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e7b3      	b.n	8005c44 <_dtoa_r+0x19c>
 8005cdc:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cde:	e7b2      	b.n	8005c46 <_dtoa_r+0x19e>
 8005ce0:	9b06      	ldr	r3, [sp, #24]
 8005ce2:	eba3 0309 	sub.w	r3, r3, r9
 8005ce6:	9306      	str	r3, [sp, #24]
 8005ce8:	f1c9 0300 	rsb	r3, r9, #0
 8005cec:	930a      	str	r3, [sp, #40]	; 0x28
 8005cee:	2300      	movs	r3, #0
 8005cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cf2:	e7bf      	b.n	8005c74 <_dtoa_r+0x1cc>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dc59      	bgt.n	8005db2 <_dtoa_r+0x30a>
 8005cfe:	f04f 0b01 	mov.w	fp, #1
 8005d02:	465b      	mov	r3, fp
 8005d04:	f8cd b008 	str.w	fp, [sp, #8]
 8005d08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d10:	6042      	str	r2, [r0, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	f102 0614 	add.w	r6, r2, #20
 8005d18:	429e      	cmp	r6, r3
 8005d1a:	6841      	ldr	r1, [r0, #4]
 8005d1c:	d94f      	bls.n	8005dbe <_dtoa_r+0x316>
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f001 f850 	bl	8006dc4 <_Balloc>
 8005d24:	9008      	str	r0, [sp, #32]
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d14d      	bne.n	8005dc6 <_dtoa_r+0x31e>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <_dtoa_r+0x300>)
 8005d32:	e6cd      	b.n	8005ad0 <_dtoa_r+0x28>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7de      	b.n	8005cf6 <_dtoa_r+0x24e>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d3e:	eb09 0b03 	add.w	fp, r9, r3
 8005d42:	f10b 0301 	add.w	r3, fp, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	bfb8      	it	lt
 8005d4c:	2301      	movlt	r3, #1
 8005d4e:	e7dd      	b.n	8005d0c <_dtoa_r+0x264>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e7f2      	b.n	8005d3a <_dtoa_r+0x292>
 8005d54:	2401      	movs	r4, #1
 8005d56:	2300      	movs	r3, #0
 8005d58:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d5a:	9322      	str	r3, [sp, #136]	; 0x88
 8005d5c:	f04f 3bff 	mov.w	fp, #4294967295
 8005d60:	2200      	movs	r2, #0
 8005d62:	2312      	movs	r3, #18
 8005d64:	f8cd b008 	str.w	fp, [sp, #8]
 8005d68:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d6a:	e7cf      	b.n	8005d0c <_dtoa_r+0x264>
 8005d6c:	f3af 8000 	nop.w
 8005d70:	636f4361 	.word	0x636f4361
 8005d74:	3fd287a7 	.word	0x3fd287a7
 8005d78:	8b60c8b3 	.word	0x8b60c8b3
 8005d7c:	3fc68a28 	.word	0x3fc68a28
 8005d80:	509f79fb 	.word	0x509f79fb
 8005d84:	3fd34413 	.word	0x3fd34413
 8005d88:	08008db6 	.word	0x08008db6
 8005d8c:	08008dcd 	.word	0x08008dcd
 8005d90:	7ff00000 	.word	0x7ff00000
 8005d94:	08008db2 	.word	0x08008db2
 8005d98:	08008da9 	.word	0x08008da9
 8005d9c:	08008c29 	.word	0x08008c29
 8005da0:	3ff80000 	.word	0x3ff80000
 8005da4:	08008f48 	.word	0x08008f48
 8005da8:	08008e2c 	.word	0x08008e2c
 8005dac:	2301      	movs	r3, #1
 8005dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005db0:	e7d4      	b.n	8005d5c <_dtoa_r+0x2b4>
 8005db2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005db6:	465b      	mov	r3, fp
 8005db8:	f8cd b008 	str.w	fp, [sp, #8]
 8005dbc:	e7a6      	b.n	8005d0c <_dtoa_r+0x264>
 8005dbe:	3101      	adds	r1, #1
 8005dc0:	6041      	str	r1, [r0, #4]
 8005dc2:	0052      	lsls	r2, r2, #1
 8005dc4:	e7a6      	b.n	8005d14 <_dtoa_r+0x26c>
 8005dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dc8:	9a08      	ldr	r2, [sp, #32]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	9b02      	ldr	r3, [sp, #8]
 8005dce:	2b0e      	cmp	r3, #14
 8005dd0:	f200 80a8 	bhi.w	8005f24 <_dtoa_r+0x47c>
 8005dd4:	2c00      	cmp	r4, #0
 8005dd6:	f000 80a5 	beq.w	8005f24 <_dtoa_r+0x47c>
 8005dda:	f1b9 0f00 	cmp.w	r9, #0
 8005dde:	dd34      	ble.n	8005e4a <_dtoa_r+0x3a2>
 8005de0:	4a9a      	ldr	r2, [pc, #616]	; (800604c <_dtoa_r+0x5a4>)
 8005de2:	f009 030f 	and.w	r3, r9, #15
 8005de6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005dea:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005df6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005dfa:	d016      	beq.n	8005e2a <_dtoa_r+0x382>
 8005dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e00:	4b93      	ldr	r3, [pc, #588]	; (8006050 <_dtoa_r+0x5a8>)
 8005e02:	2703      	movs	r7, #3
 8005e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e08:	f7fa fc90 	bl	800072c <__aeabi_ddiv>
 8005e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e10:	f004 040f 	and.w	r4, r4, #15
 8005e14:	4e8e      	ldr	r6, [pc, #568]	; (8006050 <_dtoa_r+0x5a8>)
 8005e16:	b954      	cbnz	r4, 8005e2e <_dtoa_r+0x386>
 8005e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e20:	f7fa fc84 	bl	800072c <__aeabi_ddiv>
 8005e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e28:	e029      	b.n	8005e7e <_dtoa_r+0x3d6>
 8005e2a:	2702      	movs	r7, #2
 8005e2c:	e7f2      	b.n	8005e14 <_dtoa_r+0x36c>
 8005e2e:	07e1      	lsls	r1, r4, #31
 8005e30:	d508      	bpl.n	8005e44 <_dtoa_r+0x39c>
 8005e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e3a:	f7fa fb4d 	bl	80004d8 <__aeabi_dmul>
 8005e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e42:	3701      	adds	r7, #1
 8005e44:	1064      	asrs	r4, r4, #1
 8005e46:	3608      	adds	r6, #8
 8005e48:	e7e5      	b.n	8005e16 <_dtoa_r+0x36e>
 8005e4a:	f000 80a5 	beq.w	8005f98 <_dtoa_r+0x4f0>
 8005e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e52:	f1c9 0400 	rsb	r4, r9, #0
 8005e56:	4b7d      	ldr	r3, [pc, #500]	; (800604c <_dtoa_r+0x5a4>)
 8005e58:	f004 020f 	and.w	r2, r4, #15
 8005e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f7fa fb38 	bl	80004d8 <__aeabi_dmul>
 8005e68:	2702      	movs	r7, #2
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e70:	4e77      	ldr	r6, [pc, #476]	; (8006050 <_dtoa_r+0x5a8>)
 8005e72:	1124      	asrs	r4, r4, #4
 8005e74:	2c00      	cmp	r4, #0
 8005e76:	f040 8084 	bne.w	8005f82 <_dtoa_r+0x4da>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1d2      	bne.n	8005e24 <_dtoa_r+0x37c>
 8005e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 808b 	beq.w	8005f9c <_dtoa_r+0x4f4>
 8005e86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e92:	2200      	movs	r2, #0
 8005e94:	4b6f      	ldr	r3, [pc, #444]	; (8006054 <_dtoa_r+0x5ac>)
 8005e96:	f7fa fd91 	bl	80009bc <__aeabi_dcmplt>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d07e      	beq.n	8005f9c <_dtoa_r+0x4f4>
 8005e9e:	9b02      	ldr	r3, [sp, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d07b      	beq.n	8005f9c <_dtoa_r+0x4f4>
 8005ea4:	f1bb 0f00 	cmp.w	fp, #0
 8005ea8:	dd38      	ble.n	8005f1c <_dtoa_r+0x474>
 8005eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4b69      	ldr	r3, [pc, #420]	; (8006058 <_dtoa_r+0x5b0>)
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	465c      	mov	r4, fp
 8005eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ebc:	f109 38ff 	add.w	r8, r9, #4294967295
 8005ec0:	3701      	adds	r7, #1
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7fa fa9e 	bl	8000404 <__aeabi_i2d>
 8005ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ecc:	f7fa fb04 	bl	80004d8 <__aeabi_dmul>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4b62      	ldr	r3, [pc, #392]	; (800605c <_dtoa_r+0x5b4>)
 8005ed4:	f7fa f94a 	bl	800016c <__adddf3>
 8005ed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005edc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ee0:	9611      	str	r6, [sp, #68]	; 0x44
 8005ee2:	2c00      	cmp	r4, #0
 8005ee4:	d15d      	bne.n	8005fa2 <_dtoa_r+0x4fa>
 8005ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eea:	2200      	movs	r2, #0
 8005eec:	4b5c      	ldr	r3, [pc, #368]	; (8006060 <_dtoa_r+0x5b8>)
 8005eee:	f7fa f93b 	bl	8000168 <__aeabi_dsub>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005efa:	4633      	mov	r3, r6
 8005efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005efe:	f7fa fd7b 	bl	80009f8 <__aeabi_dcmpgt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 829e 	bne.w	8006444 <_dtoa_r+0x99c>
 8005f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f12:	f7fa fd53 	bl	80009bc <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8292 	bne.w	8006440 <_dtoa_r+0x998>
 8005f1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f2c0 8153 	blt.w	80061d2 <_dtoa_r+0x72a>
 8005f2c:	f1b9 0f0e 	cmp.w	r9, #14
 8005f30:	f300 814f 	bgt.w	80061d2 <_dtoa_r+0x72a>
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <_dtoa_r+0x5a4>)
 8005f36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f280 80db 	bge.w	8006100 <_dtoa_r+0x658>
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f300 80d7 	bgt.w	8006100 <_dtoa_r+0x658>
 8005f52:	f040 8274 	bne.w	800643e <_dtoa_r+0x996>
 8005f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4b40      	ldr	r3, [pc, #256]	; (8006060 <_dtoa_r+0x5b8>)
 8005f5e:	f7fa fabb 	bl	80004d8 <__aeabi_dmul>
 8005f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f66:	f7fa fd3d 	bl	80009e4 <__aeabi_dcmpge>
 8005f6a:	9c02      	ldr	r4, [sp, #8]
 8005f6c:	4626      	mov	r6, r4
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f040 824a 	bne.w	8006408 <_dtoa_r+0x960>
 8005f74:	2331      	movs	r3, #49	; 0x31
 8005f76:	9f08      	ldr	r7, [sp, #32]
 8005f78:	f109 0901 	add.w	r9, r9, #1
 8005f7c:	f807 3b01 	strb.w	r3, [r7], #1
 8005f80:	e246      	b.n	8006410 <_dtoa_r+0x968>
 8005f82:	07e2      	lsls	r2, r4, #31
 8005f84:	d505      	bpl.n	8005f92 <_dtoa_r+0x4ea>
 8005f86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f8a:	f7fa faa5 	bl	80004d8 <__aeabi_dmul>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	3701      	adds	r7, #1
 8005f92:	1064      	asrs	r4, r4, #1
 8005f94:	3608      	adds	r6, #8
 8005f96:	e76d      	b.n	8005e74 <_dtoa_r+0x3cc>
 8005f98:	2702      	movs	r7, #2
 8005f9a:	e770      	b.n	8005e7e <_dtoa_r+0x3d6>
 8005f9c:	46c8      	mov	r8, r9
 8005f9e:	9c02      	ldr	r4, [sp, #8]
 8005fa0:	e78f      	b.n	8005ec2 <_dtoa_r+0x41a>
 8005fa2:	9908      	ldr	r1, [sp, #32]
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <_dtoa_r+0x5a4>)
 8005fa6:	4421      	add	r1, r4
 8005fa8:	9112      	str	r1, [sp, #72]	; 0x48
 8005faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d055      	beq.n	8006068 <_dtoa_r+0x5c0>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4929      	ldr	r1, [pc, #164]	; (8006064 <_dtoa_r+0x5bc>)
 8005fc0:	f7fa fbb4 	bl	800072c <__aeabi_ddiv>
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	f7fa f8ce 	bl	8000168 <__aeabi_dsub>
 8005fcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fd0:	9f08      	ldr	r7, [sp, #32]
 8005fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd6:	f7fa fd2f 	bl	8000a38 <__aeabi_d2iz>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f7fa fa12 	bl	8000404 <__aeabi_i2d>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe8:	f7fa f8be 	bl	8000168 <__aeabi_dsub>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	3430      	adds	r4, #48	; 0x30
 8005ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ffa:	f807 4b01 	strb.w	r4, [r7], #1
 8005ffe:	f7fa fcdd 	bl	80009bc <__aeabi_dcmplt>
 8006002:	2800      	cmp	r0, #0
 8006004:	d174      	bne.n	80060f0 <_dtoa_r+0x648>
 8006006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800600a:	2000      	movs	r0, #0
 800600c:	4911      	ldr	r1, [pc, #68]	; (8006054 <_dtoa_r+0x5ac>)
 800600e:	f7fa f8ab 	bl	8000168 <__aeabi_dsub>
 8006012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006016:	f7fa fcd1 	bl	80009bc <__aeabi_dcmplt>
 800601a:	2800      	cmp	r0, #0
 800601c:	f040 80b6 	bne.w	800618c <_dtoa_r+0x6e4>
 8006020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006022:	429f      	cmp	r7, r3
 8006024:	f43f af7a 	beq.w	8005f1c <_dtoa_r+0x474>
 8006028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800602c:	2200      	movs	r2, #0
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <_dtoa_r+0x5b0>)
 8006030:	f7fa fa52 	bl	80004d8 <__aeabi_dmul>
 8006034:	2200      	movs	r2, #0
 8006036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800603a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <_dtoa_r+0x5b0>)
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006048:	e7c3      	b.n	8005fd2 <_dtoa_r+0x52a>
 800604a:	bf00      	nop
 800604c:	08008f48 	.word	0x08008f48
 8006050:	08008f20 	.word	0x08008f20
 8006054:	3ff00000 	.word	0x3ff00000
 8006058:	40240000 	.word	0x40240000
 800605c:	401c0000 	.word	0x401c0000
 8006060:	40140000 	.word	0x40140000
 8006064:	3fe00000 	.word	0x3fe00000
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f7fa fa34 	bl	80004d8 <__aeabi_dmul>
 8006070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006072:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006076:	9c08      	ldr	r4, [sp, #32]
 8006078:	9314      	str	r3, [sp, #80]	; 0x50
 800607a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607e:	f7fa fcdb 	bl	8000a38 <__aeabi_d2iz>
 8006082:	9015      	str	r0, [sp, #84]	; 0x54
 8006084:	f7fa f9be 	bl	8000404 <__aeabi_i2d>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006090:	f7fa f86a 	bl	8000168 <__aeabi_dsub>
 8006094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006096:	4606      	mov	r6, r0
 8006098:	3330      	adds	r3, #48	; 0x30
 800609a:	f804 3b01 	strb.w	r3, [r4], #1
 800609e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060a0:	460f      	mov	r7, r1
 80060a2:	429c      	cmp	r4, r3
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	d124      	bne.n	80060f4 <_dtoa_r+0x64c>
 80060aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ae:	4bb3      	ldr	r3, [pc, #716]	; (800637c <_dtoa_r+0x8d4>)
 80060b0:	f7fa f85c 	bl	800016c <__adddf3>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa fc9c 	bl	80009f8 <__aeabi_dcmpgt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d162      	bne.n	800618a <_dtoa_r+0x6e2>
 80060c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060c8:	2000      	movs	r0, #0
 80060ca:	49ac      	ldr	r1, [pc, #688]	; (800637c <_dtoa_r+0x8d4>)
 80060cc:	f7fa f84c 	bl	8000168 <__aeabi_dsub>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7fa fc70 	bl	80009bc <__aeabi_dcmplt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	f43f af1d 	beq.w	8005f1c <_dtoa_r+0x474>
 80060e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060e4:	1e7b      	subs	r3, r7, #1
 80060e6:	9314      	str	r3, [sp, #80]	; 0x50
 80060e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060ec:	2b30      	cmp	r3, #48	; 0x30
 80060ee:	d0f8      	beq.n	80060e2 <_dtoa_r+0x63a>
 80060f0:	46c1      	mov	r9, r8
 80060f2:	e03a      	b.n	800616a <_dtoa_r+0x6c2>
 80060f4:	4ba2      	ldr	r3, [pc, #648]	; (8006380 <_dtoa_r+0x8d8>)
 80060f6:	f7fa f9ef 	bl	80004d8 <__aeabi_dmul>
 80060fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060fe:	e7bc      	b.n	800607a <_dtoa_r+0x5d2>
 8006100:	9f08      	ldr	r7, [sp, #32]
 8006102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800610a:	f7fa fb0f 	bl	800072c <__aeabi_ddiv>
 800610e:	f7fa fc93 	bl	8000a38 <__aeabi_d2iz>
 8006112:	4604      	mov	r4, r0
 8006114:	f7fa f976 	bl	8000404 <__aeabi_i2d>
 8006118:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800611c:	f7fa f9dc 	bl	80004d8 <__aeabi_dmul>
 8006120:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006124:	460b      	mov	r3, r1
 8006126:	4602      	mov	r2, r0
 8006128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800612c:	f7fa f81c 	bl	8000168 <__aeabi_dsub>
 8006130:	f807 6b01 	strb.w	r6, [r7], #1
 8006134:	9e08      	ldr	r6, [sp, #32]
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	1bbe      	subs	r6, r7, r6
 800613a:	42b3      	cmp	r3, r6
 800613c:	d13a      	bne.n	80061b4 <_dtoa_r+0x70c>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	f7fa f813 	bl	800016c <__adddf3>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800614e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006152:	f7fa fc51 	bl	80009f8 <__aeabi_dcmpgt>
 8006156:	bb58      	cbnz	r0, 80061b0 <_dtoa_r+0x708>
 8006158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800615c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006160:	f7fa fc22 	bl	80009a8 <__aeabi_dcmpeq>
 8006164:	b108      	cbz	r0, 800616a <_dtoa_r+0x6c2>
 8006166:	07e1      	lsls	r1, r4, #31
 8006168:	d422      	bmi.n	80061b0 <_dtoa_r+0x708>
 800616a:	4628      	mov	r0, r5
 800616c:	4651      	mov	r1, sl
 800616e:	f000 fe69 	bl	8006e44 <_Bfree>
 8006172:	2300      	movs	r3, #0
 8006174:	703b      	strb	r3, [r7, #0]
 8006176:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006178:	f109 0001 	add.w	r0, r9, #1
 800617c:	6018      	str	r0, [r3, #0]
 800617e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006180:	2b00      	cmp	r3, #0
 8006182:	f43f acdf 	beq.w	8005b44 <_dtoa_r+0x9c>
 8006186:	601f      	str	r7, [r3, #0]
 8006188:	e4dc      	b.n	8005b44 <_dtoa_r+0x9c>
 800618a:	4627      	mov	r7, r4
 800618c:	463b      	mov	r3, r7
 800618e:	461f      	mov	r7, r3
 8006190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006194:	2a39      	cmp	r2, #57	; 0x39
 8006196:	d107      	bne.n	80061a8 <_dtoa_r+0x700>
 8006198:	9a08      	ldr	r2, [sp, #32]
 800619a:	429a      	cmp	r2, r3
 800619c:	d1f7      	bne.n	800618e <_dtoa_r+0x6e6>
 800619e:	2230      	movs	r2, #48	; 0x30
 80061a0:	9908      	ldr	r1, [sp, #32]
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	700a      	strb	r2, [r1, #0]
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	3201      	adds	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e79f      	b.n	80060f0 <_dtoa_r+0x648>
 80061b0:	46c8      	mov	r8, r9
 80061b2:	e7eb      	b.n	800618c <_dtoa_r+0x6e4>
 80061b4:	2200      	movs	r2, #0
 80061b6:	4b72      	ldr	r3, [pc, #456]	; (8006380 <_dtoa_r+0x8d8>)
 80061b8:	f7fa f98e 	bl	80004d8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	f7fa fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d098      	beq.n	8006102 <_dtoa_r+0x65a>
 80061d0:	e7cb      	b.n	800616a <_dtoa_r+0x6c2>
 80061d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	f000 80cd 	beq.w	8006374 <_dtoa_r+0x8cc>
 80061da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061dc:	2a01      	cmp	r2, #1
 80061de:	f300 80af 	bgt.w	8006340 <_dtoa_r+0x898>
 80061e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	f000 80a7 	beq.w	8006338 <_dtoa_r+0x890>
 80061ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061f0:	9f06      	ldr	r7, [sp, #24]
 80061f2:	9a06      	ldr	r2, [sp, #24]
 80061f4:	2101      	movs	r1, #1
 80061f6:	441a      	add	r2, r3
 80061f8:	9206      	str	r2, [sp, #24]
 80061fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061fc:	4628      	mov	r0, r5
 80061fe:	441a      	add	r2, r3
 8006200:	9209      	str	r2, [sp, #36]	; 0x24
 8006202:	f000 ff23 	bl	800704c <__i2b>
 8006206:	4606      	mov	r6, r0
 8006208:	2f00      	cmp	r7, #0
 800620a:	dd0c      	ble.n	8006226 <_dtoa_r+0x77e>
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	dd09      	ble.n	8006226 <_dtoa_r+0x77e>
 8006212:	42bb      	cmp	r3, r7
 8006214:	bfa8      	it	ge
 8006216:	463b      	movge	r3, r7
 8006218:	9a06      	ldr	r2, [sp, #24]
 800621a:	1aff      	subs	r7, r7, r3
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	9206      	str	r2, [sp, #24]
 8006220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006228:	b1f3      	cbz	r3, 8006268 <_dtoa_r+0x7c0>
 800622a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a9 	beq.w	8006384 <_dtoa_r+0x8dc>
 8006232:	2c00      	cmp	r4, #0
 8006234:	dd10      	ble.n	8006258 <_dtoa_r+0x7b0>
 8006236:	4631      	mov	r1, r6
 8006238:	4622      	mov	r2, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f000 ffc0 	bl	80071c0 <__pow5mult>
 8006240:	4652      	mov	r2, sl
 8006242:	4601      	mov	r1, r0
 8006244:	4606      	mov	r6, r0
 8006246:	4628      	mov	r0, r5
 8006248:	f000 ff16 	bl	8007078 <__multiply>
 800624c:	4680      	mov	r8, r0
 800624e:	4651      	mov	r1, sl
 8006250:	4628      	mov	r0, r5
 8006252:	f000 fdf7 	bl	8006e44 <_Bfree>
 8006256:	46c2      	mov	sl, r8
 8006258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625a:	1b1a      	subs	r2, r3, r4
 800625c:	d004      	beq.n	8006268 <_dtoa_r+0x7c0>
 800625e:	4651      	mov	r1, sl
 8006260:	4628      	mov	r0, r5
 8006262:	f000 ffad 	bl	80071c0 <__pow5mult>
 8006266:	4682      	mov	sl, r0
 8006268:	2101      	movs	r1, #1
 800626a:	4628      	mov	r0, r5
 800626c:	f000 feee 	bl	800704c <__i2b>
 8006270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006272:	4604      	mov	r4, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f340 8087 	ble.w	8006388 <_dtoa_r+0x8e0>
 800627a:	461a      	mov	r2, r3
 800627c:	4601      	mov	r1, r0
 800627e:	4628      	mov	r0, r5
 8006280:	f000 ff9e 	bl	80071c0 <__pow5mult>
 8006284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006286:	4604      	mov	r4, r0
 8006288:	2b01      	cmp	r3, #1
 800628a:	f340 8080 	ble.w	800638e <_dtoa_r+0x8e6>
 800628e:	f04f 0800 	mov.w	r8, #0
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006298:	6918      	ldr	r0, [r3, #16]
 800629a:	f000 fe89 	bl	8006fb0 <__hi0bits>
 800629e:	f1c0 0020 	rsb	r0, r0, #32
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	4418      	add	r0, r3
 80062a6:	f010 001f 	ands.w	r0, r0, #31
 80062aa:	f000 8092 	beq.w	80063d2 <_dtoa_r+0x92a>
 80062ae:	f1c0 0320 	rsb	r3, r0, #32
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	f340 808a 	ble.w	80063cc <_dtoa_r+0x924>
 80062b8:	f1c0 001c 	rsb	r0, r0, #28
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	4407      	add	r7, r0
 80062c0:	4403      	add	r3, r0
 80062c2:	9306      	str	r3, [sp, #24]
 80062c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c6:	4403      	add	r3, r0
 80062c8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dd05      	ble.n	80062dc <_dtoa_r+0x834>
 80062d0:	4651      	mov	r1, sl
 80062d2:	461a      	mov	r2, r3
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 ffcd 	bl	8007274 <__lshift>
 80062da:	4682      	mov	sl, r0
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dd05      	ble.n	80062ee <_dtoa_r+0x846>
 80062e2:	4621      	mov	r1, r4
 80062e4:	461a      	mov	r2, r3
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 ffc4 	bl	8007274 <__lshift>
 80062ec:	4604      	mov	r4, r0
 80062ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d070      	beq.n	80063d6 <_dtoa_r+0x92e>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4650      	mov	r0, sl
 80062f8:	f001 f828 	bl	800734c <__mcmp>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	da6a      	bge.n	80063d6 <_dtoa_r+0x92e>
 8006300:	2300      	movs	r3, #0
 8006302:	4651      	mov	r1, sl
 8006304:	220a      	movs	r2, #10
 8006306:	4628      	mov	r0, r5
 8006308:	f000 fdbe 	bl	8006e88 <__multadd>
 800630c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630e:	4682      	mov	sl, r0
 8006310:	f109 39ff 	add.w	r9, r9, #4294967295
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8193 	beq.w	8006640 <_dtoa_r+0xb98>
 800631a:	4631      	mov	r1, r6
 800631c:	2300      	movs	r3, #0
 800631e:	220a      	movs	r2, #10
 8006320:	4628      	mov	r0, r5
 8006322:	f000 fdb1 	bl	8006e88 <__multadd>
 8006326:	f1bb 0f00 	cmp.w	fp, #0
 800632a:	4606      	mov	r6, r0
 800632c:	f300 8093 	bgt.w	8006456 <_dtoa_r+0x9ae>
 8006330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006332:	2b02      	cmp	r3, #2
 8006334:	dc57      	bgt.n	80063e6 <_dtoa_r+0x93e>
 8006336:	e08e      	b.n	8006456 <_dtoa_r+0x9ae>
 8006338:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800633a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800633e:	e756      	b.n	80061ee <_dtoa_r+0x746>
 8006340:	9b02      	ldr	r3, [sp, #8]
 8006342:	1e5c      	subs	r4, r3, #1
 8006344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006346:	42a3      	cmp	r3, r4
 8006348:	bfb7      	itett	lt
 800634a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800634c:	1b1c      	subge	r4, r3, r4
 800634e:	1ae2      	sublt	r2, r4, r3
 8006350:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006352:	bfbe      	ittt	lt
 8006354:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006356:	189b      	addlt	r3, r3, r2
 8006358:	930e      	strlt	r3, [sp, #56]	; 0x38
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	bfb8      	it	lt
 800635e:	2400      	movlt	r4, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	bfbb      	ittet	lt
 8006364:	9b06      	ldrlt	r3, [sp, #24]
 8006366:	9a02      	ldrlt	r2, [sp, #8]
 8006368:	9f06      	ldrge	r7, [sp, #24]
 800636a:	1a9f      	sublt	r7, r3, r2
 800636c:	bfac      	ite	ge
 800636e:	9b02      	ldrge	r3, [sp, #8]
 8006370:	2300      	movlt	r3, #0
 8006372:	e73e      	b.n	80061f2 <_dtoa_r+0x74a>
 8006374:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006376:	9f06      	ldr	r7, [sp, #24]
 8006378:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800637a:	e745      	b.n	8006208 <_dtoa_r+0x760>
 800637c:	3fe00000 	.word	0x3fe00000
 8006380:	40240000 	.word	0x40240000
 8006384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006386:	e76a      	b.n	800625e <_dtoa_r+0x7b6>
 8006388:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800638a:	2b01      	cmp	r3, #1
 800638c:	dc19      	bgt.n	80063c2 <_dtoa_r+0x91a>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	b9bb      	cbnz	r3, 80063c2 <_dtoa_r+0x91a>
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006398:	b99b      	cbnz	r3, 80063c2 <_dtoa_r+0x91a>
 800639a:	9b05      	ldr	r3, [sp, #20]
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	0d1b      	lsrs	r3, r3, #20
 80063a2:	051b      	lsls	r3, r3, #20
 80063a4:	b183      	cbz	r3, 80063c8 <_dtoa_r+0x920>
 80063a6:	f04f 0801 	mov.w	r8, #1
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	3301      	adds	r3, #1
 80063ae:	9306      	str	r3, [sp, #24]
 80063b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	9309      	str	r3, [sp, #36]	; 0x24
 80063b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f47f af6a 	bne.w	8006292 <_dtoa_r+0x7ea>
 80063be:	2001      	movs	r0, #1
 80063c0:	e76f      	b.n	80062a2 <_dtoa_r+0x7fa>
 80063c2:	f04f 0800 	mov.w	r8, #0
 80063c6:	e7f6      	b.n	80063b6 <_dtoa_r+0x90e>
 80063c8:	4698      	mov	r8, r3
 80063ca:	e7f4      	b.n	80063b6 <_dtoa_r+0x90e>
 80063cc:	f43f af7d 	beq.w	80062ca <_dtoa_r+0x822>
 80063d0:	4618      	mov	r0, r3
 80063d2:	301c      	adds	r0, #28
 80063d4:	e772      	b.n	80062bc <_dtoa_r+0x814>
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dc36      	bgt.n	800644a <_dtoa_r+0x9a2>
 80063dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063de:	2b02      	cmp	r3, #2
 80063e0:	dd33      	ble.n	800644a <_dtoa_r+0x9a2>
 80063e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80063e6:	f1bb 0f00 	cmp.w	fp, #0
 80063ea:	d10d      	bne.n	8006408 <_dtoa_r+0x960>
 80063ec:	4621      	mov	r1, r4
 80063ee:	465b      	mov	r3, fp
 80063f0:	2205      	movs	r2, #5
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fd48 	bl	8006e88 <__multadd>
 80063f8:	4601      	mov	r1, r0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4650      	mov	r0, sl
 80063fe:	f000 ffa5 	bl	800734c <__mcmp>
 8006402:	2800      	cmp	r0, #0
 8006404:	f73f adb6 	bgt.w	8005f74 <_dtoa_r+0x4cc>
 8006408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800640a:	9f08      	ldr	r7, [sp, #32]
 800640c:	ea6f 0903 	mvn.w	r9, r3
 8006410:	f04f 0800 	mov.w	r8, #0
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fd14 	bl	8006e44 <_Bfree>
 800641c:	2e00      	cmp	r6, #0
 800641e:	f43f aea4 	beq.w	800616a <_dtoa_r+0x6c2>
 8006422:	f1b8 0f00 	cmp.w	r8, #0
 8006426:	d005      	beq.n	8006434 <_dtoa_r+0x98c>
 8006428:	45b0      	cmp	r8, r6
 800642a:	d003      	beq.n	8006434 <_dtoa_r+0x98c>
 800642c:	4641      	mov	r1, r8
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fd08 	bl	8006e44 <_Bfree>
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fd04 	bl	8006e44 <_Bfree>
 800643c:	e695      	b.n	800616a <_dtoa_r+0x6c2>
 800643e:	2400      	movs	r4, #0
 8006440:	4626      	mov	r6, r4
 8006442:	e7e1      	b.n	8006408 <_dtoa_r+0x960>
 8006444:	46c1      	mov	r9, r8
 8006446:	4626      	mov	r6, r4
 8006448:	e594      	b.n	8005f74 <_dtoa_r+0x4cc>
 800644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80fc 	beq.w	800664e <_dtoa_r+0xba6>
 8006456:	2f00      	cmp	r7, #0
 8006458:	dd05      	ble.n	8006466 <_dtoa_r+0x9be>
 800645a:	4631      	mov	r1, r6
 800645c:	463a      	mov	r2, r7
 800645e:	4628      	mov	r0, r5
 8006460:	f000 ff08 	bl	8007274 <__lshift>
 8006464:	4606      	mov	r6, r0
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	d05c      	beq.n	8006526 <_dtoa_r+0xa7e>
 800646c:	4628      	mov	r0, r5
 800646e:	6871      	ldr	r1, [r6, #4]
 8006470:	f000 fca8 	bl	8006dc4 <_Balloc>
 8006474:	4607      	mov	r7, r0
 8006476:	b928      	cbnz	r0, 8006484 <_dtoa_r+0x9dc>
 8006478:	4602      	mov	r2, r0
 800647a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800647e:	4b7e      	ldr	r3, [pc, #504]	; (8006678 <_dtoa_r+0xbd0>)
 8006480:	f7ff bb26 	b.w	8005ad0 <_dtoa_r+0x28>
 8006484:	6932      	ldr	r2, [r6, #16]
 8006486:	f106 010c 	add.w	r1, r6, #12
 800648a:	3202      	adds	r2, #2
 800648c:	0092      	lsls	r2, r2, #2
 800648e:	300c      	adds	r0, #12
 8006490:	f000 fc8a 	bl	8006da8 <memcpy>
 8006494:	2201      	movs	r2, #1
 8006496:	4639      	mov	r1, r7
 8006498:	4628      	mov	r0, r5
 800649a:	f000 feeb 	bl	8007274 <__lshift>
 800649e:	46b0      	mov	r8, r6
 80064a0:	4606      	mov	r6, r0
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	3301      	adds	r3, #1
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	9b08      	ldr	r3, [sp, #32]
 80064aa:	445b      	add	r3, fp
 80064ac:	930a      	str	r3, [sp, #40]	; 0x28
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	9309      	str	r3, [sp, #36]	; 0x24
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	4621      	mov	r1, r4
 80064ba:	4650      	mov	r0, sl
 80064bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80064c0:	f7ff fa64 	bl	800598c <quorem>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4641      	mov	r1, r8
 80064c8:	3330      	adds	r3, #48	; 0x30
 80064ca:	9004      	str	r0, [sp, #16]
 80064cc:	4650      	mov	r0, sl
 80064ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d0:	f000 ff3c 	bl	800734c <__mcmp>
 80064d4:	4632      	mov	r2, r6
 80064d6:	9006      	str	r0, [sp, #24]
 80064d8:	4621      	mov	r1, r4
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 ff52 	bl	8007384 <__mdiff>
 80064e0:	68c2      	ldr	r2, [r0, #12]
 80064e2:	4607      	mov	r7, r0
 80064e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e6:	bb02      	cbnz	r2, 800652a <_dtoa_r+0xa82>
 80064e8:	4601      	mov	r1, r0
 80064ea:	4650      	mov	r0, sl
 80064ec:	f000 ff2e 	bl	800734c <__mcmp>
 80064f0:	4602      	mov	r2, r0
 80064f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f4:	4639      	mov	r1, r7
 80064f6:	4628      	mov	r0, r5
 80064f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80064fc:	f000 fca2 	bl	8006e44 <_Bfree>
 8006500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006504:	9f02      	ldr	r7, [sp, #8]
 8006506:	ea43 0102 	orr.w	r1, r3, r2
 800650a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650c:	430b      	orrs	r3, r1
 800650e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006510:	d10d      	bne.n	800652e <_dtoa_r+0xa86>
 8006512:	2b39      	cmp	r3, #57	; 0x39
 8006514:	d027      	beq.n	8006566 <_dtoa_r+0xabe>
 8006516:	9a06      	ldr	r2, [sp, #24]
 8006518:	2a00      	cmp	r2, #0
 800651a:	dd01      	ble.n	8006520 <_dtoa_r+0xa78>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	3331      	adds	r3, #49	; 0x31
 8006520:	f88b 3000 	strb.w	r3, [fp]
 8006524:	e776      	b.n	8006414 <_dtoa_r+0x96c>
 8006526:	4630      	mov	r0, r6
 8006528:	e7b9      	b.n	800649e <_dtoa_r+0x9f6>
 800652a:	2201      	movs	r2, #1
 800652c:	e7e2      	b.n	80064f4 <_dtoa_r+0xa4c>
 800652e:	9906      	ldr	r1, [sp, #24]
 8006530:	2900      	cmp	r1, #0
 8006532:	db04      	blt.n	800653e <_dtoa_r+0xa96>
 8006534:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006536:	4301      	orrs	r1, r0
 8006538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800653a:	4301      	orrs	r1, r0
 800653c:	d120      	bne.n	8006580 <_dtoa_r+0xad8>
 800653e:	2a00      	cmp	r2, #0
 8006540:	ddee      	ble.n	8006520 <_dtoa_r+0xa78>
 8006542:	4651      	mov	r1, sl
 8006544:	2201      	movs	r2, #1
 8006546:	4628      	mov	r0, r5
 8006548:	9302      	str	r3, [sp, #8]
 800654a:	f000 fe93 	bl	8007274 <__lshift>
 800654e:	4621      	mov	r1, r4
 8006550:	4682      	mov	sl, r0
 8006552:	f000 fefb 	bl	800734c <__mcmp>
 8006556:	2800      	cmp	r0, #0
 8006558:	9b02      	ldr	r3, [sp, #8]
 800655a:	dc02      	bgt.n	8006562 <_dtoa_r+0xaba>
 800655c:	d1e0      	bne.n	8006520 <_dtoa_r+0xa78>
 800655e:	07da      	lsls	r2, r3, #31
 8006560:	d5de      	bpl.n	8006520 <_dtoa_r+0xa78>
 8006562:	2b39      	cmp	r3, #57	; 0x39
 8006564:	d1da      	bne.n	800651c <_dtoa_r+0xa74>
 8006566:	2339      	movs	r3, #57	; 0x39
 8006568:	f88b 3000 	strb.w	r3, [fp]
 800656c:	463b      	mov	r3, r7
 800656e:	461f      	mov	r7, r3
 8006570:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006574:	3b01      	subs	r3, #1
 8006576:	2a39      	cmp	r2, #57	; 0x39
 8006578:	d050      	beq.n	800661c <_dtoa_r+0xb74>
 800657a:	3201      	adds	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e749      	b.n	8006414 <_dtoa_r+0x96c>
 8006580:	2a00      	cmp	r2, #0
 8006582:	dd03      	ble.n	800658c <_dtoa_r+0xae4>
 8006584:	2b39      	cmp	r3, #57	; 0x39
 8006586:	d0ee      	beq.n	8006566 <_dtoa_r+0xabe>
 8006588:	3301      	adds	r3, #1
 800658a:	e7c9      	b.n	8006520 <_dtoa_r+0xa78>
 800658c:	9a02      	ldr	r2, [sp, #8]
 800658e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006590:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006594:	428a      	cmp	r2, r1
 8006596:	d02a      	beq.n	80065ee <_dtoa_r+0xb46>
 8006598:	4651      	mov	r1, sl
 800659a:	2300      	movs	r3, #0
 800659c:	220a      	movs	r2, #10
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fc72 	bl	8006e88 <__multadd>
 80065a4:	45b0      	cmp	r8, r6
 80065a6:	4682      	mov	sl, r0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	f04f 020a 	mov.w	r2, #10
 80065b0:	4641      	mov	r1, r8
 80065b2:	4628      	mov	r0, r5
 80065b4:	d107      	bne.n	80065c6 <_dtoa_r+0xb1e>
 80065b6:	f000 fc67 	bl	8006e88 <__multadd>
 80065ba:	4680      	mov	r8, r0
 80065bc:	4606      	mov	r6, r0
 80065be:	9b02      	ldr	r3, [sp, #8]
 80065c0:	3301      	adds	r3, #1
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	e777      	b.n	80064b6 <_dtoa_r+0xa0e>
 80065c6:	f000 fc5f 	bl	8006e88 <__multadd>
 80065ca:	4631      	mov	r1, r6
 80065cc:	4680      	mov	r8, r0
 80065ce:	2300      	movs	r3, #0
 80065d0:	220a      	movs	r2, #10
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 fc58 	bl	8006e88 <__multadd>
 80065d8:	4606      	mov	r6, r0
 80065da:	e7f0      	b.n	80065be <_dtoa_r+0xb16>
 80065dc:	f1bb 0f00 	cmp.w	fp, #0
 80065e0:	bfcc      	ite	gt
 80065e2:	465f      	movgt	r7, fp
 80065e4:	2701      	movle	r7, #1
 80065e6:	f04f 0800 	mov.w	r8, #0
 80065ea:	9a08      	ldr	r2, [sp, #32]
 80065ec:	4417      	add	r7, r2
 80065ee:	4651      	mov	r1, sl
 80065f0:	2201      	movs	r2, #1
 80065f2:	4628      	mov	r0, r5
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	f000 fe3d 	bl	8007274 <__lshift>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4682      	mov	sl, r0
 80065fe:	f000 fea5 	bl	800734c <__mcmp>
 8006602:	2800      	cmp	r0, #0
 8006604:	dcb2      	bgt.n	800656c <_dtoa_r+0xac4>
 8006606:	d102      	bne.n	800660e <_dtoa_r+0xb66>
 8006608:	9b02      	ldr	r3, [sp, #8]
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d4ae      	bmi.n	800656c <_dtoa_r+0xac4>
 800660e:	463b      	mov	r3, r7
 8006610:	461f      	mov	r7, r3
 8006612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006616:	2a30      	cmp	r2, #48	; 0x30
 8006618:	d0fa      	beq.n	8006610 <_dtoa_r+0xb68>
 800661a:	e6fb      	b.n	8006414 <_dtoa_r+0x96c>
 800661c:	9a08      	ldr	r2, [sp, #32]
 800661e:	429a      	cmp	r2, r3
 8006620:	d1a5      	bne.n	800656e <_dtoa_r+0xac6>
 8006622:	2331      	movs	r3, #49	; 0x31
 8006624:	f109 0901 	add.w	r9, r9, #1
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	e6f3      	b.n	8006414 <_dtoa_r+0x96c>
 800662c:	4b13      	ldr	r3, [pc, #76]	; (800667c <_dtoa_r+0xbd4>)
 800662e:	f7ff baa7 	b.w	8005b80 <_dtoa_r+0xd8>
 8006632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006634:	2b00      	cmp	r3, #0
 8006636:	f47f aa80 	bne.w	8005b3a <_dtoa_r+0x92>
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <_dtoa_r+0xbd8>)
 800663c:	f7ff baa0 	b.w	8005b80 <_dtoa_r+0xd8>
 8006640:	f1bb 0f00 	cmp.w	fp, #0
 8006644:	dc03      	bgt.n	800664e <_dtoa_r+0xba6>
 8006646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006648:	2b02      	cmp	r3, #2
 800664a:	f73f aecc 	bgt.w	80063e6 <_dtoa_r+0x93e>
 800664e:	9f08      	ldr	r7, [sp, #32]
 8006650:	4621      	mov	r1, r4
 8006652:	4650      	mov	r0, sl
 8006654:	f7ff f99a 	bl	800598c <quorem>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800665e:	f807 3b01 	strb.w	r3, [r7], #1
 8006662:	1aba      	subs	r2, r7, r2
 8006664:	4593      	cmp	fp, r2
 8006666:	ddb9      	ble.n	80065dc <_dtoa_r+0xb34>
 8006668:	4651      	mov	r1, sl
 800666a:	2300      	movs	r3, #0
 800666c:	220a      	movs	r2, #10
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fc0a 	bl	8006e88 <__multadd>
 8006674:	4682      	mov	sl, r0
 8006676:	e7eb      	b.n	8006650 <_dtoa_r+0xba8>
 8006678:	08008e2c 	.word	0x08008e2c
 800667c:	08008c28 	.word	0x08008c28
 8006680:	08008da9 	.word	0x08008da9

08006684 <rshift>:
 8006684:	6903      	ldr	r3, [r0, #16]
 8006686:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800668a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800668e:	f100 0414 	add.w	r4, r0, #20
 8006692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006696:	dd46      	ble.n	8006726 <rshift+0xa2>
 8006698:	f011 011f 	ands.w	r1, r1, #31
 800669c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80066a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80066a4:	d10c      	bne.n	80066c0 <rshift+0x3c>
 80066a6:	4629      	mov	r1, r5
 80066a8:	f100 0710 	add.w	r7, r0, #16
 80066ac:	42b1      	cmp	r1, r6
 80066ae:	d335      	bcc.n	800671c <rshift+0x98>
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	1eea      	subs	r2, r5, #3
 80066b6:	4296      	cmp	r6, r2
 80066b8:	bf38      	it	cc
 80066ba:	2300      	movcc	r3, #0
 80066bc:	4423      	add	r3, r4
 80066be:	e015      	b.n	80066ec <rshift+0x68>
 80066c0:	46a1      	mov	r9, r4
 80066c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066c6:	f1c1 0820 	rsb	r8, r1, #32
 80066ca:	40cf      	lsrs	r7, r1
 80066cc:	f105 0e04 	add.w	lr, r5, #4
 80066d0:	4576      	cmp	r6, lr
 80066d2:	46f4      	mov	ip, lr
 80066d4:	d816      	bhi.n	8006704 <rshift+0x80>
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	009a      	lsls	r2, r3, #2
 80066da:	3a04      	subs	r2, #4
 80066dc:	3501      	adds	r5, #1
 80066de:	42ae      	cmp	r6, r5
 80066e0:	bf38      	it	cc
 80066e2:	2200      	movcc	r2, #0
 80066e4:	18a3      	adds	r3, r4, r2
 80066e6:	50a7      	str	r7, [r4, r2]
 80066e8:	b107      	cbz	r7, 80066ec <rshift+0x68>
 80066ea:	3304      	adds	r3, #4
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	eba3 0204 	sub.w	r2, r3, r4
 80066f2:	bf08      	it	eq
 80066f4:	2300      	moveq	r3, #0
 80066f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066fa:	6102      	str	r2, [r0, #16]
 80066fc:	bf08      	it	eq
 80066fe:	6143      	streq	r3, [r0, #20]
 8006700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006704:	f8dc c000 	ldr.w	ip, [ip]
 8006708:	fa0c fc08 	lsl.w	ip, ip, r8
 800670c:	ea4c 0707 	orr.w	r7, ip, r7
 8006710:	f849 7b04 	str.w	r7, [r9], #4
 8006714:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006718:	40cf      	lsrs	r7, r1
 800671a:	e7d9      	b.n	80066d0 <rshift+0x4c>
 800671c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006720:	f847 cf04 	str.w	ip, [r7, #4]!
 8006724:	e7c2      	b.n	80066ac <rshift+0x28>
 8006726:	4623      	mov	r3, r4
 8006728:	e7e0      	b.n	80066ec <rshift+0x68>

0800672a <__hexdig_fun>:
 800672a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800672e:	2b09      	cmp	r3, #9
 8006730:	d802      	bhi.n	8006738 <__hexdig_fun+0xe>
 8006732:	3820      	subs	r0, #32
 8006734:	b2c0      	uxtb	r0, r0
 8006736:	4770      	bx	lr
 8006738:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800673c:	2b05      	cmp	r3, #5
 800673e:	d801      	bhi.n	8006744 <__hexdig_fun+0x1a>
 8006740:	3847      	subs	r0, #71	; 0x47
 8006742:	e7f7      	b.n	8006734 <__hexdig_fun+0xa>
 8006744:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006748:	2b05      	cmp	r3, #5
 800674a:	d801      	bhi.n	8006750 <__hexdig_fun+0x26>
 800674c:	3827      	subs	r0, #39	; 0x27
 800674e:	e7f1      	b.n	8006734 <__hexdig_fun+0xa>
 8006750:	2000      	movs	r0, #0
 8006752:	4770      	bx	lr

08006754 <__gethex>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	b08b      	sub	sp, #44	; 0x2c
 800675a:	9306      	str	r3, [sp, #24]
 800675c:	4bb9      	ldr	r3, [pc, #740]	; (8006a44 <__gethex+0x2f0>)
 800675e:	9002      	str	r0, [sp, #8]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	468b      	mov	fp, r1
 8006764:	4618      	mov	r0, r3
 8006766:	4690      	mov	r8, r2
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	f7f9 fcf1 	bl	8000150 <strlen>
 800676e:	4682      	mov	sl, r0
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	f8db 2000 	ldr.w	r2, [fp]
 8006776:	4403      	add	r3, r0
 8006778:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	1c93      	adds	r3, r2, #2
 8006780:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006784:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006788:	32fe      	adds	r2, #254	; 0xfe
 800678a:	18d1      	adds	r1, r2, r3
 800678c:	461f      	mov	r7, r3
 800678e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006792:	9101      	str	r1, [sp, #4]
 8006794:	2830      	cmp	r0, #48	; 0x30
 8006796:	d0f8      	beq.n	800678a <__gethex+0x36>
 8006798:	f7ff ffc7 	bl	800672a <__hexdig_fun>
 800679c:	4604      	mov	r4, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d13a      	bne.n	8006818 <__gethex+0xc4>
 80067a2:	4652      	mov	r2, sl
 80067a4:	4638      	mov	r0, r7
 80067a6:	9903      	ldr	r1, [sp, #12]
 80067a8:	f001 f9ea 	bl	8007b80 <strncmp>
 80067ac:	4605      	mov	r5, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d166      	bne.n	8006880 <__gethex+0x12c>
 80067b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80067b6:	eb07 060a 	add.w	r6, r7, sl
 80067ba:	f7ff ffb6 	bl	800672a <__hexdig_fun>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d060      	beq.n	8006884 <__gethex+0x130>
 80067c2:	4633      	mov	r3, r6
 80067c4:	7818      	ldrb	r0, [r3, #0]
 80067c6:	461f      	mov	r7, r3
 80067c8:	2830      	cmp	r0, #48	; 0x30
 80067ca:	f103 0301 	add.w	r3, r3, #1
 80067ce:	d0f9      	beq.n	80067c4 <__gethex+0x70>
 80067d0:	f7ff ffab 	bl	800672a <__hexdig_fun>
 80067d4:	2301      	movs	r3, #1
 80067d6:	fab0 f480 	clz	r4, r0
 80067da:	4635      	mov	r5, r6
 80067dc:	0964      	lsrs	r4, r4, #5
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	463a      	mov	r2, r7
 80067e2:	4616      	mov	r6, r2
 80067e4:	7830      	ldrb	r0, [r6, #0]
 80067e6:	3201      	adds	r2, #1
 80067e8:	f7ff ff9f 	bl	800672a <__hexdig_fun>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d1f8      	bne.n	80067e2 <__gethex+0x8e>
 80067f0:	4652      	mov	r2, sl
 80067f2:	4630      	mov	r0, r6
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	f001 f9c3 	bl	8007b80 <strncmp>
 80067fa:	b980      	cbnz	r0, 800681e <__gethex+0xca>
 80067fc:	b94d      	cbnz	r5, 8006812 <__gethex+0xbe>
 80067fe:	eb06 050a 	add.w	r5, r6, sl
 8006802:	462a      	mov	r2, r5
 8006804:	4616      	mov	r6, r2
 8006806:	7830      	ldrb	r0, [r6, #0]
 8006808:	3201      	adds	r2, #1
 800680a:	f7ff ff8e 	bl	800672a <__hexdig_fun>
 800680e:	2800      	cmp	r0, #0
 8006810:	d1f8      	bne.n	8006804 <__gethex+0xb0>
 8006812:	1bad      	subs	r5, r5, r6
 8006814:	00ad      	lsls	r5, r5, #2
 8006816:	e004      	b.n	8006822 <__gethex+0xce>
 8006818:	2400      	movs	r4, #0
 800681a:	4625      	mov	r5, r4
 800681c:	e7e0      	b.n	80067e0 <__gethex+0x8c>
 800681e:	2d00      	cmp	r5, #0
 8006820:	d1f7      	bne.n	8006812 <__gethex+0xbe>
 8006822:	7833      	ldrb	r3, [r6, #0]
 8006824:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d139      	bne.n	80068a0 <__gethex+0x14c>
 800682c:	7873      	ldrb	r3, [r6, #1]
 800682e:	2b2b      	cmp	r3, #43	; 0x2b
 8006830:	d02a      	beq.n	8006888 <__gethex+0x134>
 8006832:	2b2d      	cmp	r3, #45	; 0x2d
 8006834:	d02c      	beq.n	8006890 <__gethex+0x13c>
 8006836:	f04f 0900 	mov.w	r9, #0
 800683a:	1c71      	adds	r1, r6, #1
 800683c:	7808      	ldrb	r0, [r1, #0]
 800683e:	f7ff ff74 	bl	800672a <__hexdig_fun>
 8006842:	1e43      	subs	r3, r0, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b18      	cmp	r3, #24
 8006848:	d82a      	bhi.n	80068a0 <__gethex+0x14c>
 800684a:	f1a0 0210 	sub.w	r2, r0, #16
 800684e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006852:	f7ff ff6a 	bl	800672a <__hexdig_fun>
 8006856:	1e43      	subs	r3, r0, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b18      	cmp	r3, #24
 800685c:	d91b      	bls.n	8006896 <__gethex+0x142>
 800685e:	f1b9 0f00 	cmp.w	r9, #0
 8006862:	d000      	beq.n	8006866 <__gethex+0x112>
 8006864:	4252      	negs	r2, r2
 8006866:	4415      	add	r5, r2
 8006868:	f8cb 1000 	str.w	r1, [fp]
 800686c:	b1d4      	cbz	r4, 80068a4 <__gethex+0x150>
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf14      	ite	ne
 8006874:	2700      	movne	r7, #0
 8006876:	2706      	moveq	r7, #6
 8006878:	4638      	mov	r0, r7
 800687a:	b00b      	add	sp, #44	; 0x2c
 800687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006880:	463e      	mov	r6, r7
 8006882:	4625      	mov	r5, r4
 8006884:	2401      	movs	r4, #1
 8006886:	e7cc      	b.n	8006822 <__gethex+0xce>
 8006888:	f04f 0900 	mov.w	r9, #0
 800688c:	1cb1      	adds	r1, r6, #2
 800688e:	e7d5      	b.n	800683c <__gethex+0xe8>
 8006890:	f04f 0901 	mov.w	r9, #1
 8006894:	e7fa      	b.n	800688c <__gethex+0x138>
 8006896:	230a      	movs	r3, #10
 8006898:	fb03 0202 	mla	r2, r3, r2, r0
 800689c:	3a10      	subs	r2, #16
 800689e:	e7d6      	b.n	800684e <__gethex+0xfa>
 80068a0:	4631      	mov	r1, r6
 80068a2:	e7e1      	b.n	8006868 <__gethex+0x114>
 80068a4:	4621      	mov	r1, r4
 80068a6:	1bf3      	subs	r3, r6, r7
 80068a8:	3b01      	subs	r3, #1
 80068aa:	2b07      	cmp	r3, #7
 80068ac:	dc0a      	bgt.n	80068c4 <__gethex+0x170>
 80068ae:	9802      	ldr	r0, [sp, #8]
 80068b0:	f000 fa88 	bl	8006dc4 <_Balloc>
 80068b4:	4604      	mov	r4, r0
 80068b6:	b940      	cbnz	r0, 80068ca <__gethex+0x176>
 80068b8:	4602      	mov	r2, r0
 80068ba:	21de      	movs	r1, #222	; 0xde
 80068bc:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <__gethex+0x2f4>)
 80068be:	4863      	ldr	r0, [pc, #396]	; (8006a4c <__gethex+0x2f8>)
 80068c0:	f001 f97e 	bl	8007bc0 <__assert_func>
 80068c4:	3101      	adds	r1, #1
 80068c6:	105b      	asrs	r3, r3, #1
 80068c8:	e7ef      	b.n	80068aa <__gethex+0x156>
 80068ca:	f04f 0b00 	mov.w	fp, #0
 80068ce:	f100 0914 	add.w	r9, r0, #20
 80068d2:	f1ca 0301 	rsb	r3, sl, #1
 80068d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80068da:	f8cd b004 	str.w	fp, [sp, #4]
 80068de:	9308      	str	r3, [sp, #32]
 80068e0:	42b7      	cmp	r7, r6
 80068e2:	d33f      	bcc.n	8006964 <__gethex+0x210>
 80068e4:	9f04      	ldr	r7, [sp, #16]
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	f847 3b04 	str.w	r3, [r7], #4
 80068ec:	eba7 0709 	sub.w	r7, r7, r9
 80068f0:	10bf      	asrs	r7, r7, #2
 80068f2:	6127      	str	r7, [r4, #16]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fb5b 	bl	8006fb0 <__hi0bits>
 80068fa:	017f      	lsls	r7, r7, #5
 80068fc:	f8d8 6000 	ldr.w	r6, [r8]
 8006900:	1a3f      	subs	r7, r7, r0
 8006902:	42b7      	cmp	r7, r6
 8006904:	dd62      	ble.n	80069cc <__gethex+0x278>
 8006906:	1bbf      	subs	r7, r7, r6
 8006908:	4639      	mov	r1, r7
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fef1 	bl	80076f2 <__any_on>
 8006910:	4682      	mov	sl, r0
 8006912:	b1a8      	cbz	r0, 8006940 <__gethex+0x1ec>
 8006914:	f04f 0a01 	mov.w	sl, #1
 8006918:	1e7b      	subs	r3, r7, #1
 800691a:	1159      	asrs	r1, r3, #5
 800691c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006920:	f003 021f 	and.w	r2, r3, #31
 8006924:	fa0a f202 	lsl.w	r2, sl, r2
 8006928:	420a      	tst	r2, r1
 800692a:	d009      	beq.n	8006940 <__gethex+0x1ec>
 800692c:	4553      	cmp	r3, sl
 800692e:	dd05      	ble.n	800693c <__gethex+0x1e8>
 8006930:	4620      	mov	r0, r4
 8006932:	1eb9      	subs	r1, r7, #2
 8006934:	f000 fedd 	bl	80076f2 <__any_on>
 8006938:	2800      	cmp	r0, #0
 800693a:	d144      	bne.n	80069c6 <__gethex+0x272>
 800693c:	f04f 0a02 	mov.w	sl, #2
 8006940:	4639      	mov	r1, r7
 8006942:	4620      	mov	r0, r4
 8006944:	f7ff fe9e 	bl	8006684 <rshift>
 8006948:	443d      	add	r5, r7
 800694a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800694e:	42ab      	cmp	r3, r5
 8006950:	da4a      	bge.n	80069e8 <__gethex+0x294>
 8006952:	4621      	mov	r1, r4
 8006954:	9802      	ldr	r0, [sp, #8]
 8006956:	f000 fa75 	bl	8006e44 <_Bfree>
 800695a:	2300      	movs	r3, #0
 800695c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800695e:	27a3      	movs	r7, #163	; 0xa3
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e789      	b.n	8006878 <__gethex+0x124>
 8006964:	1e73      	subs	r3, r6, #1
 8006966:	9a07      	ldr	r2, [sp, #28]
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800696e:	4293      	cmp	r3, r2
 8006970:	d019      	beq.n	80069a6 <__gethex+0x252>
 8006972:	f1bb 0f20 	cmp.w	fp, #32
 8006976:	d107      	bne.n	8006988 <__gethex+0x234>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	9a01      	ldr	r2, [sp, #4]
 800697c:	f843 2b04 	str.w	r2, [r3], #4
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	2300      	movs	r3, #0
 8006984:	469b      	mov	fp, r3
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800698c:	f7ff fecd 	bl	800672a <__hexdig_fun>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	f000 000f 	and.w	r0, r0, #15
 8006996:	fa00 f00b 	lsl.w	r0, r0, fp
 800699a:	4303      	orrs	r3, r0
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	f10b 0b04 	add.w	fp, fp, #4
 80069a2:	9b05      	ldr	r3, [sp, #20]
 80069a4:	e00d      	b.n	80069c2 <__gethex+0x26e>
 80069a6:	9b05      	ldr	r3, [sp, #20]
 80069a8:	9a08      	ldr	r2, [sp, #32]
 80069aa:	4413      	add	r3, r2
 80069ac:	42bb      	cmp	r3, r7
 80069ae:	d3e0      	bcc.n	8006972 <__gethex+0x21e>
 80069b0:	4618      	mov	r0, r3
 80069b2:	4652      	mov	r2, sl
 80069b4:	9903      	ldr	r1, [sp, #12]
 80069b6:	9309      	str	r3, [sp, #36]	; 0x24
 80069b8:	f001 f8e2 	bl	8007b80 <strncmp>
 80069bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069be:	2800      	cmp	r0, #0
 80069c0:	d1d7      	bne.n	8006972 <__gethex+0x21e>
 80069c2:	461e      	mov	r6, r3
 80069c4:	e78c      	b.n	80068e0 <__gethex+0x18c>
 80069c6:	f04f 0a03 	mov.w	sl, #3
 80069ca:	e7b9      	b.n	8006940 <__gethex+0x1ec>
 80069cc:	da09      	bge.n	80069e2 <__gethex+0x28e>
 80069ce:	1bf7      	subs	r7, r6, r7
 80069d0:	4621      	mov	r1, r4
 80069d2:	463a      	mov	r2, r7
 80069d4:	9802      	ldr	r0, [sp, #8]
 80069d6:	f000 fc4d 	bl	8007274 <__lshift>
 80069da:	4604      	mov	r4, r0
 80069dc:	1bed      	subs	r5, r5, r7
 80069de:	f100 0914 	add.w	r9, r0, #20
 80069e2:	f04f 0a00 	mov.w	sl, #0
 80069e6:	e7b0      	b.n	800694a <__gethex+0x1f6>
 80069e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80069ec:	42a8      	cmp	r0, r5
 80069ee:	dd71      	ble.n	8006ad4 <__gethex+0x380>
 80069f0:	1b45      	subs	r5, r0, r5
 80069f2:	42ae      	cmp	r6, r5
 80069f4:	dc34      	bgt.n	8006a60 <__gethex+0x30c>
 80069f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d028      	beq.n	8006a50 <__gethex+0x2fc>
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d02a      	beq.n	8006a58 <__gethex+0x304>
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d115      	bne.n	8006a32 <__gethex+0x2de>
 8006a06:	42ae      	cmp	r6, r5
 8006a08:	d113      	bne.n	8006a32 <__gethex+0x2de>
 8006a0a:	2e01      	cmp	r6, #1
 8006a0c:	d10b      	bne.n	8006a26 <__gethex+0x2d2>
 8006a0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a12:	9a06      	ldr	r2, [sp, #24]
 8006a14:	2762      	movs	r7, #98	; 0x62
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	f8c9 3000 	str.w	r3, [r9]
 8006a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a22:	601c      	str	r4, [r3, #0]
 8006a24:	e728      	b.n	8006878 <__gethex+0x124>
 8006a26:	4620      	mov	r0, r4
 8006a28:	1e71      	subs	r1, r6, #1
 8006a2a:	f000 fe62 	bl	80076f2 <__any_on>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d1ed      	bne.n	8006a0e <__gethex+0x2ba>
 8006a32:	4621      	mov	r1, r4
 8006a34:	9802      	ldr	r0, [sp, #8]
 8006a36:	f000 fa05 	bl	8006e44 <_Bfree>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a3e:	2750      	movs	r7, #80	; 0x50
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e719      	b.n	8006878 <__gethex+0x124>
 8006a44:	08008ea8 	.word	0x08008ea8
 8006a48:	08008e2c 	.word	0x08008e2c
 8006a4c:	08008e3d 	.word	0x08008e3d
 8006a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ed      	bne.n	8006a32 <__gethex+0x2de>
 8006a56:	e7da      	b.n	8006a0e <__gethex+0x2ba>
 8006a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1d7      	bne.n	8006a0e <__gethex+0x2ba>
 8006a5e:	e7e8      	b.n	8006a32 <__gethex+0x2de>
 8006a60:	1e6f      	subs	r7, r5, #1
 8006a62:	f1ba 0f00 	cmp.w	sl, #0
 8006a66:	d132      	bne.n	8006ace <__gethex+0x37a>
 8006a68:	b127      	cbz	r7, 8006a74 <__gethex+0x320>
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fe40 	bl	80076f2 <__any_on>
 8006a72:	4682      	mov	sl, r0
 8006a74:	2101      	movs	r1, #1
 8006a76:	117b      	asrs	r3, r7, #5
 8006a78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a7c:	f007 071f 	and.w	r7, r7, #31
 8006a80:	fa01 f707 	lsl.w	r7, r1, r7
 8006a84:	421f      	tst	r7, r3
 8006a86:	f04f 0702 	mov.w	r7, #2
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	bf18      	it	ne
 8006a90:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a94:	1b76      	subs	r6, r6, r5
 8006a96:	f7ff fdf5 	bl	8006684 <rshift>
 8006a9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a9e:	f1ba 0f00 	cmp.w	sl, #0
 8006aa2:	d048      	beq.n	8006b36 <__gethex+0x3e2>
 8006aa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d015      	beq.n	8006ad8 <__gethex+0x384>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d017      	beq.n	8006ae0 <__gethex+0x38c>
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d109      	bne.n	8006ac8 <__gethex+0x374>
 8006ab4:	f01a 0f02 	tst.w	sl, #2
 8006ab8:	d006      	beq.n	8006ac8 <__gethex+0x374>
 8006aba:	f8d9 0000 	ldr.w	r0, [r9]
 8006abe:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ac2:	f01a 0f01 	tst.w	sl, #1
 8006ac6:	d10e      	bne.n	8006ae6 <__gethex+0x392>
 8006ac8:	f047 0710 	orr.w	r7, r7, #16
 8006acc:	e033      	b.n	8006b36 <__gethex+0x3e2>
 8006ace:	f04f 0a01 	mov.w	sl, #1
 8006ad2:	e7cf      	b.n	8006a74 <__gethex+0x320>
 8006ad4:	2701      	movs	r7, #1
 8006ad6:	e7e2      	b.n	8006a9e <__gethex+0x34a>
 8006ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ada:	f1c3 0301 	rsb	r3, r3, #1
 8006ade:	9315      	str	r3, [sp, #84]	; 0x54
 8006ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <__gethex+0x374>
 8006ae6:	f04f 0c00 	mov.w	ip, #0
 8006aea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006aee:	f104 0314 	add.w	r3, r4, #20
 8006af2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006af6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b04:	d01c      	beq.n	8006b40 <__gethex+0x3ec>
 8006b06:	3201      	adds	r2, #1
 8006b08:	6002      	str	r2, [r0, #0]
 8006b0a:	2f02      	cmp	r7, #2
 8006b0c:	f104 0314 	add.w	r3, r4, #20
 8006b10:	d13d      	bne.n	8006b8e <__gethex+0x43a>
 8006b12:	f8d8 2000 	ldr.w	r2, [r8]
 8006b16:	3a01      	subs	r2, #1
 8006b18:	42b2      	cmp	r2, r6
 8006b1a:	d10a      	bne.n	8006b32 <__gethex+0x3de>
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	1171      	asrs	r1, r6, #5
 8006b20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b24:	f006 061f 	and.w	r6, r6, #31
 8006b28:	fa02 f606 	lsl.w	r6, r2, r6
 8006b2c:	421e      	tst	r6, r3
 8006b2e:	bf18      	it	ne
 8006b30:	4617      	movne	r7, r2
 8006b32:	f047 0720 	orr.w	r7, r7, #32
 8006b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b38:	601c      	str	r4, [r3, #0]
 8006b3a:	9b06      	ldr	r3, [sp, #24]
 8006b3c:	601d      	str	r5, [r3, #0]
 8006b3e:	e69b      	b.n	8006878 <__gethex+0x124>
 8006b40:	4299      	cmp	r1, r3
 8006b42:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b46:	d8d8      	bhi.n	8006afa <__gethex+0x3a6>
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	459b      	cmp	fp, r3
 8006b4c:	db17      	blt.n	8006b7e <__gethex+0x42a>
 8006b4e:	6861      	ldr	r1, [r4, #4]
 8006b50:	9802      	ldr	r0, [sp, #8]
 8006b52:	3101      	adds	r1, #1
 8006b54:	f000 f936 	bl	8006dc4 <_Balloc>
 8006b58:	4681      	mov	r9, r0
 8006b5a:	b918      	cbnz	r0, 8006b64 <__gethex+0x410>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	2184      	movs	r1, #132	; 0x84
 8006b60:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <__gethex+0x474>)
 8006b62:	e6ac      	b.n	80068be <__gethex+0x16a>
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	f104 010c 	add.w	r1, r4, #12
 8006b6a:	3202      	adds	r2, #2
 8006b6c:	0092      	lsls	r2, r2, #2
 8006b6e:	300c      	adds	r0, #12
 8006b70:	f000 f91a 	bl	8006da8 <memcpy>
 8006b74:	4621      	mov	r1, r4
 8006b76:	9802      	ldr	r0, [sp, #8]
 8006b78:	f000 f964 	bl	8006e44 <_Bfree>
 8006b7c:	464c      	mov	r4, r9
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	6122      	str	r2, [r4, #16]
 8006b84:	2201      	movs	r2, #1
 8006b86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b8a:	615a      	str	r2, [r3, #20]
 8006b8c:	e7bd      	b.n	8006b0a <__gethex+0x3b6>
 8006b8e:	6922      	ldr	r2, [r4, #16]
 8006b90:	455a      	cmp	r2, fp
 8006b92:	dd0b      	ble.n	8006bac <__gethex+0x458>
 8006b94:	2101      	movs	r1, #1
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7ff fd74 	bl	8006684 <rshift>
 8006b9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	f6ff aed5 	blt.w	8006952 <__gethex+0x1fe>
 8006ba8:	2701      	movs	r7, #1
 8006baa:	e7c2      	b.n	8006b32 <__gethex+0x3de>
 8006bac:	f016 061f 	ands.w	r6, r6, #31
 8006bb0:	d0fa      	beq.n	8006ba8 <__gethex+0x454>
 8006bb2:	449a      	add	sl, r3
 8006bb4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006bb8:	f000 f9fa 	bl	8006fb0 <__hi0bits>
 8006bbc:	f1c6 0620 	rsb	r6, r6, #32
 8006bc0:	42b0      	cmp	r0, r6
 8006bc2:	dbe7      	blt.n	8006b94 <__gethex+0x440>
 8006bc4:	e7f0      	b.n	8006ba8 <__gethex+0x454>
 8006bc6:	bf00      	nop
 8006bc8:	08008e2c 	.word	0x08008e2c

08006bcc <L_shift>:
 8006bcc:	f1c2 0208 	rsb	r2, r2, #8
 8006bd0:	0092      	lsls	r2, r2, #2
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	f1c2 0620 	rsb	r6, r2, #32
 8006bd8:	6843      	ldr	r3, [r0, #4]
 8006bda:	6804      	ldr	r4, [r0, #0]
 8006bdc:	fa03 f506 	lsl.w	r5, r3, r6
 8006be0:	432c      	orrs	r4, r5
 8006be2:	40d3      	lsrs	r3, r2
 8006be4:	6004      	str	r4, [r0, #0]
 8006be6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006bea:	4288      	cmp	r0, r1
 8006bec:	d3f4      	bcc.n	8006bd8 <L_shift+0xc>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}

08006bf0 <__match>:
 8006bf0:	b530      	push	{r4, r5, lr}
 8006bf2:	6803      	ldr	r3, [r0, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfa:	b914      	cbnz	r4, 8006c02 <__match+0x12>
 8006bfc:	6003      	str	r3, [r0, #0]
 8006bfe:	2001      	movs	r0, #1
 8006c00:	bd30      	pop	{r4, r5, pc}
 8006c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c0a:	2d19      	cmp	r5, #25
 8006c0c:	bf98      	it	ls
 8006c0e:	3220      	addls	r2, #32
 8006c10:	42a2      	cmp	r2, r4
 8006c12:	d0f0      	beq.n	8006bf6 <__match+0x6>
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7f3      	b.n	8006c00 <__match+0x10>

08006c18 <__hexnan>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	4682      	mov	sl, r0
 8006c22:	115e      	asrs	r6, r3, #5
 8006c24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c28:	f013 031f 	ands.w	r3, r3, #31
 8006c2c:	bf18      	it	ne
 8006c2e:	3604      	addne	r6, #4
 8006c30:	1f37      	subs	r7, r6, #4
 8006c32:	4690      	mov	r8, r2
 8006c34:	46b9      	mov	r9, r7
 8006c36:	463c      	mov	r4, r7
 8006c38:	46ab      	mov	fp, r5
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	6801      	ldr	r1, [r0, #0]
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c44:	9502      	str	r5, [sp, #8]
 8006c46:	784a      	ldrb	r2, [r1, #1]
 8006c48:	1c4b      	adds	r3, r1, #1
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	b342      	cbz	r2, 8006ca0 <__hexnan+0x88>
 8006c4e:	4610      	mov	r0, r2
 8006c50:	9105      	str	r1, [sp, #20]
 8006c52:	9204      	str	r2, [sp, #16]
 8006c54:	f7ff fd69 	bl	800672a <__hexdig_fun>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d14f      	bne.n	8006cfc <__hexnan+0xe4>
 8006c5c:	9a04      	ldr	r2, [sp, #16]
 8006c5e:	9905      	ldr	r1, [sp, #20]
 8006c60:	2a20      	cmp	r2, #32
 8006c62:	d818      	bhi.n	8006c96 <__hexnan+0x7e>
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	459b      	cmp	fp, r3
 8006c68:	dd13      	ble.n	8006c92 <__hexnan+0x7a>
 8006c6a:	454c      	cmp	r4, r9
 8006c6c:	d206      	bcs.n	8006c7c <__hexnan+0x64>
 8006c6e:	2d07      	cmp	r5, #7
 8006c70:	dc04      	bgt.n	8006c7c <__hexnan+0x64>
 8006c72:	462a      	mov	r2, r5
 8006c74:	4649      	mov	r1, r9
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff ffa8 	bl	8006bcc <L_shift>
 8006c7c:	4544      	cmp	r4, r8
 8006c7e:	d950      	bls.n	8006d22 <__hexnan+0x10a>
 8006c80:	2300      	movs	r3, #0
 8006c82:	f1a4 0904 	sub.w	r9, r4, #4
 8006c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	464c      	mov	r4, r9
 8006c8e:	f8cd b008 	str.w	fp, [sp, #8]
 8006c92:	9903      	ldr	r1, [sp, #12]
 8006c94:	e7d7      	b.n	8006c46 <__hexnan+0x2e>
 8006c96:	2a29      	cmp	r2, #41	; 0x29
 8006c98:	d156      	bne.n	8006d48 <__hexnan+0x130>
 8006c9a:	3102      	adds	r1, #2
 8006c9c:	f8ca 1000 	str.w	r1, [sl]
 8006ca0:	f1bb 0f00 	cmp.w	fp, #0
 8006ca4:	d050      	beq.n	8006d48 <__hexnan+0x130>
 8006ca6:	454c      	cmp	r4, r9
 8006ca8:	d206      	bcs.n	8006cb8 <__hexnan+0xa0>
 8006caa:	2d07      	cmp	r5, #7
 8006cac:	dc04      	bgt.n	8006cb8 <__hexnan+0xa0>
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7ff ff8a 	bl	8006bcc <L_shift>
 8006cb8:	4544      	cmp	r4, r8
 8006cba:	d934      	bls.n	8006d26 <__hexnan+0x10e>
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	f1a8 0204 	sub.w	r2, r8, #4
 8006cc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006cc6:	429f      	cmp	r7, r3
 8006cc8:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ccc:	d2f9      	bcs.n	8006cc2 <__hexnan+0xaa>
 8006cce:	1b3b      	subs	r3, r7, r4
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	3401      	adds	r4, #1
 8006cd8:	3e03      	subs	r6, #3
 8006cda:	42b4      	cmp	r4, r6
 8006cdc:	bf88      	it	hi
 8006cde:	2304      	movhi	r3, #4
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4443      	add	r3, r8
 8006ce4:	f843 2b04 	str.w	r2, [r3], #4
 8006ce8:	429f      	cmp	r7, r3
 8006cea:	d2fb      	bcs.n	8006ce4 <__hexnan+0xcc>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	b91b      	cbnz	r3, 8006cf8 <__hexnan+0xe0>
 8006cf0:	4547      	cmp	r7, r8
 8006cf2:	d127      	bne.n	8006d44 <__hexnan+0x12c>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	2005      	movs	r0, #5
 8006cfa:	e026      	b.n	8006d4a <__hexnan+0x132>
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	2d08      	cmp	r5, #8
 8006d00:	f10b 0b01 	add.w	fp, fp, #1
 8006d04:	dd06      	ble.n	8006d14 <__hexnan+0xfc>
 8006d06:	4544      	cmp	r4, r8
 8006d08:	d9c3      	bls.n	8006c92 <__hexnan+0x7a>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2501      	movs	r5, #1
 8006d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d12:	3c04      	subs	r4, #4
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	f000 000f 	and.w	r0, r0, #15
 8006d1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	e7b7      	b.n	8006c92 <__hexnan+0x7a>
 8006d22:	2508      	movs	r5, #8
 8006d24:	e7b5      	b.n	8006c92 <__hexnan+0x7a>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0df      	beq.n	8006cec <__hexnan+0xd4>
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	f1c3 0320 	rsb	r3, r3, #32
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d3c:	401a      	ands	r2, r3
 8006d3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d42:	e7d3      	b.n	8006cec <__hexnan+0xd4>
 8006d44:	3f04      	subs	r7, #4
 8006d46:	e7d1      	b.n	8006cec <__hexnan+0xd4>
 8006d48:	2004      	movs	r0, #4
 8006d4a:	b007      	add	sp, #28
 8006d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d50 <_localeconv_r>:
 8006d50:	4800      	ldr	r0, [pc, #0]	; (8006d54 <_localeconv_r+0x4>)
 8006d52:	4770      	bx	lr
 8006d54:	20000968 	.word	0x20000968

08006d58 <malloc>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <malloc+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 bd43 	b.w	80077e8 <_malloc_r>
 8006d62:	bf00      	nop
 8006d64:	20000810 	.word	0x20000810

08006d68 <__ascii_mbtowc>:
 8006d68:	b082      	sub	sp, #8
 8006d6a:	b901      	cbnz	r1, 8006d6e <__ascii_mbtowc+0x6>
 8006d6c:	a901      	add	r1, sp, #4
 8006d6e:	b142      	cbz	r2, 8006d82 <__ascii_mbtowc+0x1a>
 8006d70:	b14b      	cbz	r3, 8006d86 <__ascii_mbtowc+0x1e>
 8006d72:	7813      	ldrb	r3, [r2, #0]
 8006d74:	600b      	str	r3, [r1, #0]
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	1e10      	subs	r0, r2, #0
 8006d7a:	bf18      	it	ne
 8006d7c:	2001      	movne	r0, #1
 8006d7e:	b002      	add	sp, #8
 8006d80:	4770      	bx	lr
 8006d82:	4610      	mov	r0, r2
 8006d84:	e7fb      	b.n	8006d7e <__ascii_mbtowc+0x16>
 8006d86:	f06f 0001 	mvn.w	r0, #1
 8006d8a:	e7f8      	b.n	8006d7e <__ascii_mbtowc+0x16>

08006d8c <memchr>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	b2c9      	uxtb	r1, r1
 8006d92:	4402      	add	r2, r0
 8006d94:	4293      	cmp	r3, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	d101      	bne.n	8006d9e <memchr+0x12>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e003      	b.n	8006da6 <memchr+0x1a>
 8006d9e:	7804      	ldrb	r4, [r0, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	428c      	cmp	r4, r1
 8006da4:	d1f6      	bne.n	8006d94 <memchr+0x8>
 8006da6:	bd10      	pop	{r4, pc}

08006da8 <memcpy>:
 8006da8:	440a      	add	r2, r1
 8006daa:	4291      	cmp	r1, r2
 8006dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006db0:	d100      	bne.n	8006db4 <memcpy+0xc>
 8006db2:	4770      	bx	lr
 8006db4:	b510      	push	{r4, lr}
 8006db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dc0:	d1f9      	bne.n	8006db6 <memcpy+0xe>
 8006dc2:	bd10      	pop	{r4, pc}

08006dc4 <_Balloc>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460d      	mov	r5, r1
 8006dcc:	b976      	cbnz	r6, 8006dec <_Balloc+0x28>
 8006dce:	2010      	movs	r0, #16
 8006dd0:	f7ff ffc2 	bl	8006d58 <malloc>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd8:	b920      	cbnz	r0, 8006de4 <_Balloc+0x20>
 8006dda:	2166      	movs	r1, #102	; 0x66
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <_Balloc+0x78>)
 8006dde:	4818      	ldr	r0, [pc, #96]	; (8006e40 <_Balloc+0x7c>)
 8006de0:	f000 feee 	bl	8007bc0 <__assert_func>
 8006de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de8:	6006      	str	r6, [r0, #0]
 8006dea:	60c6      	str	r6, [r0, #12]
 8006dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dee:	68f3      	ldr	r3, [r6, #12]
 8006df0:	b183      	cbz	r3, 8006e14 <_Balloc+0x50>
 8006df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dfa:	b9b8      	cbnz	r0, 8006e2c <_Balloc+0x68>
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006e02:	1d72      	adds	r2, r6, #5
 8006e04:	4620      	mov	r0, r4
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	f000 fc94 	bl	8007734 <_calloc_r>
 8006e0c:	b160      	cbz	r0, 8006e28 <_Balloc+0x64>
 8006e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e12:	e00e      	b.n	8006e32 <_Balloc+0x6e>
 8006e14:	2221      	movs	r2, #33	; 0x21
 8006e16:	2104      	movs	r1, #4
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fc8b 	bl	8007734 <_calloc_r>
 8006e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e20:	60f0      	str	r0, [r6, #12]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <_Balloc+0x2e>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	6802      	ldr	r2, [r0, #0]
 8006e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e32:	2300      	movs	r3, #0
 8006e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e38:	e7f7      	b.n	8006e2a <_Balloc+0x66>
 8006e3a:	bf00      	nop
 8006e3c:	08008db6 	.word	0x08008db6
 8006e40:	08008ebc 	.word	0x08008ebc

08006e44 <_Bfree>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e48:	4605      	mov	r5, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b976      	cbnz	r6, 8006e6c <_Bfree+0x28>
 8006e4e:	2010      	movs	r0, #16
 8006e50:	f7ff ff82 	bl	8006d58 <malloc>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6268      	str	r0, [r5, #36]	; 0x24
 8006e58:	b920      	cbnz	r0, 8006e64 <_Bfree+0x20>
 8006e5a:	218a      	movs	r1, #138	; 0x8a
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <_Bfree+0x3c>)
 8006e5e:	4809      	ldr	r0, [pc, #36]	; (8006e84 <_Bfree+0x40>)
 8006e60:	f000 feae 	bl	8007bc0 <__assert_func>
 8006e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e68:	6006      	str	r6, [r0, #0]
 8006e6a:	60c6      	str	r6, [r0, #12]
 8006e6c:	b13c      	cbz	r4, 8006e7e <_Bfree+0x3a>
 8006e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e70:	6862      	ldr	r2, [r4, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e78:	6021      	str	r1, [r4, #0]
 8006e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	08008db6 	.word	0x08008db6
 8006e84:	08008ebc 	.word	0x08008ebc

08006e88 <__multadd>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	4698      	mov	r8, r3
 8006e8e:	460c      	mov	r4, r1
 8006e90:	2300      	movs	r3, #0
 8006e92:	690e      	ldr	r6, [r1, #16]
 8006e94:	4607      	mov	r7, r0
 8006e96:	f101 0014 	add.w	r0, r1, #20
 8006e9a:	6805      	ldr	r5, [r0, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	b2a9      	uxth	r1, r5
 8006ea0:	fb02 8101 	mla	r1, r2, r1, r8
 8006ea4:	0c2d      	lsrs	r5, r5, #16
 8006ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006eaa:	fb02 c505 	mla	r5, r2, r5, ip
 8006eae:	b289      	uxth	r1, r1
 8006eb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eb4:	429e      	cmp	r6, r3
 8006eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006eba:	f840 1b04 	str.w	r1, [r0], #4
 8006ebe:	dcec      	bgt.n	8006e9a <__multadd+0x12>
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d022      	beq.n	8006f0c <__multadd+0x84>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	dc19      	bgt.n	8006f00 <__multadd+0x78>
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	f7ff ff77 	bl	8006dc4 <_Balloc>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <__multadd+0x5e>
 8006eda:	4602      	mov	r2, r0
 8006edc:	21b5      	movs	r1, #181	; 0xb5
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <__multadd+0x8c>)
 8006ee0:	480d      	ldr	r0, [pc, #52]	; (8006f18 <__multadd+0x90>)
 8006ee2:	f000 fe6d 	bl	8007bc0 <__assert_func>
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	f104 010c 	add.w	r1, r4, #12
 8006eec:	3202      	adds	r2, #2
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f7ff ff59 	bl	8006da8 <memcpy>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa3 	bl	8006e44 <_Bfree>
 8006efe:	462c      	mov	r4, r5
 8006f00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f04:	3601      	adds	r6, #1
 8006f06:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f0a:	6126      	str	r6, [r4, #16]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	bf00      	nop
 8006f14:	08008e2c 	.word	0x08008e2c
 8006f18:	08008ebc 	.word	0x08008ebc

08006f1c <__s2b>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4615      	mov	r5, r2
 8006f22:	2209      	movs	r2, #9
 8006f24:	461f      	mov	r7, r3
 8006f26:	3308      	adds	r3, #8
 8006f28:	460c      	mov	r4, r1
 8006f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2e:	4606      	mov	r6, r0
 8006f30:	2201      	movs	r2, #1
 8006f32:	2100      	movs	r1, #0
 8006f34:	429a      	cmp	r2, r3
 8006f36:	db09      	blt.n	8006f4c <__s2b+0x30>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff ff43 	bl	8006dc4 <_Balloc>
 8006f3e:	b940      	cbnz	r0, 8006f52 <__s2b+0x36>
 8006f40:	4602      	mov	r2, r0
 8006f42:	21ce      	movs	r1, #206	; 0xce
 8006f44:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <__s2b+0x8c>)
 8006f46:	4819      	ldr	r0, [pc, #100]	; (8006fac <__s2b+0x90>)
 8006f48:	f000 fe3a 	bl	8007bc0 <__assert_func>
 8006f4c:	0052      	lsls	r2, r2, #1
 8006f4e:	3101      	adds	r1, #1
 8006f50:	e7f0      	b.n	8006f34 <__s2b+0x18>
 8006f52:	9b08      	ldr	r3, [sp, #32]
 8006f54:	2d09      	cmp	r5, #9
 8006f56:	6143      	str	r3, [r0, #20]
 8006f58:	f04f 0301 	mov.w	r3, #1
 8006f5c:	6103      	str	r3, [r0, #16]
 8006f5e:	dd16      	ble.n	8006f8e <__s2b+0x72>
 8006f60:	f104 0909 	add.w	r9, r4, #9
 8006f64:	46c8      	mov	r8, r9
 8006f66:	442c      	add	r4, r5
 8006f68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	220a      	movs	r2, #10
 8006f70:	4630      	mov	r0, r6
 8006f72:	3b30      	subs	r3, #48	; 0x30
 8006f74:	f7ff ff88 	bl	8006e88 <__multadd>
 8006f78:	45a0      	cmp	r8, r4
 8006f7a:	d1f5      	bne.n	8006f68 <__s2b+0x4c>
 8006f7c:	f1a5 0408 	sub.w	r4, r5, #8
 8006f80:	444c      	add	r4, r9
 8006f82:	1b2d      	subs	r5, r5, r4
 8006f84:	1963      	adds	r3, r4, r5
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	db04      	blt.n	8006f94 <__s2b+0x78>
 8006f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8e:	2509      	movs	r5, #9
 8006f90:	340a      	adds	r4, #10
 8006f92:	e7f6      	b.n	8006f82 <__s2b+0x66>
 8006f94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f98:	4601      	mov	r1, r0
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	3b30      	subs	r3, #48	; 0x30
 8006fa0:	f7ff ff72 	bl	8006e88 <__multadd>
 8006fa4:	e7ee      	b.n	8006f84 <__s2b+0x68>
 8006fa6:	bf00      	nop
 8006fa8:	08008e2c 	.word	0x08008e2c
 8006fac:	08008ebc 	.word	0x08008ebc

08006fb0 <__hi0bits>:
 8006fb0:	0c02      	lsrs	r2, r0, #16
 8006fb2:	0412      	lsls	r2, r2, #16
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	b9ca      	cbnz	r2, 8006fec <__hi0bits+0x3c>
 8006fb8:	0403      	lsls	r3, r0, #16
 8006fba:	2010      	movs	r0, #16
 8006fbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fc0:	bf04      	itt	eq
 8006fc2:	021b      	lsleq	r3, r3, #8
 8006fc4:	3008      	addeq	r0, #8
 8006fc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fca:	bf04      	itt	eq
 8006fcc:	011b      	lsleq	r3, r3, #4
 8006fce:	3004      	addeq	r0, #4
 8006fd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fd4:	bf04      	itt	eq
 8006fd6:	009b      	lsleq	r3, r3, #2
 8006fd8:	3002      	addeq	r0, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	db05      	blt.n	8006fea <__hi0bits+0x3a>
 8006fde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fe2:	f100 0001 	add.w	r0, r0, #1
 8006fe6:	bf08      	it	eq
 8006fe8:	2020      	moveq	r0, #32
 8006fea:	4770      	bx	lr
 8006fec:	2000      	movs	r0, #0
 8006fee:	e7e5      	b.n	8006fbc <__hi0bits+0xc>

08006ff0 <__lo0bits>:
 8006ff0:	6803      	ldr	r3, [r0, #0]
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f013 0007 	ands.w	r0, r3, #7
 8006ff8:	d00b      	beq.n	8007012 <__lo0bits+0x22>
 8006ffa:	07d9      	lsls	r1, r3, #31
 8006ffc:	d422      	bmi.n	8007044 <__lo0bits+0x54>
 8006ffe:	0798      	lsls	r0, r3, #30
 8007000:	bf49      	itett	mi
 8007002:	085b      	lsrmi	r3, r3, #1
 8007004:	089b      	lsrpl	r3, r3, #2
 8007006:	2001      	movmi	r0, #1
 8007008:	6013      	strmi	r3, [r2, #0]
 800700a:	bf5c      	itt	pl
 800700c:	2002      	movpl	r0, #2
 800700e:	6013      	strpl	r3, [r2, #0]
 8007010:	4770      	bx	lr
 8007012:	b299      	uxth	r1, r3
 8007014:	b909      	cbnz	r1, 800701a <__lo0bits+0x2a>
 8007016:	2010      	movs	r0, #16
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800701e:	bf04      	itt	eq
 8007020:	0a1b      	lsreq	r3, r3, #8
 8007022:	3008      	addeq	r0, #8
 8007024:	0719      	lsls	r1, r3, #28
 8007026:	bf04      	itt	eq
 8007028:	091b      	lsreq	r3, r3, #4
 800702a:	3004      	addeq	r0, #4
 800702c:	0799      	lsls	r1, r3, #30
 800702e:	bf04      	itt	eq
 8007030:	089b      	lsreq	r3, r3, #2
 8007032:	3002      	addeq	r0, #2
 8007034:	07d9      	lsls	r1, r3, #31
 8007036:	d403      	bmi.n	8007040 <__lo0bits+0x50>
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	f100 0001 	add.w	r0, r0, #1
 800703e:	d003      	beq.n	8007048 <__lo0bits+0x58>
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4770      	bx	lr
 8007044:	2000      	movs	r0, #0
 8007046:	4770      	bx	lr
 8007048:	2020      	movs	r0, #32
 800704a:	4770      	bx	lr

0800704c <__i2b>:
 800704c:	b510      	push	{r4, lr}
 800704e:	460c      	mov	r4, r1
 8007050:	2101      	movs	r1, #1
 8007052:	f7ff feb7 	bl	8006dc4 <_Balloc>
 8007056:	4602      	mov	r2, r0
 8007058:	b928      	cbnz	r0, 8007066 <__i2b+0x1a>
 800705a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <__i2b+0x24>)
 8007060:	4804      	ldr	r0, [pc, #16]	; (8007074 <__i2b+0x28>)
 8007062:	f000 fdad 	bl	8007bc0 <__assert_func>
 8007066:	2301      	movs	r3, #1
 8007068:	6144      	str	r4, [r0, #20]
 800706a:	6103      	str	r3, [r0, #16]
 800706c:	bd10      	pop	{r4, pc}
 800706e:	bf00      	nop
 8007070:	08008e2c 	.word	0x08008e2c
 8007074:	08008ebc 	.word	0x08008ebc

08007078 <__multiply>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4614      	mov	r4, r2
 800707e:	690a      	ldr	r2, [r1, #16]
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	460d      	mov	r5, r1
 8007084:	429a      	cmp	r2, r3
 8007086:	bfbe      	ittt	lt
 8007088:	460b      	movlt	r3, r1
 800708a:	4625      	movlt	r5, r4
 800708c:	461c      	movlt	r4, r3
 800708e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007092:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007096:	68ab      	ldr	r3, [r5, #8]
 8007098:	6869      	ldr	r1, [r5, #4]
 800709a:	eb0a 0709 	add.w	r7, sl, r9
 800709e:	42bb      	cmp	r3, r7
 80070a0:	b085      	sub	sp, #20
 80070a2:	bfb8      	it	lt
 80070a4:	3101      	addlt	r1, #1
 80070a6:	f7ff fe8d 	bl	8006dc4 <_Balloc>
 80070aa:	b930      	cbnz	r0, 80070ba <__multiply+0x42>
 80070ac:	4602      	mov	r2, r0
 80070ae:	f240 115d 	movw	r1, #349	; 0x15d
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <__multiply+0x140>)
 80070b4:	4841      	ldr	r0, [pc, #260]	; (80071bc <__multiply+0x144>)
 80070b6:	f000 fd83 	bl	8007bc0 <__assert_func>
 80070ba:	f100 0614 	add.w	r6, r0, #20
 80070be:	4633      	mov	r3, r6
 80070c0:	2200      	movs	r2, #0
 80070c2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070c6:	4543      	cmp	r3, r8
 80070c8:	d31e      	bcc.n	8007108 <__multiply+0x90>
 80070ca:	f105 0c14 	add.w	ip, r5, #20
 80070ce:	f104 0314 	add.w	r3, r4, #20
 80070d2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070d6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070da:	9202      	str	r2, [sp, #8]
 80070dc:	ebac 0205 	sub.w	r2, ip, r5
 80070e0:	3a15      	subs	r2, #21
 80070e2:	f022 0203 	bic.w	r2, r2, #3
 80070e6:	3204      	adds	r2, #4
 80070e8:	f105 0115 	add.w	r1, r5, #21
 80070ec:	458c      	cmp	ip, r1
 80070ee:	bf38      	it	cc
 80070f0:	2204      	movcc	r2, #4
 80070f2:	9201      	str	r2, [sp, #4]
 80070f4:	9a02      	ldr	r2, [sp, #8]
 80070f6:	9303      	str	r3, [sp, #12]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d808      	bhi.n	800710e <__multiply+0x96>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	dc55      	bgt.n	80071ac <__multiply+0x134>
 8007100:	6107      	str	r7, [r0, #16]
 8007102:	b005      	add	sp, #20
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007108:	f843 2b04 	str.w	r2, [r3], #4
 800710c:	e7db      	b.n	80070c6 <__multiply+0x4e>
 800710e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007112:	f1ba 0f00 	cmp.w	sl, #0
 8007116:	d020      	beq.n	800715a <__multiply+0xe2>
 8007118:	46b1      	mov	r9, r6
 800711a:	2200      	movs	r2, #0
 800711c:	f105 0e14 	add.w	lr, r5, #20
 8007120:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007124:	f8d9 b000 	ldr.w	fp, [r9]
 8007128:	b2a1      	uxth	r1, r4
 800712a:	fa1f fb8b 	uxth.w	fp, fp
 800712e:	fb0a b101 	mla	r1, sl, r1, fp
 8007132:	4411      	add	r1, r2
 8007134:	f8d9 2000 	ldr.w	r2, [r9]
 8007138:	0c24      	lsrs	r4, r4, #16
 800713a:	0c12      	lsrs	r2, r2, #16
 800713c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007140:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007144:	b289      	uxth	r1, r1
 8007146:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800714a:	45f4      	cmp	ip, lr
 800714c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007150:	f849 1b04 	str.w	r1, [r9], #4
 8007154:	d8e4      	bhi.n	8007120 <__multiply+0xa8>
 8007156:	9901      	ldr	r1, [sp, #4]
 8007158:	5072      	str	r2, [r6, r1]
 800715a:	9a03      	ldr	r2, [sp, #12]
 800715c:	3304      	adds	r3, #4
 800715e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007162:	f1b9 0f00 	cmp.w	r9, #0
 8007166:	d01f      	beq.n	80071a8 <__multiply+0x130>
 8007168:	46b6      	mov	lr, r6
 800716a:	f04f 0a00 	mov.w	sl, #0
 800716e:	6834      	ldr	r4, [r6, #0]
 8007170:	f105 0114 	add.w	r1, r5, #20
 8007174:	880a      	ldrh	r2, [r1, #0]
 8007176:	f8be b002 	ldrh.w	fp, [lr, #2]
 800717a:	b2a4      	uxth	r4, r4
 800717c:	fb09 b202 	mla	r2, r9, r2, fp
 8007180:	4492      	add	sl, r2
 8007182:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007186:	f84e 4b04 	str.w	r4, [lr], #4
 800718a:	f851 4b04 	ldr.w	r4, [r1], #4
 800718e:	f8be 2000 	ldrh.w	r2, [lr]
 8007192:	0c24      	lsrs	r4, r4, #16
 8007194:	fb09 2404 	mla	r4, r9, r4, r2
 8007198:	458c      	cmp	ip, r1
 800719a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800719e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071a2:	d8e7      	bhi.n	8007174 <__multiply+0xfc>
 80071a4:	9a01      	ldr	r2, [sp, #4]
 80071a6:	50b4      	str	r4, [r6, r2]
 80071a8:	3604      	adds	r6, #4
 80071aa:	e7a3      	b.n	80070f4 <__multiply+0x7c>
 80071ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1a5      	bne.n	8007100 <__multiply+0x88>
 80071b4:	3f01      	subs	r7, #1
 80071b6:	e7a1      	b.n	80070fc <__multiply+0x84>
 80071b8:	08008e2c 	.word	0x08008e2c
 80071bc:	08008ebc 	.word	0x08008ebc

080071c0 <__pow5mult>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	4615      	mov	r5, r2
 80071c6:	f012 0203 	ands.w	r2, r2, #3
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	d007      	beq.n	80071e0 <__pow5mult+0x20>
 80071d0:	4c25      	ldr	r4, [pc, #148]	; (8007268 <__pow5mult+0xa8>)
 80071d2:	3a01      	subs	r2, #1
 80071d4:	2300      	movs	r3, #0
 80071d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071da:	f7ff fe55 	bl	8006e88 <__multadd>
 80071de:	4607      	mov	r7, r0
 80071e0:	10ad      	asrs	r5, r5, #2
 80071e2:	d03d      	beq.n	8007260 <__pow5mult+0xa0>
 80071e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071e6:	b97c      	cbnz	r4, 8007208 <__pow5mult+0x48>
 80071e8:	2010      	movs	r0, #16
 80071ea:	f7ff fdb5 	bl	8006d58 <malloc>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6270      	str	r0, [r6, #36]	; 0x24
 80071f2:	b928      	cbnz	r0, 8007200 <__pow5mult+0x40>
 80071f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <__pow5mult+0xac>)
 80071fa:	481d      	ldr	r0, [pc, #116]	; (8007270 <__pow5mult+0xb0>)
 80071fc:	f000 fce0 	bl	8007bc0 <__assert_func>
 8007200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007204:	6004      	str	r4, [r0, #0]
 8007206:	60c4      	str	r4, [r0, #12]
 8007208:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800720c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007210:	b94c      	cbnz	r4, 8007226 <__pow5mult+0x66>
 8007212:	f240 2171 	movw	r1, #625	; 0x271
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ff18 	bl	800704c <__i2b>
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	f8c8 0008 	str.w	r0, [r8, #8]
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	f04f 0900 	mov.w	r9, #0
 800722a:	07eb      	lsls	r3, r5, #31
 800722c:	d50a      	bpl.n	8007244 <__pow5mult+0x84>
 800722e:	4639      	mov	r1, r7
 8007230:	4622      	mov	r2, r4
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ff20 	bl	8007078 <__multiply>
 8007238:	4680      	mov	r8, r0
 800723a:	4639      	mov	r1, r7
 800723c:	4630      	mov	r0, r6
 800723e:	f7ff fe01 	bl	8006e44 <_Bfree>
 8007242:	4647      	mov	r7, r8
 8007244:	106d      	asrs	r5, r5, #1
 8007246:	d00b      	beq.n	8007260 <__pow5mult+0xa0>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	b938      	cbnz	r0, 800725c <__pow5mult+0x9c>
 800724c:	4622      	mov	r2, r4
 800724e:	4621      	mov	r1, r4
 8007250:	4630      	mov	r0, r6
 8007252:	f7ff ff11 	bl	8007078 <__multiply>
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	f8c0 9000 	str.w	r9, [r0]
 800725c:	4604      	mov	r4, r0
 800725e:	e7e4      	b.n	800722a <__pow5mult+0x6a>
 8007260:	4638      	mov	r0, r7
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	bf00      	nop
 8007268:	08009010 	.word	0x08009010
 800726c:	08008db6 	.word	0x08008db6
 8007270:	08008ebc 	.word	0x08008ebc

08007274 <__lshift>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	460c      	mov	r4, r1
 800727a:	4607      	mov	r7, r0
 800727c:	4691      	mov	r9, r2
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6849      	ldr	r1, [r1, #4]
 8007282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800728c:	f108 0601 	add.w	r6, r8, #1
 8007290:	42b3      	cmp	r3, r6
 8007292:	db0b      	blt.n	80072ac <__lshift+0x38>
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff fd95 	bl	8006dc4 <_Balloc>
 800729a:	4605      	mov	r5, r0
 800729c:	b948      	cbnz	r0, 80072b2 <__lshift+0x3e>
 800729e:	4602      	mov	r2, r0
 80072a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <__lshift+0xd0>)
 80072a6:	4828      	ldr	r0, [pc, #160]	; (8007348 <__lshift+0xd4>)
 80072a8:	f000 fc8a 	bl	8007bc0 <__assert_func>
 80072ac:	3101      	adds	r1, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	e7ee      	b.n	8007290 <__lshift+0x1c>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f100 0114 	add.w	r1, r0, #20
 80072b8:	f100 0210 	add.w	r2, r0, #16
 80072bc:	4618      	mov	r0, r3
 80072be:	4553      	cmp	r3, sl
 80072c0:	db33      	blt.n	800732a <__lshift+0xb6>
 80072c2:	6920      	ldr	r0, [r4, #16]
 80072c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072c8:	f104 0314 	add.w	r3, r4, #20
 80072cc:	f019 091f 	ands.w	r9, r9, #31
 80072d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072d8:	d02b      	beq.n	8007332 <__lshift+0xbe>
 80072da:	468a      	mov	sl, r1
 80072dc:	2200      	movs	r2, #0
 80072de:	f1c9 0e20 	rsb	lr, r9, #32
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	fa00 f009 	lsl.w	r0, r0, r9
 80072e8:	4302      	orrs	r2, r0
 80072ea:	f84a 2b04 	str.w	r2, [sl], #4
 80072ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f2:	459c      	cmp	ip, r3
 80072f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80072f8:	d8f3      	bhi.n	80072e2 <__lshift+0x6e>
 80072fa:	ebac 0304 	sub.w	r3, ip, r4
 80072fe:	3b15      	subs	r3, #21
 8007300:	f023 0303 	bic.w	r3, r3, #3
 8007304:	3304      	adds	r3, #4
 8007306:	f104 0015 	add.w	r0, r4, #21
 800730a:	4584      	cmp	ip, r0
 800730c:	bf38      	it	cc
 800730e:	2304      	movcc	r3, #4
 8007310:	50ca      	str	r2, [r1, r3]
 8007312:	b10a      	cbz	r2, 8007318 <__lshift+0xa4>
 8007314:	f108 0602 	add.w	r6, r8, #2
 8007318:	3e01      	subs	r6, #1
 800731a:	4638      	mov	r0, r7
 800731c:	4621      	mov	r1, r4
 800731e:	612e      	str	r6, [r5, #16]
 8007320:	f7ff fd90 	bl	8006e44 <_Bfree>
 8007324:	4628      	mov	r0, r5
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732a:	f842 0f04 	str.w	r0, [r2, #4]!
 800732e:	3301      	adds	r3, #1
 8007330:	e7c5      	b.n	80072be <__lshift+0x4a>
 8007332:	3904      	subs	r1, #4
 8007334:	f853 2b04 	ldr.w	r2, [r3], #4
 8007338:	459c      	cmp	ip, r3
 800733a:	f841 2f04 	str.w	r2, [r1, #4]!
 800733e:	d8f9      	bhi.n	8007334 <__lshift+0xc0>
 8007340:	e7ea      	b.n	8007318 <__lshift+0xa4>
 8007342:	bf00      	nop
 8007344:	08008e2c 	.word	0x08008e2c
 8007348:	08008ebc 	.word	0x08008ebc

0800734c <__mcmp>:
 800734c:	4603      	mov	r3, r0
 800734e:	690a      	ldr	r2, [r1, #16]
 8007350:	6900      	ldr	r0, [r0, #16]
 8007352:	b530      	push	{r4, r5, lr}
 8007354:	1a80      	subs	r0, r0, r2
 8007356:	d10d      	bne.n	8007374 <__mcmp+0x28>
 8007358:	3314      	adds	r3, #20
 800735a:	3114      	adds	r1, #20
 800735c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800736c:	4295      	cmp	r5, r2
 800736e:	d002      	beq.n	8007376 <__mcmp+0x2a>
 8007370:	d304      	bcc.n	800737c <__mcmp+0x30>
 8007372:	2001      	movs	r0, #1
 8007374:	bd30      	pop	{r4, r5, pc}
 8007376:	42a3      	cmp	r3, r4
 8007378:	d3f4      	bcc.n	8007364 <__mcmp+0x18>
 800737a:	e7fb      	b.n	8007374 <__mcmp+0x28>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e7f8      	b.n	8007374 <__mcmp+0x28>
	...

08007384 <__mdiff>:
 8007384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	460c      	mov	r4, r1
 800738a:	4606      	mov	r6, r0
 800738c:	4611      	mov	r1, r2
 800738e:	4620      	mov	r0, r4
 8007390:	4692      	mov	sl, r2
 8007392:	f7ff ffdb 	bl	800734c <__mcmp>
 8007396:	1e05      	subs	r5, r0, #0
 8007398:	d111      	bne.n	80073be <__mdiff+0x3a>
 800739a:	4629      	mov	r1, r5
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff fd11 	bl	8006dc4 <_Balloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	b928      	cbnz	r0, 80073b2 <__mdiff+0x2e>
 80073a6:	f240 2132 	movw	r1, #562	; 0x232
 80073aa:	4b3c      	ldr	r3, [pc, #240]	; (800749c <__mdiff+0x118>)
 80073ac:	483c      	ldr	r0, [pc, #240]	; (80074a0 <__mdiff+0x11c>)
 80073ae:	f000 fc07 	bl	8007bc0 <__assert_func>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073b8:	4610      	mov	r0, r2
 80073ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	bfa4      	itt	ge
 80073c0:	4653      	movge	r3, sl
 80073c2:	46a2      	movge	sl, r4
 80073c4:	4630      	mov	r0, r6
 80073c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80073ca:	bfa6      	itte	ge
 80073cc:	461c      	movge	r4, r3
 80073ce:	2500      	movge	r5, #0
 80073d0:	2501      	movlt	r5, #1
 80073d2:	f7ff fcf7 	bl	8006dc4 <_Balloc>
 80073d6:	4602      	mov	r2, r0
 80073d8:	b918      	cbnz	r0, 80073e2 <__mdiff+0x5e>
 80073da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073de:	4b2f      	ldr	r3, [pc, #188]	; (800749c <__mdiff+0x118>)
 80073e0:	e7e4      	b.n	80073ac <__mdiff+0x28>
 80073e2:	f100 0814 	add.w	r8, r0, #20
 80073e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80073ea:	60c5      	str	r5, [r0, #12]
 80073ec:	f04f 0c00 	mov.w	ip, #0
 80073f0:	f10a 0514 	add.w	r5, sl, #20
 80073f4:	f10a 0010 	add.w	r0, sl, #16
 80073f8:	46c2      	mov	sl, r8
 80073fa:	6926      	ldr	r6, [r4, #16]
 80073fc:	f104 0914 	add.w	r9, r4, #20
 8007400:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007408:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800740c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007410:	fa1f f18b 	uxth.w	r1, fp
 8007414:	4461      	add	r1, ip
 8007416:	fa1f fc83 	uxth.w	ip, r3
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	eba1 010c 	sub.w	r1, r1, ip
 8007420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007424:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007428:	b289      	uxth	r1, r1
 800742a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800742e:	454e      	cmp	r6, r9
 8007430:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007434:	f84a 3b04 	str.w	r3, [sl], #4
 8007438:	d8e6      	bhi.n	8007408 <__mdiff+0x84>
 800743a:	1b33      	subs	r3, r6, r4
 800743c:	3b15      	subs	r3, #21
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	3415      	adds	r4, #21
 8007444:	3304      	adds	r3, #4
 8007446:	42a6      	cmp	r6, r4
 8007448:	bf38      	it	cc
 800744a:	2304      	movcc	r3, #4
 800744c:	441d      	add	r5, r3
 800744e:	4443      	add	r3, r8
 8007450:	461e      	mov	r6, r3
 8007452:	462c      	mov	r4, r5
 8007454:	4574      	cmp	r4, lr
 8007456:	d30e      	bcc.n	8007476 <__mdiff+0xf2>
 8007458:	f10e 0103 	add.w	r1, lr, #3
 800745c:	1b49      	subs	r1, r1, r5
 800745e:	f021 0103 	bic.w	r1, r1, #3
 8007462:	3d03      	subs	r5, #3
 8007464:	45ae      	cmp	lr, r5
 8007466:	bf38      	it	cc
 8007468:	2100      	movcc	r1, #0
 800746a:	4419      	add	r1, r3
 800746c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007470:	b18b      	cbz	r3, 8007496 <__mdiff+0x112>
 8007472:	6117      	str	r7, [r2, #16]
 8007474:	e7a0      	b.n	80073b8 <__mdiff+0x34>
 8007476:	f854 8b04 	ldr.w	r8, [r4], #4
 800747a:	fa1f f188 	uxth.w	r1, r8
 800747e:	4461      	add	r1, ip
 8007480:	1408      	asrs	r0, r1, #16
 8007482:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007486:	b289      	uxth	r1, r1
 8007488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800748c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007490:	f846 1b04 	str.w	r1, [r6], #4
 8007494:	e7de      	b.n	8007454 <__mdiff+0xd0>
 8007496:	3f01      	subs	r7, #1
 8007498:	e7e8      	b.n	800746c <__mdiff+0xe8>
 800749a:	bf00      	nop
 800749c:	08008e2c 	.word	0x08008e2c
 80074a0:	08008ebc 	.word	0x08008ebc

080074a4 <__ulp>:
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <__ulp+0x48>)
 80074a6:	400b      	ands	r3, r1
 80074a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dd02      	ble.n	80074b6 <__ulp+0x12>
 80074b0:	2000      	movs	r0, #0
 80074b2:	4619      	mov	r1, r3
 80074b4:	4770      	bx	lr
 80074b6:	425b      	negs	r3, r3
 80074b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80074bc:	f04f 0000 	mov.w	r0, #0
 80074c0:	f04f 0100 	mov.w	r1, #0
 80074c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074c8:	da04      	bge.n	80074d4 <__ulp+0x30>
 80074ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074ce:	fa43 f102 	asr.w	r1, r3, r2
 80074d2:	4770      	bx	lr
 80074d4:	f1a2 0314 	sub.w	r3, r2, #20
 80074d8:	2b1e      	cmp	r3, #30
 80074da:	bfd6      	itet	le
 80074dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074e0:	2301      	movgt	r3, #1
 80074e2:	fa22 f303 	lsrle.w	r3, r2, r3
 80074e6:	4618      	mov	r0, r3
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	7ff00000 	.word	0x7ff00000

080074f0 <__b2d>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	6907      	ldr	r7, [r0, #16]
 80074f6:	f100 0914 	add.w	r9, r0, #20
 80074fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80074fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007502:	f1a7 0804 	sub.w	r8, r7, #4
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff fd52 	bl	8006fb0 <__hi0bits>
 800750c:	f1c0 0320 	rsb	r3, r0, #32
 8007510:	280a      	cmp	r0, #10
 8007512:	600b      	str	r3, [r1, #0]
 8007514:	491f      	ldr	r1, [pc, #124]	; (8007594 <__b2d+0xa4>)
 8007516:	dc17      	bgt.n	8007548 <__b2d+0x58>
 8007518:	45c1      	cmp	r9, r8
 800751a:	bf28      	it	cs
 800751c:	2200      	movcs	r2, #0
 800751e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007522:	fa26 f30c 	lsr.w	r3, r6, ip
 8007526:	bf38      	it	cc
 8007528:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800752c:	ea43 0501 	orr.w	r5, r3, r1
 8007530:	f100 0315 	add.w	r3, r0, #21
 8007534:	fa06 f303 	lsl.w	r3, r6, r3
 8007538:	fa22 f20c 	lsr.w	r2, r2, ip
 800753c:	ea43 0402 	orr.w	r4, r3, r2
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007548:	45c1      	cmp	r9, r8
 800754a:	bf2e      	itee	cs
 800754c:	2200      	movcs	r2, #0
 800754e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007552:	f1a7 0808 	subcc.w	r8, r7, #8
 8007556:	f1b0 030b 	subs.w	r3, r0, #11
 800755a:	d016      	beq.n	800758a <__b2d+0x9a>
 800755c:	f1c3 0720 	rsb	r7, r3, #32
 8007560:	fa22 f107 	lsr.w	r1, r2, r7
 8007564:	45c8      	cmp	r8, r9
 8007566:	fa06 f603 	lsl.w	r6, r6, r3
 800756a:	ea46 0601 	orr.w	r6, r6, r1
 800756e:	bf94      	ite	ls
 8007570:	2100      	movls	r1, #0
 8007572:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007576:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800757a:	fa02 f003 	lsl.w	r0, r2, r3
 800757e:	40f9      	lsrs	r1, r7
 8007580:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007584:	ea40 0401 	orr.w	r4, r0, r1
 8007588:	e7da      	b.n	8007540 <__b2d+0x50>
 800758a:	4614      	mov	r4, r2
 800758c:	ea46 0501 	orr.w	r5, r6, r1
 8007590:	e7d6      	b.n	8007540 <__b2d+0x50>
 8007592:	bf00      	nop
 8007594:	3ff00000 	.word	0x3ff00000

08007598 <__d2b>:
 8007598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800759c:	2101      	movs	r1, #1
 800759e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80075a2:	4690      	mov	r8, r2
 80075a4:	461d      	mov	r5, r3
 80075a6:	f7ff fc0d 	bl	8006dc4 <_Balloc>
 80075aa:	4604      	mov	r4, r0
 80075ac:	b930      	cbnz	r0, 80075bc <__d2b+0x24>
 80075ae:	4602      	mov	r2, r0
 80075b0:	f240 310a 	movw	r1, #778	; 0x30a
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <__d2b+0xb0>)
 80075b6:	4825      	ldr	r0, [pc, #148]	; (800764c <__d2b+0xb4>)
 80075b8:	f000 fb02 	bl	8007bc0 <__assert_func>
 80075bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80075c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80075c4:	bb2d      	cbnz	r5, 8007612 <__d2b+0x7a>
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	f1b8 0300 	subs.w	r3, r8, #0
 80075cc:	d026      	beq.n	800761c <__d2b+0x84>
 80075ce:	4668      	mov	r0, sp
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f7ff fd0d 	bl	8006ff0 <__lo0bits>
 80075d6:	9900      	ldr	r1, [sp, #0]
 80075d8:	b1f0      	cbz	r0, 8007618 <__d2b+0x80>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	f1c0 0320 	rsb	r3, r0, #32
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	430b      	orrs	r3, r1
 80075e6:	40c2      	lsrs	r2, r0
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	9201      	str	r2, [sp, #4]
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bf14      	ite	ne
 80075f2:	2102      	movne	r1, #2
 80075f4:	2101      	moveq	r1, #1
 80075f6:	61a3      	str	r3, [r4, #24]
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	b1c5      	cbz	r5, 800762e <__d2b+0x96>
 80075fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007600:	4405      	add	r5, r0
 8007602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007606:	603d      	str	r5, [r7, #0]
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4620      	mov	r0, r4
 800760c:	b002      	add	sp, #8
 800760e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007616:	e7d6      	b.n	80075c6 <__d2b+0x2e>
 8007618:	6161      	str	r1, [r4, #20]
 800761a:	e7e7      	b.n	80075ec <__d2b+0x54>
 800761c:	a801      	add	r0, sp, #4
 800761e:	f7ff fce7 	bl	8006ff0 <__lo0bits>
 8007622:	2101      	movs	r1, #1
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	6121      	str	r1, [r4, #16]
 8007628:	6163      	str	r3, [r4, #20]
 800762a:	3020      	adds	r0, #32
 800762c:	e7e5      	b.n	80075fa <__d2b+0x62>
 800762e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007632:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007636:	6038      	str	r0, [r7, #0]
 8007638:	6918      	ldr	r0, [r3, #16]
 800763a:	f7ff fcb9 	bl	8006fb0 <__hi0bits>
 800763e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007642:	6031      	str	r1, [r6, #0]
 8007644:	e7e1      	b.n	800760a <__d2b+0x72>
 8007646:	bf00      	nop
 8007648:	08008e2c 	.word	0x08008e2c
 800764c:	08008ebc 	.word	0x08008ebc

08007650 <__ratio>:
 8007650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	4688      	mov	r8, r1
 8007656:	4669      	mov	r1, sp
 8007658:	4681      	mov	r9, r0
 800765a:	f7ff ff49 	bl	80074f0 <__b2d>
 800765e:	460f      	mov	r7, r1
 8007660:	4604      	mov	r4, r0
 8007662:	460d      	mov	r5, r1
 8007664:	4640      	mov	r0, r8
 8007666:	a901      	add	r1, sp, #4
 8007668:	f7ff ff42 	bl	80074f0 <__b2d>
 800766c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007670:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007674:	468b      	mov	fp, r1
 8007676:	eba3 0c02 	sub.w	ip, r3, r2
 800767a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfd5      	itete	le
 8007688:	460a      	movle	r2, r1
 800768a:	462a      	movgt	r2, r5
 800768c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007690:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007694:	bfd8      	it	le
 8007696:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800769a:	465b      	mov	r3, fp
 800769c:	4602      	mov	r2, r0
 800769e:	4639      	mov	r1, r7
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7f9 f843 	bl	800072c <__aeabi_ddiv>
 80076a6:	b003      	add	sp, #12
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076ac <__copybits>:
 80076ac:	3901      	subs	r1, #1
 80076ae:	b570      	push	{r4, r5, r6, lr}
 80076b0:	1149      	asrs	r1, r1, #5
 80076b2:	6914      	ldr	r4, [r2, #16]
 80076b4:	3101      	adds	r1, #1
 80076b6:	f102 0314 	add.w	r3, r2, #20
 80076ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076c2:	1f05      	subs	r5, r0, #4
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d30c      	bcc.n	80076e2 <__copybits+0x36>
 80076c8:	1aa3      	subs	r3, r4, r2
 80076ca:	3b11      	subs	r3, #17
 80076cc:	f023 0303 	bic.w	r3, r3, #3
 80076d0:	3211      	adds	r2, #17
 80076d2:	42a2      	cmp	r2, r4
 80076d4:	bf88      	it	hi
 80076d6:	2300      	movhi	r3, #0
 80076d8:	4418      	add	r0, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	4288      	cmp	r0, r1
 80076de:	d305      	bcc.n	80076ec <__copybits+0x40>
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80076e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80076ea:	e7eb      	b.n	80076c4 <__copybits+0x18>
 80076ec:	f840 3b04 	str.w	r3, [r0], #4
 80076f0:	e7f4      	b.n	80076dc <__copybits+0x30>

080076f2 <__any_on>:
 80076f2:	f100 0214 	add.w	r2, r0, #20
 80076f6:	6900      	ldr	r0, [r0, #16]
 80076f8:	114b      	asrs	r3, r1, #5
 80076fa:	4298      	cmp	r0, r3
 80076fc:	b510      	push	{r4, lr}
 80076fe:	db11      	blt.n	8007724 <__any_on+0x32>
 8007700:	dd0a      	ble.n	8007718 <__any_on+0x26>
 8007702:	f011 011f 	ands.w	r1, r1, #31
 8007706:	d007      	beq.n	8007718 <__any_on+0x26>
 8007708:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800770c:	fa24 f001 	lsr.w	r0, r4, r1
 8007710:	fa00 f101 	lsl.w	r1, r0, r1
 8007714:	428c      	cmp	r4, r1
 8007716:	d10b      	bne.n	8007730 <__any_on+0x3e>
 8007718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800771c:	4293      	cmp	r3, r2
 800771e:	d803      	bhi.n	8007728 <__any_on+0x36>
 8007720:	2000      	movs	r0, #0
 8007722:	bd10      	pop	{r4, pc}
 8007724:	4603      	mov	r3, r0
 8007726:	e7f7      	b.n	8007718 <__any_on+0x26>
 8007728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800772c:	2900      	cmp	r1, #0
 800772e:	d0f5      	beq.n	800771c <__any_on+0x2a>
 8007730:	2001      	movs	r0, #1
 8007732:	e7f6      	b.n	8007722 <__any_on+0x30>

08007734 <_calloc_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	fb02 f501 	mul.w	r5, r2, r1
 800773a:	4629      	mov	r1, r5
 800773c:	f000 f854 	bl	80077e8 <_malloc_r>
 8007740:	4604      	mov	r4, r0
 8007742:	b118      	cbz	r0, 800774c <_calloc_r+0x18>
 8007744:	462a      	mov	r2, r5
 8007746:	2100      	movs	r1, #0
 8007748:	f7fc fbdc 	bl	8003f04 <memset>
 800774c:	4620      	mov	r0, r4
 800774e:	bd38      	pop	{r3, r4, r5, pc}

08007750 <_free_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4605      	mov	r5, r0
 8007754:	2900      	cmp	r1, #0
 8007756:	d043      	beq.n	80077e0 <_free_r+0x90>
 8007758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775c:	1f0c      	subs	r4, r1, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfb8      	it	lt
 8007762:	18e4      	addlt	r4, r4, r3
 8007764:	f000 fa76 	bl	8007c54 <__malloc_lock>
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <_free_r+0x94>)
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	4610      	mov	r0, r2
 800776e:	b933      	cbnz	r3, 800777e <_free_r+0x2e>
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	6014      	str	r4, [r2, #0]
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 ba71 	b.w	8007c60 <__malloc_unlock>
 800777e:	42a3      	cmp	r3, r4
 8007780:	d90a      	bls.n	8007798 <_free_r+0x48>
 8007782:	6821      	ldr	r1, [r4, #0]
 8007784:	1862      	adds	r2, r4, r1
 8007786:	4293      	cmp	r3, r2
 8007788:	bf01      	itttt	eq
 800778a:	681a      	ldreq	r2, [r3, #0]
 800778c:	685b      	ldreq	r3, [r3, #4]
 800778e:	1852      	addeq	r2, r2, r1
 8007790:	6022      	streq	r2, [r4, #0]
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	6004      	str	r4, [r0, #0]
 8007796:	e7ed      	b.n	8007774 <_free_r+0x24>
 8007798:	461a      	mov	r2, r3
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	b10b      	cbz	r3, 80077a2 <_free_r+0x52>
 800779e:	42a3      	cmp	r3, r4
 80077a0:	d9fa      	bls.n	8007798 <_free_r+0x48>
 80077a2:	6811      	ldr	r1, [r2, #0]
 80077a4:	1850      	adds	r0, r2, r1
 80077a6:	42a0      	cmp	r0, r4
 80077a8:	d10b      	bne.n	80077c2 <_free_r+0x72>
 80077aa:	6820      	ldr	r0, [r4, #0]
 80077ac:	4401      	add	r1, r0
 80077ae:	1850      	adds	r0, r2, r1
 80077b0:	4283      	cmp	r3, r0
 80077b2:	6011      	str	r1, [r2, #0]
 80077b4:	d1de      	bne.n	8007774 <_free_r+0x24>
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4401      	add	r1, r0
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	6053      	str	r3, [r2, #4]
 80077c0:	e7d8      	b.n	8007774 <_free_r+0x24>
 80077c2:	d902      	bls.n	80077ca <_free_r+0x7a>
 80077c4:	230c      	movs	r3, #12
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	e7d4      	b.n	8007774 <_free_r+0x24>
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	1821      	adds	r1, r4, r0
 80077ce:	428b      	cmp	r3, r1
 80077d0:	bf01      	itttt	eq
 80077d2:	6819      	ldreq	r1, [r3, #0]
 80077d4:	685b      	ldreq	r3, [r3, #4]
 80077d6:	1809      	addeq	r1, r1, r0
 80077d8:	6021      	streq	r1, [r4, #0]
 80077da:	6063      	str	r3, [r4, #4]
 80077dc:	6054      	str	r4, [r2, #4]
 80077de:	e7c9      	b.n	8007774 <_free_r+0x24>
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	20000e08 	.word	0x20000e08

080077e8 <_malloc_r>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	1ccd      	adds	r5, r1, #3
 80077ec:	f025 0503 	bic.w	r5, r5, #3
 80077f0:	3508      	adds	r5, #8
 80077f2:	2d0c      	cmp	r5, #12
 80077f4:	bf38      	it	cc
 80077f6:	250c      	movcc	r5, #12
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	4606      	mov	r6, r0
 80077fc:	db01      	blt.n	8007802 <_malloc_r+0x1a>
 80077fe:	42a9      	cmp	r1, r5
 8007800:	d903      	bls.n	800780a <_malloc_r+0x22>
 8007802:	230c      	movs	r3, #12
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	2000      	movs	r0, #0
 8007808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780a:	f000 fa23 	bl	8007c54 <__malloc_lock>
 800780e:	4921      	ldr	r1, [pc, #132]	; (8007894 <_malloc_r+0xac>)
 8007810:	680a      	ldr	r2, [r1, #0]
 8007812:	4614      	mov	r4, r2
 8007814:	b99c      	cbnz	r4, 800783e <_malloc_r+0x56>
 8007816:	4f20      	ldr	r7, [pc, #128]	; (8007898 <_malloc_r+0xb0>)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	b923      	cbnz	r3, 8007826 <_malloc_r+0x3e>
 800781c:	4621      	mov	r1, r4
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f99e 	bl	8007b60 <_sbrk_r>
 8007824:	6038      	str	r0, [r7, #0]
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f999 	bl	8007b60 <_sbrk_r>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	d123      	bne.n	800787a <_malloc_r+0x92>
 8007832:	230c      	movs	r3, #12
 8007834:	4630      	mov	r0, r6
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f000 fa12 	bl	8007c60 <__malloc_unlock>
 800783c:	e7e3      	b.n	8007806 <_malloc_r+0x1e>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	1b5b      	subs	r3, r3, r5
 8007842:	d417      	bmi.n	8007874 <_malloc_r+0x8c>
 8007844:	2b0b      	cmp	r3, #11
 8007846:	d903      	bls.n	8007850 <_malloc_r+0x68>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	441c      	add	r4, r3
 800784c:	6025      	str	r5, [r4, #0]
 800784e:	e004      	b.n	800785a <_malloc_r+0x72>
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	42a2      	cmp	r2, r4
 8007854:	bf0c      	ite	eq
 8007856:	600b      	streq	r3, [r1, #0]
 8007858:	6053      	strne	r3, [r2, #4]
 800785a:	4630      	mov	r0, r6
 800785c:	f000 fa00 	bl	8007c60 <__malloc_unlock>
 8007860:	f104 000b 	add.w	r0, r4, #11
 8007864:	1d23      	adds	r3, r4, #4
 8007866:	f020 0007 	bic.w	r0, r0, #7
 800786a:	1ac2      	subs	r2, r0, r3
 800786c:	d0cc      	beq.n	8007808 <_malloc_r+0x20>
 800786e:	1a1b      	subs	r3, r3, r0
 8007870:	50a3      	str	r3, [r4, r2]
 8007872:	e7c9      	b.n	8007808 <_malloc_r+0x20>
 8007874:	4622      	mov	r2, r4
 8007876:	6864      	ldr	r4, [r4, #4]
 8007878:	e7cc      	b.n	8007814 <_malloc_r+0x2c>
 800787a:	1cc4      	adds	r4, r0, #3
 800787c:	f024 0403 	bic.w	r4, r4, #3
 8007880:	42a0      	cmp	r0, r4
 8007882:	d0e3      	beq.n	800784c <_malloc_r+0x64>
 8007884:	1a21      	subs	r1, r4, r0
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f96a 	bl	8007b60 <_sbrk_r>
 800788c:	3001      	adds	r0, #1
 800788e:	d1dd      	bne.n	800784c <_malloc_r+0x64>
 8007890:	e7cf      	b.n	8007832 <_malloc_r+0x4a>
 8007892:	bf00      	nop
 8007894:	20000e08 	.word	0x20000e08
 8007898:	20000e0c 	.word	0x20000e0c

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	4682      	mov	sl, r0
 80078a4:	429e      	cmp	r6, r3
 80078a6:	460c      	mov	r4, r1
 80078a8:	4690      	mov	r8, r2
 80078aa:	461f      	mov	r7, r3
 80078ac:	d838      	bhi.n	8007920 <__ssputs_r+0x84>
 80078ae:	898a      	ldrh	r2, [r1, #12]
 80078b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078b4:	d032      	beq.n	800791c <__ssputs_r+0x80>
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	6909      	ldr	r1, [r1, #16]
 80078ba:	3301      	adds	r3, #1
 80078bc:	eba5 0901 	sub.w	r9, r5, r1
 80078c0:	6965      	ldr	r5, [r4, #20]
 80078c2:	444b      	add	r3, r9
 80078c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078cc:	106d      	asrs	r5, r5, #1
 80078ce:	429d      	cmp	r5, r3
 80078d0:	bf38      	it	cc
 80078d2:	461d      	movcc	r5, r3
 80078d4:	0553      	lsls	r3, r2, #21
 80078d6:	d531      	bpl.n	800793c <__ssputs_r+0xa0>
 80078d8:	4629      	mov	r1, r5
 80078da:	f7ff ff85 	bl	80077e8 <_malloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	b950      	cbnz	r0, 80078f8 <__ssputs_r+0x5c>
 80078e2:	230c      	movs	r3, #12
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	f8ca 3000 	str.w	r3, [sl]
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f8:	464a      	mov	r2, r9
 80078fa:	6921      	ldr	r1, [r4, #16]
 80078fc:	f7ff fa54 	bl	8006da8 <memcpy>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	6126      	str	r6, [r4, #16]
 800790e:	444e      	add	r6, r9
 8007910:	6026      	str	r6, [r4, #0]
 8007912:	463e      	mov	r6, r7
 8007914:	6165      	str	r5, [r4, #20]
 8007916:	eba5 0509 	sub.w	r5, r5, r9
 800791a:	60a5      	str	r5, [r4, #8]
 800791c:	42be      	cmp	r6, r7
 800791e:	d900      	bls.n	8007922 <__ssputs_r+0x86>
 8007920:	463e      	mov	r6, r7
 8007922:	4632      	mov	r2, r6
 8007924:	4641      	mov	r1, r8
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	f000 f97a 	bl	8007c20 <memmove>
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	1b9b      	subs	r3, r3, r6
 8007932:	4432      	add	r2, r6
 8007934:	2000      	movs	r0, #0
 8007936:	60a3      	str	r3, [r4, #8]
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	e7db      	b.n	80078f4 <__ssputs_r+0x58>
 800793c:	462a      	mov	r2, r5
 800793e:	f000 f995 	bl	8007c6c <_realloc_r>
 8007942:	4606      	mov	r6, r0
 8007944:	2800      	cmp	r0, #0
 8007946:	d1e1      	bne.n	800790c <__ssputs_r+0x70>
 8007948:	4650      	mov	r0, sl
 800794a:	6921      	ldr	r1, [r4, #16]
 800794c:	f7ff ff00 	bl	8007750 <_free_r>
 8007950:	e7c7      	b.n	80078e2 <__ssputs_r+0x46>
	...

08007954 <_svfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4698      	mov	r8, r3
 800795a:	898b      	ldrh	r3, [r1, #12]
 800795c:	4607      	mov	r7, r0
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	460d      	mov	r5, r1
 8007962:	4614      	mov	r4, r2
 8007964:	b09d      	sub	sp, #116	; 0x74
 8007966:	d50e      	bpl.n	8007986 <_svfiprintf_r+0x32>
 8007968:	690b      	ldr	r3, [r1, #16]
 800796a:	b963      	cbnz	r3, 8007986 <_svfiprintf_r+0x32>
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	f7ff ff3b 	bl	80077e8 <_malloc_r>
 8007972:	6028      	str	r0, [r5, #0]
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	b920      	cbnz	r0, 8007982 <_svfiprintf_r+0x2e>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	e0d1      	b.n	8007b26 <_svfiprintf_r+0x1d2>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	616b      	str	r3, [r5, #20]
 8007986:	2300      	movs	r3, #0
 8007988:	9309      	str	r3, [sp, #36]	; 0x24
 800798a:	2320      	movs	r3, #32
 800798c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007990:	2330      	movs	r3, #48	; 0x30
 8007992:	f04f 0901 	mov.w	r9, #1
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b40 <_svfiprintf_r+0x1ec>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a2:	4623      	mov	r3, r4
 80079a4:	469a      	mov	sl, r3
 80079a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079aa:	b10a      	cbz	r2, 80079b0 <_svfiprintf_r+0x5c>
 80079ac:	2a25      	cmp	r2, #37	; 0x25
 80079ae:	d1f9      	bne.n	80079a4 <_svfiprintf_r+0x50>
 80079b0:	ebba 0b04 	subs.w	fp, sl, r4
 80079b4:	d00b      	beq.n	80079ce <_svfiprintf_r+0x7a>
 80079b6:	465b      	mov	r3, fp
 80079b8:	4622      	mov	r2, r4
 80079ba:	4629      	mov	r1, r5
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff ff6d 	bl	800789c <__ssputs_r>
 80079c2:	3001      	adds	r0, #1
 80079c4:	f000 80aa 	beq.w	8007b1c <_svfiprintf_r+0x1c8>
 80079c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ca:	445a      	add	r2, fp
 80079cc:	9209      	str	r2, [sp, #36]	; 0x24
 80079ce:	f89a 3000 	ldrb.w	r3, [sl]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80a2 	beq.w	8007b1c <_svfiprintf_r+0x1c8>
 80079d8:	2300      	movs	r3, #0
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e2:	f10a 0a01 	add.w	sl, sl, #1
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ee:	931a      	str	r3, [sp, #104]	; 0x68
 80079f0:	4654      	mov	r4, sl
 80079f2:	2205      	movs	r2, #5
 80079f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f8:	4851      	ldr	r0, [pc, #324]	; (8007b40 <_svfiprintf_r+0x1ec>)
 80079fa:	f7ff f9c7 	bl	8006d8c <memchr>
 80079fe:	9a04      	ldr	r2, [sp, #16]
 8007a00:	b9d8      	cbnz	r0, 8007a3a <_svfiprintf_r+0xe6>
 8007a02:	06d0      	lsls	r0, r2, #27
 8007a04:	bf44      	itt	mi
 8007a06:	2320      	movmi	r3, #32
 8007a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a0c:	0711      	lsls	r1, r2, #28
 8007a0e:	bf44      	itt	mi
 8007a10:	232b      	movmi	r3, #43	; 0x2b
 8007a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a16:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1c:	d015      	beq.n	8007a4a <_svfiprintf_r+0xf6>
 8007a1e:	4654      	mov	r4, sl
 8007a20:	2000      	movs	r0, #0
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	9a07      	ldr	r2, [sp, #28]
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a2e:	3b30      	subs	r3, #48	; 0x30
 8007a30:	2b09      	cmp	r3, #9
 8007a32:	d94e      	bls.n	8007ad2 <_svfiprintf_r+0x17e>
 8007a34:	b1b0      	cbz	r0, 8007a64 <_svfiprintf_r+0x110>
 8007a36:	9207      	str	r2, [sp, #28]
 8007a38:	e014      	b.n	8007a64 <_svfiprintf_r+0x110>
 8007a3a:	eba0 0308 	sub.w	r3, r0, r8
 8007a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	46a2      	mov	sl, r4
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	e7d2      	b.n	80079f0 <_svfiprintf_r+0x9c>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	1d19      	adds	r1, r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	9103      	str	r1, [sp, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bfbb      	ittet	lt
 8007a56:	425b      	neglt	r3, r3
 8007a58:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5c:	9307      	strge	r3, [sp, #28]
 8007a5e:	9307      	strlt	r3, [sp, #28]
 8007a60:	bfb8      	it	lt
 8007a62:	9204      	strlt	r2, [sp, #16]
 8007a64:	7823      	ldrb	r3, [r4, #0]
 8007a66:	2b2e      	cmp	r3, #46	; 0x2e
 8007a68:	d10c      	bne.n	8007a84 <_svfiprintf_r+0x130>
 8007a6a:	7863      	ldrb	r3, [r4, #1]
 8007a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6e:	d135      	bne.n	8007adc <_svfiprintf_r+0x188>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	3402      	adds	r4, #2
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9203      	str	r2, [sp, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfb8      	it	lt
 8007a7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b50 <_svfiprintf_r+0x1fc>
 8007a88:	2203      	movs	r2, #3
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	7821      	ldrb	r1, [r4, #0]
 8007a8e:	f7ff f97d 	bl	8006d8c <memchr>
 8007a92:	b140      	cbz	r0, 8007aa6 <_svfiprintf_r+0x152>
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a9e:	9b04      	ldr	r3, [sp, #16]
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	4303      	orrs	r3, r0
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aaa:	2206      	movs	r2, #6
 8007aac:	4825      	ldr	r0, [pc, #148]	; (8007b44 <_svfiprintf_r+0x1f0>)
 8007aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab2:	f7ff f96b 	bl	8006d8c <memchr>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d038      	beq.n	8007b2c <_svfiprintf_r+0x1d8>
 8007aba:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <_svfiprintf_r+0x1f4>)
 8007abc:	bb1b      	cbnz	r3, 8007b06 <_svfiprintf_r+0x1b2>
 8007abe:	9b03      	ldr	r3, [sp, #12]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007acc:	4433      	add	r3, r6
 8007ace:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad0:	e767      	b.n	80079a2 <_svfiprintf_r+0x4e>
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ada:	e7a5      	b.n	8007a28 <_svfiprintf_r+0xd4>
 8007adc:	2300      	movs	r3, #0
 8007ade:	f04f 0c0a 	mov.w	ip, #10
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aee:	3a30      	subs	r2, #48	; 0x30
 8007af0:	2a09      	cmp	r2, #9
 8007af2:	d903      	bls.n	8007afc <_svfiprintf_r+0x1a8>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0c5      	beq.n	8007a84 <_svfiprintf_r+0x130>
 8007af8:	9105      	str	r1, [sp, #20]
 8007afa:	e7c3      	b.n	8007a84 <_svfiprintf_r+0x130>
 8007afc:	4604      	mov	r4, r0
 8007afe:	2301      	movs	r3, #1
 8007b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b04:	e7f0      	b.n	8007ae8 <_svfiprintf_r+0x194>
 8007b06:	ab03      	add	r3, sp, #12
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <_svfiprintf_r+0x1f8>)
 8007b10:	a904      	add	r1, sp, #16
 8007b12:	f7fc fa9d 	bl	8004050 <_printf_float>
 8007b16:	1c42      	adds	r2, r0, #1
 8007b18:	4606      	mov	r6, r0
 8007b1a:	d1d6      	bne.n	8007aca <_svfiprintf_r+0x176>
 8007b1c:	89ab      	ldrh	r3, [r5, #12]
 8007b1e:	065b      	lsls	r3, r3, #25
 8007b20:	f53f af2c 	bmi.w	800797c <_svfiprintf_r+0x28>
 8007b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b26:	b01d      	add	sp, #116	; 0x74
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	ab03      	add	r3, sp, #12
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4638      	mov	r0, r7
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <_svfiprintf_r+0x1f8>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	f7fc fd26 	bl	8004588 <_printf_i>
 8007b3c:	e7eb      	b.n	8007b16 <_svfiprintf_r+0x1c2>
 8007b3e:	bf00      	nop
 8007b40:	0800901c 	.word	0x0800901c
 8007b44:	08009026 	.word	0x08009026
 8007b48:	08004051 	.word	0x08004051
 8007b4c:	0800789d 	.word	0x0800789d
 8007b50:	08009022 	.word	0x08009022

08007b54 <nan>:
 8007b54:	2000      	movs	r0, #0
 8007b56:	4901      	ldr	r1, [pc, #4]	; (8007b5c <nan+0x8>)
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	7ff80000 	.word	0x7ff80000

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	2300      	movs	r3, #0
 8007b64:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_sbrk_r+0x1c>)
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f9 ff84 	bl	8001a78 <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000ee4 	.word	0x20000ee4

08007b80 <strncmp>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	b16a      	cbz	r2, 8007ba0 <strncmp+0x20>
 8007b84:	3901      	subs	r1, #1
 8007b86:	1884      	adds	r4, r0, r2
 8007b88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d103      	bne.n	8007b9c <strncmp+0x1c>
 8007b94:	42a0      	cmp	r0, r4
 8007b96:	d001      	beq.n	8007b9c <strncmp+0x1c>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1f5      	bne.n	8007b88 <strncmp+0x8>
 8007b9c:	1a98      	subs	r0, r3, r2
 8007b9e:	bd10      	pop	{r4, pc}
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	e7fc      	b.n	8007b9e <strncmp+0x1e>

08007ba4 <__ascii_wctomb>:
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	b141      	cbz	r1, 8007bbc <__ascii_wctomb+0x18>
 8007baa:	2aff      	cmp	r2, #255	; 0xff
 8007bac:	d904      	bls.n	8007bb8 <__ascii_wctomb+0x14>
 8007bae:	228a      	movs	r2, #138	; 0x8a
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	4770      	bx	lr
 8007bb8:	2001      	movs	r0, #1
 8007bba:	700a      	strb	r2, [r1, #0]
 8007bbc:	4770      	bx	lr
	...

08007bc0 <__assert_func>:
 8007bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <__assert_func+0x2c>)
 8007bc8:	4605      	mov	r5, r0
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68d8      	ldr	r0, [r3, #12]
 8007bce:	b14c      	cbz	r4, 8007be4 <__assert_func+0x24>
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <__assert_func+0x30>)
 8007bd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bd6:	9100      	str	r1, [sp, #0]
 8007bd8:	462b      	mov	r3, r5
 8007bda:	4906      	ldr	r1, [pc, #24]	; (8007bf4 <__assert_func+0x34>)
 8007bdc:	f000 f80e 	bl	8007bfc <fiprintf>
 8007be0:	f000 fa82 	bl	80080e8 <abort>
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <__assert_func+0x38>)
 8007be6:	461c      	mov	r4, r3
 8007be8:	e7f3      	b.n	8007bd2 <__assert_func+0x12>
 8007bea:	bf00      	nop
 8007bec:	20000810 	.word	0x20000810
 8007bf0:	0800902d 	.word	0x0800902d
 8007bf4:	0800903a 	.word	0x0800903a
 8007bf8:	08009068 	.word	0x08009068

08007bfc <fiprintf>:
 8007bfc:	b40e      	push	{r1, r2, r3}
 8007bfe:	b503      	push	{r0, r1, lr}
 8007c00:	4601      	mov	r1, r0
 8007c02:	ab03      	add	r3, sp, #12
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <fiprintf+0x20>)
 8007c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0a:	6800      	ldr	r0, [r0, #0]
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	f000 f87b 	bl	8007d08 <_vfiprintf_r>
 8007c12:	b002      	add	sp, #8
 8007c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c18:	b003      	add	sp, #12
 8007c1a:	4770      	bx	lr
 8007c1c:	20000810 	.word	0x20000810

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4601      	mov	r1, r0
 8007c42:	4402      	add	r2, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_lock+0x8>)
 8007c56:	f000 bc07 	b.w	8008468 <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20000eec 	.word	0x20000eec

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f000 bc02 	b.w	800846a <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	20000eec 	.word	0x20000eec

08007c6c <_realloc_r>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	4607      	mov	r7, r0
 8007c70:	4614      	mov	r4, r2
 8007c72:	460e      	mov	r6, r1
 8007c74:	b921      	cbnz	r1, 8007c80 <_realloc_r+0x14>
 8007c76:	4611      	mov	r1, r2
 8007c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c7c:	f7ff bdb4 	b.w	80077e8 <_malloc_r>
 8007c80:	b922      	cbnz	r2, 8007c8c <_realloc_r+0x20>
 8007c82:	f7ff fd65 	bl	8007750 <_free_r>
 8007c86:	4625      	mov	r5, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8c:	f000 fc52 	bl	8008534 <_malloc_usable_size_r>
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	d20f      	bcs.n	8007cb4 <_realloc_r+0x48>
 8007c94:	4621      	mov	r1, r4
 8007c96:	4638      	mov	r0, r7
 8007c98:	f7ff fda6 	bl	80077e8 <_malloc_r>
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0f2      	beq.n	8007c88 <_realloc_r+0x1c>
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	f7ff f87f 	bl	8006da8 <memcpy>
 8007caa:	4631      	mov	r1, r6
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff fd4f 	bl	8007750 <_free_r>
 8007cb2:	e7e9      	b.n	8007c88 <_realloc_r+0x1c>
 8007cb4:	4635      	mov	r5, r6
 8007cb6:	e7e7      	b.n	8007c88 <_realloc_r+0x1c>

08007cb8 <__sfputc_r>:
 8007cb8:	6893      	ldr	r3, [r2, #8]
 8007cba:	b410      	push	{r4}
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	6093      	str	r3, [r2, #8]
 8007cc2:	da07      	bge.n	8007cd4 <__sfputc_r+0x1c>
 8007cc4:	6994      	ldr	r4, [r2, #24]
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	db01      	blt.n	8007cce <__sfputc_r+0x16>
 8007cca:	290a      	cmp	r1, #10
 8007ccc:	d102      	bne.n	8007cd4 <__sfputc_r+0x1c>
 8007cce:	bc10      	pop	{r4}
 8007cd0:	f000 b94a 	b.w	8007f68 <__swbuf_r>
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	1c58      	adds	r0, r3, #1
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	7019      	strb	r1, [r3, #0]
 8007cdc:	4608      	mov	r0, r1
 8007cde:	bc10      	pop	{r4}
 8007ce0:	4770      	bx	lr

08007ce2 <__sfputs_r>:
 8007ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	460f      	mov	r7, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	18d5      	adds	r5, r2, r3
 8007cec:	42ac      	cmp	r4, r5
 8007cee:	d101      	bne.n	8007cf4 <__sfputs_r+0x12>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e007      	b.n	8007d04 <__sfputs_r+0x22>
 8007cf4:	463a      	mov	r2, r7
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfc:	f7ff ffdc 	bl	8007cb8 <__sfputc_r>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d1f3      	bne.n	8007cec <__sfputs_r+0xa>
 8007d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d08 <_vfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	460d      	mov	r5, r1
 8007d0e:	4614      	mov	r4, r2
 8007d10:	4698      	mov	r8, r3
 8007d12:	4606      	mov	r6, r0
 8007d14:	b09d      	sub	sp, #116	; 0x74
 8007d16:	b118      	cbz	r0, 8007d20 <_vfiprintf_r+0x18>
 8007d18:	6983      	ldr	r3, [r0, #24]
 8007d1a:	b90b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x18>
 8007d1c:	f000 fb06 	bl	800832c <__sinit>
 8007d20:	4b89      	ldr	r3, [pc, #548]	; (8007f48 <_vfiprintf_r+0x240>)
 8007d22:	429d      	cmp	r5, r3
 8007d24:	d11b      	bne.n	8007d5e <_vfiprintf_r+0x56>
 8007d26:	6875      	ldr	r5, [r6, #4]
 8007d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d2a:	07d9      	lsls	r1, r3, #31
 8007d2c:	d405      	bmi.n	8007d3a <_vfiprintf_r+0x32>
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	059a      	lsls	r2, r3, #22
 8007d32:	d402      	bmi.n	8007d3a <_vfiprintf_r+0x32>
 8007d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d36:	f000 fb97 	bl	8008468 <__retarget_lock_acquire_recursive>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	071b      	lsls	r3, r3, #28
 8007d3e:	d501      	bpl.n	8007d44 <_vfiprintf_r+0x3c>
 8007d40:	692b      	ldr	r3, [r5, #16]
 8007d42:	b9eb      	cbnz	r3, 8007d80 <_vfiprintf_r+0x78>
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 f960 	bl	800800c <__swsetup_r>
 8007d4c:	b1c0      	cbz	r0, 8007d80 <_vfiprintf_r+0x78>
 8007d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d50:	07dc      	lsls	r4, r3, #31
 8007d52:	d50e      	bpl.n	8007d72 <_vfiprintf_r+0x6a>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	b01d      	add	sp, #116	; 0x74
 8007d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5e:	4b7b      	ldr	r3, [pc, #492]	; (8007f4c <_vfiprintf_r+0x244>)
 8007d60:	429d      	cmp	r5, r3
 8007d62:	d101      	bne.n	8007d68 <_vfiprintf_r+0x60>
 8007d64:	68b5      	ldr	r5, [r6, #8]
 8007d66:	e7df      	b.n	8007d28 <_vfiprintf_r+0x20>
 8007d68:	4b79      	ldr	r3, [pc, #484]	; (8007f50 <_vfiprintf_r+0x248>)
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	bf08      	it	eq
 8007d6e:	68f5      	ldreq	r5, [r6, #12]
 8007d70:	e7da      	b.n	8007d28 <_vfiprintf_r+0x20>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	0598      	lsls	r0, r3, #22
 8007d76:	d4ed      	bmi.n	8007d54 <_vfiprintf_r+0x4c>
 8007d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7a:	f000 fb76 	bl	800846a <__retarget_lock_release_recursive>
 8007d7e:	e7e9      	b.n	8007d54 <_vfiprintf_r+0x4c>
 8007d80:	2300      	movs	r3, #0
 8007d82:	9309      	str	r3, [sp, #36]	; 0x24
 8007d84:	2320      	movs	r3, #32
 8007d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d8a:	2330      	movs	r3, #48	; 0x30
 8007d8c:	f04f 0901 	mov.w	r9, #1
 8007d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f54 <_vfiprintf_r+0x24c>
 8007d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	469a      	mov	sl, r3
 8007da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da4:	b10a      	cbz	r2, 8007daa <_vfiprintf_r+0xa2>
 8007da6:	2a25      	cmp	r2, #37	; 0x25
 8007da8:	d1f9      	bne.n	8007d9e <_vfiprintf_r+0x96>
 8007daa:	ebba 0b04 	subs.w	fp, sl, r4
 8007dae:	d00b      	beq.n	8007dc8 <_vfiprintf_r+0xc0>
 8007db0:	465b      	mov	r3, fp
 8007db2:	4622      	mov	r2, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff93 	bl	8007ce2 <__sfputs_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f000 80aa 	beq.w	8007f16 <_vfiprintf_r+0x20e>
 8007dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc4:	445a      	add	r2, fp
 8007dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 80a2 	beq.w	8007f16 <_vfiprintf_r+0x20e>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ddc:	f10a 0a01 	add.w	sl, sl, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	9307      	str	r3, [sp, #28]
 8007de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dea:	4654      	mov	r4, sl
 8007dec:	2205      	movs	r2, #5
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	4858      	ldr	r0, [pc, #352]	; (8007f54 <_vfiprintf_r+0x24c>)
 8007df4:	f7fe ffca 	bl	8006d8c <memchr>
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	b9d8      	cbnz	r0, 8007e34 <_vfiprintf_r+0x12c>
 8007dfc:	06d1      	lsls	r1, r2, #27
 8007dfe:	bf44      	itt	mi
 8007e00:	2320      	movmi	r3, #32
 8007e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e06:	0713      	lsls	r3, r2, #28
 8007e08:	bf44      	itt	mi
 8007e0a:	232b      	movmi	r3, #43	; 0x2b
 8007e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e10:	f89a 3000 	ldrb.w	r3, [sl]
 8007e14:	2b2a      	cmp	r3, #42	; 0x2a
 8007e16:	d015      	beq.n	8007e44 <_vfiprintf_r+0x13c>
 8007e18:	4654      	mov	r4, sl
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f04f 0c0a 	mov.w	ip, #10
 8007e20:	9a07      	ldr	r2, [sp, #28]
 8007e22:	4621      	mov	r1, r4
 8007e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e28:	3b30      	subs	r3, #48	; 0x30
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d94e      	bls.n	8007ecc <_vfiprintf_r+0x1c4>
 8007e2e:	b1b0      	cbz	r0, 8007e5e <_vfiprintf_r+0x156>
 8007e30:	9207      	str	r2, [sp, #28]
 8007e32:	e014      	b.n	8007e5e <_vfiprintf_r+0x156>
 8007e34:	eba0 0308 	sub.w	r3, r0, r8
 8007e38:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	46a2      	mov	sl, r4
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	e7d2      	b.n	8007dea <_vfiprintf_r+0xe2>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	1d19      	adds	r1, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbb      	ittet	lt
 8007e50:	425b      	neglt	r3, r3
 8007e52:	f042 0202 	orrlt.w	r2, r2, #2
 8007e56:	9307      	strge	r3, [sp, #28]
 8007e58:	9307      	strlt	r3, [sp, #28]
 8007e5a:	bfb8      	it	lt
 8007e5c:	9204      	strlt	r2, [sp, #16]
 8007e5e:	7823      	ldrb	r3, [r4, #0]
 8007e60:	2b2e      	cmp	r3, #46	; 0x2e
 8007e62:	d10c      	bne.n	8007e7e <_vfiprintf_r+0x176>
 8007e64:	7863      	ldrb	r3, [r4, #1]
 8007e66:	2b2a      	cmp	r3, #42	; 0x2a
 8007e68:	d135      	bne.n	8007ed6 <_vfiprintf_r+0x1ce>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	3402      	adds	r4, #2
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfb8      	it	lt
 8007e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f64 <_vfiprintf_r+0x25c>
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	7821      	ldrb	r1, [r4, #0]
 8007e88:	f7fe ff80 	bl	8006d8c <memchr>
 8007e8c:	b140      	cbz	r0, 8007ea0 <_vfiprintf_r+0x198>
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	eba0 000a 	sub.w	r0, r0, sl
 8007e94:	fa03 f000 	lsl.w	r0, r3, r0
 8007e98:	9b04      	ldr	r3, [sp, #16]
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	4303      	orrs	r3, r0
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea4:	2206      	movs	r2, #6
 8007ea6:	482c      	ldr	r0, [pc, #176]	; (8007f58 <_vfiprintf_r+0x250>)
 8007ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eac:	f7fe ff6e 	bl	8006d8c <memchr>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d03f      	beq.n	8007f34 <_vfiprintf_r+0x22c>
 8007eb4:	4b29      	ldr	r3, [pc, #164]	; (8007f5c <_vfiprintf_r+0x254>)
 8007eb6:	bb1b      	cbnz	r3, 8007f00 <_vfiprintf_r+0x1f8>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	3307      	adds	r3, #7
 8007ebc:	f023 0307 	bic.w	r3, r3, #7
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec6:	443b      	add	r3, r7
 8007ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eca:	e767      	b.n	8007d9c <_vfiprintf_r+0x94>
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed4:	e7a5      	b.n	8007e22 <_vfiprintf_r+0x11a>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f04f 0c0a 	mov.w	ip, #10
 8007edc:	4619      	mov	r1, r3
 8007ede:	3401      	adds	r4, #1
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee8:	3a30      	subs	r2, #48	; 0x30
 8007eea:	2a09      	cmp	r2, #9
 8007eec:	d903      	bls.n	8007ef6 <_vfiprintf_r+0x1ee>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0c5      	beq.n	8007e7e <_vfiprintf_r+0x176>
 8007ef2:	9105      	str	r1, [sp, #20]
 8007ef4:	e7c3      	b.n	8007e7e <_vfiprintf_r+0x176>
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007efe:	e7f0      	b.n	8007ee2 <_vfiprintf_r+0x1da>
 8007f00:	ab03      	add	r3, sp, #12
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	462a      	mov	r2, r5
 8007f06:	4630      	mov	r0, r6
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <_vfiprintf_r+0x258>)
 8007f0a:	a904      	add	r1, sp, #16
 8007f0c:	f7fc f8a0 	bl	8004050 <_printf_float>
 8007f10:	4607      	mov	r7, r0
 8007f12:	1c78      	adds	r0, r7, #1
 8007f14:	d1d6      	bne.n	8007ec4 <_vfiprintf_r+0x1bc>
 8007f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f18:	07d9      	lsls	r1, r3, #31
 8007f1a:	d405      	bmi.n	8007f28 <_vfiprintf_r+0x220>
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	059a      	lsls	r2, r3, #22
 8007f20:	d402      	bmi.n	8007f28 <_vfiprintf_r+0x220>
 8007f22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f24:	f000 faa1 	bl	800846a <__retarget_lock_release_recursive>
 8007f28:	89ab      	ldrh	r3, [r5, #12]
 8007f2a:	065b      	lsls	r3, r3, #25
 8007f2c:	f53f af12 	bmi.w	8007d54 <_vfiprintf_r+0x4c>
 8007f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f32:	e711      	b.n	8007d58 <_vfiprintf_r+0x50>
 8007f34:	ab03      	add	r3, sp, #12
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <_vfiprintf_r+0x258>)
 8007f3e:	a904      	add	r1, sp, #16
 8007f40:	f7fc fb22 	bl	8004588 <_printf_i>
 8007f44:	e7e4      	b.n	8007f10 <_vfiprintf_r+0x208>
 8007f46:	bf00      	nop
 8007f48:	0800908c 	.word	0x0800908c
 8007f4c:	080090ac 	.word	0x080090ac
 8007f50:	0800906c 	.word	0x0800906c
 8007f54:	0800901c 	.word	0x0800901c
 8007f58:	08009026 	.word	0x08009026
 8007f5c:	08004051 	.word	0x08004051
 8007f60:	08007ce3 	.word	0x08007ce3
 8007f64:	08009022 	.word	0x08009022

08007f68 <__swbuf_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b118      	cbz	r0, 8007f7a <__swbuf_r+0x12>
 8007f72:	6983      	ldr	r3, [r0, #24]
 8007f74:	b90b      	cbnz	r3, 8007f7a <__swbuf_r+0x12>
 8007f76:	f000 f9d9 	bl	800832c <__sinit>
 8007f7a:	4b21      	ldr	r3, [pc, #132]	; (8008000 <__swbuf_r+0x98>)
 8007f7c:	429c      	cmp	r4, r3
 8007f7e:	d12b      	bne.n	8007fd8 <__swbuf_r+0x70>
 8007f80:	686c      	ldr	r4, [r5, #4]
 8007f82:	69a3      	ldr	r3, [r4, #24]
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	071a      	lsls	r2, r3, #28
 8007f8a:	d52f      	bpl.n	8007fec <__swbuf_r+0x84>
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	b36b      	cbz	r3, 8007fec <__swbuf_r+0x84>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	6820      	ldr	r0, [r4, #0]
 8007f94:	b2f6      	uxtb	r6, r6
 8007f96:	1ac0      	subs	r0, r0, r3
 8007f98:	6963      	ldr	r3, [r4, #20]
 8007f9a:	4637      	mov	r7, r6
 8007f9c:	4283      	cmp	r3, r0
 8007f9e:	dc04      	bgt.n	8007faa <__swbuf_r+0x42>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f92e 	bl	8008204 <_fflush_r>
 8007fa8:	bb30      	cbnz	r0, 8007ff8 <__swbuf_r+0x90>
 8007faa:	68a3      	ldr	r3, [r4, #8]
 8007fac:	3001      	adds	r0, #1
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	701e      	strb	r6, [r3, #0]
 8007fba:	6963      	ldr	r3, [r4, #20]
 8007fbc:	4283      	cmp	r3, r0
 8007fbe:	d004      	beq.n	8007fca <__swbuf_r+0x62>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	07db      	lsls	r3, r3, #31
 8007fc4:	d506      	bpl.n	8007fd4 <__swbuf_r+0x6c>
 8007fc6:	2e0a      	cmp	r6, #10
 8007fc8:	d104      	bne.n	8007fd4 <__swbuf_r+0x6c>
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f000 f919 	bl	8008204 <_fflush_r>
 8007fd2:	b988      	cbnz	r0, 8007ff8 <__swbuf_r+0x90>
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <__swbuf_r+0x9c>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d101      	bne.n	8007fe2 <__swbuf_r+0x7a>
 8007fde:	68ac      	ldr	r4, [r5, #8]
 8007fe0:	e7cf      	b.n	8007f82 <__swbuf_r+0x1a>
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <__swbuf_r+0xa0>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	bf08      	it	eq
 8007fe8:	68ec      	ldreq	r4, [r5, #12]
 8007fea:	e7ca      	b.n	8007f82 <__swbuf_r+0x1a>
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f80c 	bl	800800c <__swsetup_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0cb      	beq.n	8007f90 <__swbuf_r+0x28>
 8007ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8007ffc:	e7ea      	b.n	8007fd4 <__swbuf_r+0x6c>
 8007ffe:	bf00      	nop
 8008000:	0800908c 	.word	0x0800908c
 8008004:	080090ac 	.word	0x080090ac
 8008008:	0800906c 	.word	0x0800906c

0800800c <__swsetup_r>:
 800800c:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <__swsetup_r+0xcc>)
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	681d      	ldr	r5, [r3, #0]
 8008012:	4606      	mov	r6, r0
 8008014:	460c      	mov	r4, r1
 8008016:	b125      	cbz	r5, 8008022 <__swsetup_r+0x16>
 8008018:	69ab      	ldr	r3, [r5, #24]
 800801a:	b913      	cbnz	r3, 8008022 <__swsetup_r+0x16>
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f985 	bl	800832c <__sinit>
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <__swsetup_r+0xd0>)
 8008024:	429c      	cmp	r4, r3
 8008026:	d10f      	bne.n	8008048 <__swsetup_r+0x3c>
 8008028:	686c      	ldr	r4, [r5, #4]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008030:	0719      	lsls	r1, r3, #28
 8008032:	d42c      	bmi.n	800808e <__swsetup_r+0x82>
 8008034:	06dd      	lsls	r5, r3, #27
 8008036:	d411      	bmi.n	800805c <__swsetup_r+0x50>
 8008038:	2309      	movs	r3, #9
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	e03e      	b.n	80080c6 <__swsetup_r+0xba>
 8008048:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <__swsetup_r+0xd4>)
 800804a:	429c      	cmp	r4, r3
 800804c:	d101      	bne.n	8008052 <__swsetup_r+0x46>
 800804e:	68ac      	ldr	r4, [r5, #8]
 8008050:	e7eb      	b.n	800802a <__swsetup_r+0x1e>
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <__swsetup_r+0xd8>)
 8008054:	429c      	cmp	r4, r3
 8008056:	bf08      	it	eq
 8008058:	68ec      	ldreq	r4, [r5, #12]
 800805a:	e7e6      	b.n	800802a <__swsetup_r+0x1e>
 800805c:	0758      	lsls	r0, r3, #29
 800805e:	d512      	bpl.n	8008086 <__swsetup_r+0x7a>
 8008060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008062:	b141      	cbz	r1, 8008076 <__swsetup_r+0x6a>
 8008064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008068:	4299      	cmp	r1, r3
 800806a:	d002      	beq.n	8008072 <__swsetup_r+0x66>
 800806c:	4630      	mov	r0, r6
 800806e:	f7ff fb6f 	bl	8007750 <_free_r>
 8008072:	2300      	movs	r3, #0
 8008074:	6363      	str	r3, [r4, #52]	; 0x34
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	2300      	movs	r3, #0
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0308 	orr.w	r3, r3, #8
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	b94b      	cbnz	r3, 80080a6 <__swsetup_r+0x9a>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809c:	d003      	beq.n	80080a6 <__swsetup_r+0x9a>
 800809e:	4621      	mov	r1, r4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 fa07 	bl	80084b4 <__smakebuf_r>
 80080a6:	89a0      	ldrh	r0, [r4, #12]
 80080a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ac:	f010 0301 	ands.w	r3, r0, #1
 80080b0:	d00a      	beq.n	80080c8 <__swsetup_r+0xbc>
 80080b2:	2300      	movs	r3, #0
 80080b4:	60a3      	str	r3, [r4, #8]
 80080b6:	6963      	ldr	r3, [r4, #20]
 80080b8:	425b      	negs	r3, r3
 80080ba:	61a3      	str	r3, [r4, #24]
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	b943      	cbnz	r3, 80080d2 <__swsetup_r+0xc6>
 80080c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080c4:	d1ba      	bne.n	800803c <__swsetup_r+0x30>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	0781      	lsls	r1, r0, #30
 80080ca:	bf58      	it	pl
 80080cc:	6963      	ldrpl	r3, [r4, #20]
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	e7f4      	b.n	80080bc <__swsetup_r+0xb0>
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7f7      	b.n	80080c6 <__swsetup_r+0xba>
 80080d6:	bf00      	nop
 80080d8:	20000810 	.word	0x20000810
 80080dc:	0800908c 	.word	0x0800908c
 80080e0:	080090ac 	.word	0x080090ac
 80080e4:	0800906c 	.word	0x0800906c

080080e8 <abort>:
 80080e8:	2006      	movs	r0, #6
 80080ea:	b508      	push	{r3, lr}
 80080ec:	f000 fa52 	bl	8008594 <raise>
 80080f0:	2001      	movs	r0, #1
 80080f2:	f7f9 fc4d 	bl	8001990 <_exit>
	...

080080f8 <__sflush_r>:
 80080f8:	898a      	ldrh	r2, [r1, #12]
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	4605      	mov	r5, r0
 8008100:	0710      	lsls	r0, r2, #28
 8008102:	460c      	mov	r4, r1
 8008104:	d458      	bmi.n	80081b8 <__sflush_r+0xc0>
 8008106:	684b      	ldr	r3, [r1, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	dc05      	bgt.n	8008118 <__sflush_r+0x20>
 800810c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc02      	bgt.n	8008118 <__sflush_r+0x20>
 8008112:	2000      	movs	r0, #0
 8008114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800811a:	2e00      	cmp	r6, #0
 800811c:	d0f9      	beq.n	8008112 <__sflush_r+0x1a>
 800811e:	2300      	movs	r3, #0
 8008120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008124:	682f      	ldr	r7, [r5, #0]
 8008126:	602b      	str	r3, [r5, #0]
 8008128:	d032      	beq.n	8008190 <__sflush_r+0x98>
 800812a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	075a      	lsls	r2, r3, #29
 8008130:	d505      	bpl.n	800813e <__sflush_r+0x46>
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	1ac0      	subs	r0, r0, r3
 8008136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008138:	b10b      	cbz	r3, 800813e <__sflush_r+0x46>
 800813a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800813c:	1ac0      	subs	r0, r0, r3
 800813e:	2300      	movs	r3, #0
 8008140:	4602      	mov	r2, r0
 8008142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008144:	4628      	mov	r0, r5
 8008146:	6a21      	ldr	r1, [r4, #32]
 8008148:	47b0      	blx	r6
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	d106      	bne.n	800815e <__sflush_r+0x66>
 8008150:	6829      	ldr	r1, [r5, #0]
 8008152:	291d      	cmp	r1, #29
 8008154:	d82c      	bhi.n	80081b0 <__sflush_r+0xb8>
 8008156:	4a2a      	ldr	r2, [pc, #168]	; (8008200 <__sflush_r+0x108>)
 8008158:	40ca      	lsrs	r2, r1
 800815a:	07d6      	lsls	r6, r2, #31
 800815c:	d528      	bpl.n	80081b0 <__sflush_r+0xb8>
 800815e:	2200      	movs	r2, #0
 8008160:	6062      	str	r2, [r4, #4]
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	04d9      	lsls	r1, r3, #19
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	d504      	bpl.n	8008174 <__sflush_r+0x7c>
 800816a:	1c42      	adds	r2, r0, #1
 800816c:	d101      	bne.n	8008172 <__sflush_r+0x7a>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b903      	cbnz	r3, 8008174 <__sflush_r+0x7c>
 8008172:	6560      	str	r0, [r4, #84]	; 0x54
 8008174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008176:	602f      	str	r7, [r5, #0]
 8008178:	2900      	cmp	r1, #0
 800817a:	d0ca      	beq.n	8008112 <__sflush_r+0x1a>
 800817c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008180:	4299      	cmp	r1, r3
 8008182:	d002      	beq.n	800818a <__sflush_r+0x92>
 8008184:	4628      	mov	r0, r5
 8008186:	f7ff fae3 	bl	8007750 <_free_r>
 800818a:	2000      	movs	r0, #0
 800818c:	6360      	str	r0, [r4, #52]	; 0x34
 800818e:	e7c1      	b.n	8008114 <__sflush_r+0x1c>
 8008190:	6a21      	ldr	r1, [r4, #32]
 8008192:	2301      	movs	r3, #1
 8008194:	4628      	mov	r0, r5
 8008196:	47b0      	blx	r6
 8008198:	1c41      	adds	r1, r0, #1
 800819a:	d1c7      	bne.n	800812c <__sflush_r+0x34>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0c4      	beq.n	800812c <__sflush_r+0x34>
 80081a2:	2b1d      	cmp	r3, #29
 80081a4:	d001      	beq.n	80081aa <__sflush_r+0xb2>
 80081a6:	2b16      	cmp	r3, #22
 80081a8:	d101      	bne.n	80081ae <__sflush_r+0xb6>
 80081aa:	602f      	str	r7, [r5, #0]
 80081ac:	e7b1      	b.n	8008112 <__sflush_r+0x1a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	e7ad      	b.n	8008114 <__sflush_r+0x1c>
 80081b8:	690f      	ldr	r7, [r1, #16]
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	d0a9      	beq.n	8008112 <__sflush_r+0x1a>
 80081be:	0793      	lsls	r3, r2, #30
 80081c0:	bf18      	it	ne
 80081c2:	2300      	movne	r3, #0
 80081c4:	680e      	ldr	r6, [r1, #0]
 80081c6:	bf08      	it	eq
 80081c8:	694b      	ldreq	r3, [r1, #20]
 80081ca:	eba6 0807 	sub.w	r8, r6, r7
 80081ce:	600f      	str	r7, [r1, #0]
 80081d0:	608b      	str	r3, [r1, #8]
 80081d2:	f1b8 0f00 	cmp.w	r8, #0
 80081d6:	dd9c      	ble.n	8008112 <__sflush_r+0x1a>
 80081d8:	4643      	mov	r3, r8
 80081da:	463a      	mov	r2, r7
 80081dc:	4628      	mov	r0, r5
 80081de:	6a21      	ldr	r1, [r4, #32]
 80081e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081e2:	47b0      	blx	r6
 80081e4:	2800      	cmp	r0, #0
 80081e6:	dc06      	bgt.n	80081f6 <__sflush_r+0xfe>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	e78e      	b.n	8008114 <__sflush_r+0x1c>
 80081f6:	4407      	add	r7, r0
 80081f8:	eba8 0800 	sub.w	r8, r8, r0
 80081fc:	e7e9      	b.n	80081d2 <__sflush_r+0xda>
 80081fe:	bf00      	nop
 8008200:	20400001 	.word	0x20400001

08008204 <_fflush_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	b913      	cbnz	r3, 8008214 <_fflush_r+0x10>
 800820e:	2500      	movs	r5, #0
 8008210:	4628      	mov	r0, r5
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	b118      	cbz	r0, 800821e <_fflush_r+0x1a>
 8008216:	6983      	ldr	r3, [r0, #24]
 8008218:	b90b      	cbnz	r3, 800821e <_fflush_r+0x1a>
 800821a:	f000 f887 	bl	800832c <__sinit>
 800821e:	4b14      	ldr	r3, [pc, #80]	; (8008270 <_fflush_r+0x6c>)
 8008220:	429c      	cmp	r4, r3
 8008222:	d11b      	bne.n	800825c <_fflush_r+0x58>
 8008224:	686c      	ldr	r4, [r5, #4]
 8008226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0ef      	beq.n	800820e <_fflush_r+0xa>
 800822e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008230:	07d0      	lsls	r0, r2, #31
 8008232:	d404      	bmi.n	800823e <_fflush_r+0x3a>
 8008234:	0599      	lsls	r1, r3, #22
 8008236:	d402      	bmi.n	800823e <_fflush_r+0x3a>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f000 f915 	bl	8008468 <__retarget_lock_acquire_recursive>
 800823e:	4628      	mov	r0, r5
 8008240:	4621      	mov	r1, r4
 8008242:	f7ff ff59 	bl	80080f8 <__sflush_r>
 8008246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008248:	4605      	mov	r5, r0
 800824a:	07da      	lsls	r2, r3, #31
 800824c:	d4e0      	bmi.n	8008210 <_fflush_r+0xc>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	059b      	lsls	r3, r3, #22
 8008252:	d4dd      	bmi.n	8008210 <_fflush_r+0xc>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f000 f908 	bl	800846a <__retarget_lock_release_recursive>
 800825a:	e7d9      	b.n	8008210 <_fflush_r+0xc>
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <_fflush_r+0x70>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <_fflush_r+0x62>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7df      	b.n	8008226 <_fflush_r+0x22>
 8008266:	4b04      	ldr	r3, [pc, #16]	; (8008278 <_fflush_r+0x74>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7da      	b.n	8008226 <_fflush_r+0x22>
 8008270:	0800908c 	.word	0x0800908c
 8008274:	080090ac 	.word	0x080090ac
 8008278:	0800906c 	.word	0x0800906c

0800827c <std>:
 800827c:	2300      	movs	r3, #0
 800827e:	b510      	push	{r4, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	e9c0 3300 	strd	r3, r3, [r0]
 8008286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800828a:	6083      	str	r3, [r0, #8]
 800828c:	8181      	strh	r1, [r0, #12]
 800828e:	6643      	str	r3, [r0, #100]	; 0x64
 8008290:	81c2      	strh	r2, [r0, #14]
 8008292:	6183      	str	r3, [r0, #24]
 8008294:	4619      	mov	r1, r3
 8008296:	2208      	movs	r2, #8
 8008298:	305c      	adds	r0, #92	; 0x5c
 800829a:	f7fb fe33 	bl	8003f04 <memset>
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <std+0x38>)
 80082a0:	6224      	str	r4, [r4, #32]
 80082a2:	6263      	str	r3, [r4, #36]	; 0x24
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <std+0x3c>)
 80082a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <std+0x40>)
 80082aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <std+0x44>)
 80082ae:	6323      	str	r3, [r4, #48]	; 0x30
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	bf00      	nop
 80082b4:	080085cd 	.word	0x080085cd
 80082b8:	080085ef 	.word	0x080085ef
 80082bc:	08008627 	.word	0x08008627
 80082c0:	0800864b 	.word	0x0800864b

080082c4 <_cleanup_r>:
 80082c4:	4901      	ldr	r1, [pc, #4]	; (80082cc <_cleanup_r+0x8>)
 80082c6:	f000 b8af 	b.w	8008428 <_fwalk_reent>
 80082ca:	bf00      	nop
 80082cc:	08008205 	.word	0x08008205

080082d0 <__sfmoreglue>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	2568      	movs	r5, #104	; 0x68
 80082d4:	1e4a      	subs	r2, r1, #1
 80082d6:	4355      	muls	r5, r2
 80082d8:	460e      	mov	r6, r1
 80082da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082de:	f7ff fa83 	bl	80077e8 <_malloc_r>
 80082e2:	4604      	mov	r4, r0
 80082e4:	b140      	cbz	r0, 80082f8 <__sfmoreglue+0x28>
 80082e6:	2100      	movs	r1, #0
 80082e8:	e9c0 1600 	strd	r1, r6, [r0]
 80082ec:	300c      	adds	r0, #12
 80082ee:	60a0      	str	r0, [r4, #8]
 80082f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082f4:	f7fb fe06 	bl	8003f04 <memset>
 80082f8:	4620      	mov	r0, r4
 80082fa:	bd70      	pop	{r4, r5, r6, pc}

080082fc <__sfp_lock_acquire>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__sfp_lock_acquire+0x8>)
 80082fe:	f000 b8b3 	b.w	8008468 <__retarget_lock_acquire_recursive>
 8008302:	bf00      	nop
 8008304:	20000ef0 	.word	0x20000ef0

08008308 <__sfp_lock_release>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__sfp_lock_release+0x8>)
 800830a:	f000 b8ae 	b.w	800846a <__retarget_lock_release_recursive>
 800830e:	bf00      	nop
 8008310:	20000ef0 	.word	0x20000ef0

08008314 <__sinit_lock_acquire>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__sinit_lock_acquire+0x8>)
 8008316:	f000 b8a7 	b.w	8008468 <__retarget_lock_acquire_recursive>
 800831a:	bf00      	nop
 800831c:	20000eeb 	.word	0x20000eeb

08008320 <__sinit_lock_release>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__sinit_lock_release+0x8>)
 8008322:	f000 b8a2 	b.w	800846a <__retarget_lock_release_recursive>
 8008326:	bf00      	nop
 8008328:	20000eeb 	.word	0x20000eeb

0800832c <__sinit>:
 800832c:	b510      	push	{r4, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	f7ff fff0 	bl	8008314 <__sinit_lock_acquire>
 8008334:	69a3      	ldr	r3, [r4, #24]
 8008336:	b11b      	cbz	r3, 8008340 <__sinit+0x14>
 8008338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833c:	f7ff bff0 	b.w	8008320 <__sinit_lock_release>
 8008340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008344:	6523      	str	r3, [r4, #80]	; 0x50
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <__sinit+0x68>)
 8008348:	4a13      	ldr	r2, [pc, #76]	; (8008398 <__sinit+0x6c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	62a2      	str	r2, [r4, #40]	; 0x28
 800834e:	42a3      	cmp	r3, r4
 8008350:	bf08      	it	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	4620      	mov	r0, r4
 8008356:	bf08      	it	eq
 8008358:	61a3      	streq	r3, [r4, #24]
 800835a:	f000 f81f 	bl	800839c <__sfp>
 800835e:	6060      	str	r0, [r4, #4]
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f81b 	bl	800839c <__sfp>
 8008366:	60a0      	str	r0, [r4, #8]
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f817 	bl	800839c <__sfp>
 800836e:	2200      	movs	r2, #0
 8008370:	2104      	movs	r1, #4
 8008372:	60e0      	str	r0, [r4, #12]
 8008374:	6860      	ldr	r0, [r4, #4]
 8008376:	f7ff ff81 	bl	800827c <std>
 800837a:	2201      	movs	r2, #1
 800837c:	2109      	movs	r1, #9
 800837e:	68a0      	ldr	r0, [r4, #8]
 8008380:	f7ff ff7c 	bl	800827c <std>
 8008384:	2202      	movs	r2, #2
 8008386:	2112      	movs	r1, #18
 8008388:	68e0      	ldr	r0, [r4, #12]
 800838a:	f7ff ff77 	bl	800827c <std>
 800838e:	2301      	movs	r3, #1
 8008390:	61a3      	str	r3, [r4, #24]
 8008392:	e7d1      	b.n	8008338 <__sinit+0xc>
 8008394:	08008c14 	.word	0x08008c14
 8008398:	080082c5 	.word	0x080082c5

0800839c <__sfp>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	4607      	mov	r7, r0
 80083a0:	f7ff ffac 	bl	80082fc <__sfp_lock_acquire>
 80083a4:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <__sfp+0x84>)
 80083a6:	681e      	ldr	r6, [r3, #0]
 80083a8:	69b3      	ldr	r3, [r6, #24]
 80083aa:	b913      	cbnz	r3, 80083b2 <__sfp+0x16>
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ffbd 	bl	800832c <__sinit>
 80083b2:	3648      	adds	r6, #72	; 0x48
 80083b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	d503      	bpl.n	80083c4 <__sfp+0x28>
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	b30b      	cbz	r3, 8008404 <__sfp+0x68>
 80083c0:	6836      	ldr	r6, [r6, #0]
 80083c2:	e7f7      	b.n	80083b4 <__sfp+0x18>
 80083c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083c8:	b9d5      	cbnz	r5, 8008400 <__sfp+0x64>
 80083ca:	4b16      	ldr	r3, [pc, #88]	; (8008424 <__sfp+0x88>)
 80083cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083d0:	60e3      	str	r3, [r4, #12]
 80083d2:	6665      	str	r5, [r4, #100]	; 0x64
 80083d4:	f000 f847 	bl	8008466 <__retarget_lock_init_recursive>
 80083d8:	f7ff ff96 	bl	8008308 <__sfp_lock_release>
 80083dc:	2208      	movs	r2, #8
 80083de:	4629      	mov	r1, r5
 80083e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083e8:	6025      	str	r5, [r4, #0]
 80083ea:	61a5      	str	r5, [r4, #24]
 80083ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083f0:	f7fb fd88 	bl	8003f04 <memset>
 80083f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083fc:	4620      	mov	r0, r4
 80083fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008400:	3468      	adds	r4, #104	; 0x68
 8008402:	e7d9      	b.n	80083b8 <__sfp+0x1c>
 8008404:	2104      	movs	r1, #4
 8008406:	4638      	mov	r0, r7
 8008408:	f7ff ff62 	bl	80082d0 <__sfmoreglue>
 800840c:	4604      	mov	r4, r0
 800840e:	6030      	str	r0, [r6, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d1d5      	bne.n	80083c0 <__sfp+0x24>
 8008414:	f7ff ff78 	bl	8008308 <__sfp_lock_release>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	e7ee      	b.n	80083fc <__sfp+0x60>
 800841e:	bf00      	nop
 8008420:	08008c14 	.word	0x08008c14
 8008424:	ffff0001 	.word	0xffff0001

08008428 <_fwalk_reent>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	4606      	mov	r6, r0
 800842e:	4688      	mov	r8, r1
 8008430:	2700      	movs	r7, #0
 8008432:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800843a:	f1b9 0901 	subs.w	r9, r9, #1
 800843e:	d505      	bpl.n	800844c <_fwalk_reent+0x24>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	2c00      	cmp	r4, #0
 8008444:	d1f7      	bne.n	8008436 <_fwalk_reent+0xe>
 8008446:	4638      	mov	r0, r7
 8008448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844c:	89ab      	ldrh	r3, [r5, #12]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d907      	bls.n	8008462 <_fwalk_reent+0x3a>
 8008452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008456:	3301      	adds	r3, #1
 8008458:	d003      	beq.n	8008462 <_fwalk_reent+0x3a>
 800845a:	4629      	mov	r1, r5
 800845c:	4630      	mov	r0, r6
 800845e:	47c0      	blx	r8
 8008460:	4307      	orrs	r7, r0
 8008462:	3568      	adds	r5, #104	; 0x68
 8008464:	e7e9      	b.n	800843a <_fwalk_reent+0x12>

08008466 <__retarget_lock_init_recursive>:
 8008466:	4770      	bx	lr

08008468 <__retarget_lock_acquire_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_release_recursive>:
 800846a:	4770      	bx	lr

0800846c <__swhatbuf_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008474:	4614      	mov	r4, r2
 8008476:	2900      	cmp	r1, #0
 8008478:	461d      	mov	r5, r3
 800847a:	b096      	sub	sp, #88	; 0x58
 800847c:	da07      	bge.n	800848e <__swhatbuf_r+0x22>
 800847e:	2300      	movs	r3, #0
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	89b3      	ldrh	r3, [r6, #12]
 8008484:	061a      	lsls	r2, r3, #24
 8008486:	d410      	bmi.n	80084aa <__swhatbuf_r+0x3e>
 8008488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848c:	e00e      	b.n	80084ac <__swhatbuf_r+0x40>
 800848e:	466a      	mov	r2, sp
 8008490:	f000 f902 	bl	8008698 <_fstat_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	dbf2      	blt.n	800847e <__swhatbuf_r+0x12>
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800849e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084a2:	425a      	negs	r2, r3
 80084a4:	415a      	adcs	r2, r3
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	e7ee      	b.n	8008488 <__swhatbuf_r+0x1c>
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	2000      	movs	r0, #0
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	b016      	add	sp, #88	; 0x58
 80084b2:	bd70      	pop	{r4, r5, r6, pc}

080084b4 <__smakebuf_r>:
 80084b4:	898b      	ldrh	r3, [r1, #12]
 80084b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b8:	079d      	lsls	r5, r3, #30
 80084ba:	4606      	mov	r6, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	d507      	bpl.n	80084d0 <__smakebuf_r+0x1c>
 80084c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	2301      	movs	r3, #1
 80084ca:	6163      	str	r3, [r4, #20]
 80084cc:	b002      	add	sp, #8
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	466a      	mov	r2, sp
 80084d2:	ab01      	add	r3, sp, #4
 80084d4:	f7ff ffca 	bl	800846c <__swhatbuf_r>
 80084d8:	9900      	ldr	r1, [sp, #0]
 80084da:	4605      	mov	r5, r0
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff f983 	bl	80077e8 <_malloc_r>
 80084e2:	b948      	cbnz	r0, 80084f8 <__smakebuf_r+0x44>
 80084e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d4ef      	bmi.n	80084cc <__smakebuf_r+0x18>
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e7e3      	b.n	80084c0 <__smakebuf_r+0xc>
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <__smakebuf_r+0x7c>)
 80084fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	6020      	str	r0, [r4, #0]
 8008500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	9b00      	ldr	r3, [sp, #0]
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	6163      	str	r3, [r4, #20]
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	b15b      	cbz	r3, 8008528 <__smakebuf_r+0x74>
 8008510:	4630      	mov	r0, r6
 8008512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008516:	f000 f8d1 	bl	80086bc <_isatty_r>
 800851a:	b128      	cbz	r0, 8008528 <__smakebuf_r+0x74>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	89a0      	ldrh	r0, [r4, #12]
 800852a:	4305      	orrs	r5, r0
 800852c:	81a5      	strh	r5, [r4, #12]
 800852e:	e7cd      	b.n	80084cc <__smakebuf_r+0x18>
 8008530:	080082c5 	.word	0x080082c5

08008534 <_malloc_usable_size_r>:
 8008534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008538:	1f18      	subs	r0, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfbc      	itt	lt
 800853e:	580b      	ldrlt	r3, [r1, r0]
 8008540:	18c0      	addlt	r0, r0, r3
 8008542:	4770      	bx	lr

08008544 <_raise_r>:
 8008544:	291f      	cmp	r1, #31
 8008546:	b538      	push	{r3, r4, r5, lr}
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	d904      	bls.n	8008558 <_raise_r+0x14>
 800854e:	2316      	movs	r3, #22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800855a:	b112      	cbz	r2, 8008562 <_raise_r+0x1e>
 800855c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008560:	b94b      	cbnz	r3, 8008576 <_raise_r+0x32>
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f830 	bl	80085c8 <_getpid_r>
 8008568:	462a      	mov	r2, r5
 800856a:	4601      	mov	r1, r0
 800856c:	4620      	mov	r0, r4
 800856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008572:	f000 b817 	b.w	80085a4 <_kill_r>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d00a      	beq.n	8008590 <_raise_r+0x4c>
 800857a:	1c59      	adds	r1, r3, #1
 800857c:	d103      	bne.n	8008586 <_raise_r+0x42>
 800857e:	2316      	movs	r3, #22
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	2001      	movs	r0, #1
 8008584:	e7e7      	b.n	8008556 <_raise_r+0x12>
 8008586:	2400      	movs	r4, #0
 8008588:	4628      	mov	r0, r5
 800858a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800858e:	4798      	blx	r3
 8008590:	2000      	movs	r0, #0
 8008592:	e7e0      	b.n	8008556 <_raise_r+0x12>

08008594 <raise>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <raise+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f7ff bfd3 	b.w	8008544 <_raise_r>
 800859e:	bf00      	nop
 80085a0:	20000810 	.word	0x20000810

080085a4 <_kill_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	2300      	movs	r3, #0
 80085a8:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_kill_r+0x20>)
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f9 f9dd 	bl	8001970 <_kill>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_kill_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_kill_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000ee4 	.word	0x20000ee4

080085c8 <_getpid_r>:
 80085c8:	f7f9 b9cb 	b.w	8001962 <_getpid>

080085cc <__sread>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	f000 f894 	bl	8008700 <_read_r>
 80085d8:	2800      	cmp	r0, #0
 80085da:	bfab      	itete	ge
 80085dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085de:	89a3      	ldrhlt	r3, [r4, #12]
 80085e0:	181b      	addge	r3, r3, r0
 80085e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085e6:	bfac      	ite	ge
 80085e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ea:	81a3      	strhlt	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__swrite>:
 80085ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	461f      	mov	r7, r3
 80085f4:	898b      	ldrh	r3, [r1, #12]
 80085f6:	4605      	mov	r5, r0
 80085f8:	05db      	lsls	r3, r3, #23
 80085fa:	460c      	mov	r4, r1
 80085fc:	4616      	mov	r6, r2
 80085fe:	d505      	bpl.n	800860c <__swrite+0x1e>
 8008600:	2302      	movs	r3, #2
 8008602:	2200      	movs	r2, #0
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	f000 f868 	bl	80086dc <_lseek_r>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	4632      	mov	r2, r6
 8008610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	4628      	mov	r0, r5
 8008618:	463b      	mov	r3, r7
 800861a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800861e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008622:	f000 b817 	b.w	8008654 <_write_r>

08008626 <__sseek>:
 8008626:	b510      	push	{r4, lr}
 8008628:	460c      	mov	r4, r1
 800862a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862e:	f000 f855 	bl	80086dc <_lseek_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	bf15      	itete	ne
 8008638:	6560      	strne	r0, [r4, #84]	; 0x54
 800863a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800863e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008642:	81a3      	strheq	r3, [r4, #12]
 8008644:	bf18      	it	ne
 8008646:	81a3      	strhne	r3, [r4, #12]
 8008648:	bd10      	pop	{r4, pc}

0800864a <__sclose>:
 800864a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864e:	f000 b813 	b.w	8008678 <_close_r>
	...

08008654 <_write_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	2200      	movs	r2, #0
 800865e:	4d05      	ldr	r5, [pc, #20]	; (8008674 <_write_r+0x20>)
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f7f9 f9bb 	bl	80019de <_write>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_write_r+0x1e>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_write_r+0x1e>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20000ee4 	.word	0x20000ee4

08008678 <_close_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	2300      	movs	r3, #0
 800867c:	4d05      	ldr	r5, [pc, #20]	; (8008694 <_close_r+0x1c>)
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	f7f9 f9c7 	bl	8001a16 <_close>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_close_r+0x1a>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_close_r+0x1a>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	20000ee4 	.word	0x20000ee4

08008698 <_fstat_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	2300      	movs	r3, #0
 800869c:	4d06      	ldr	r5, [pc, #24]	; (80086b8 <_fstat_r+0x20>)
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f7f9 f9c1 	bl	8001a2c <_fstat>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d102      	bne.n	80086b4 <_fstat_r+0x1c>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b103      	cbz	r3, 80086b4 <_fstat_r+0x1c>
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	bf00      	nop
 80086b8:	20000ee4 	.word	0x20000ee4

080086bc <_isatty_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	2300      	movs	r3, #0
 80086c0:	4d05      	ldr	r5, [pc, #20]	; (80086d8 <_isatty_r+0x1c>)
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f9 f9bf 	bl	8001a4a <_isatty>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_isatty_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_isatty_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20000ee4 	.word	0x20000ee4

080086dc <_lseek_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	2200      	movs	r2, #0
 80086e6:	4d05      	ldr	r5, [pc, #20]	; (80086fc <_lseek_r+0x20>)
 80086e8:	602a      	str	r2, [r5, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f7f9 f9b7 	bl	8001a5e <_lseek>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_lseek_r+0x1e>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_lseek_r+0x1e>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000ee4 	.word	0x20000ee4

08008700 <_read_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	4611      	mov	r1, r2
 8008708:	2200      	movs	r2, #0
 800870a:	4d05      	ldr	r5, [pc, #20]	; (8008720 <_read_r+0x20>)
 800870c:	602a      	str	r2, [r5, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f7f9 f948 	bl	80019a4 <_read>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_read_r+0x1e>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_read_r+0x1e>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20000ee4 	.word	0x20000ee4

08008724 <_init>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr

08008730 <_fini>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	bf00      	nop
 8008734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008736:	bc08      	pop	{r3}
 8008738:	469e      	mov	lr, r3
 800873a:	4770      	bx	lr
